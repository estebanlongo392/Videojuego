
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008360  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08008524  08008524  00009524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b44  08008b44  0002167c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b44  08008b44  00009b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b4c  08008b4c  0002167c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b4c  08008b4c  00009b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0001767c  20000000  08008b54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c9c  2001767c  080201d0  0002167c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001e318  080201d0  00022318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002167c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe38  00000000  00000000  000216ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a02  00000000  00000000  000314e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00033ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9f  00000000  00000000  00034cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023648  00000000  00000000  0003574f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bf0  00000000  00000000  00058d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce13e  00000000  00000000  0006d987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  0013bb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013f2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2001767c 	.word	0x2001767c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800850c 	.word	0x0800850c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20017680 	.word	0x20017680
 8000200:	0800850c 	.word	0x0800850c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2140      	movs	r1, #64	@ 0x40
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <SELECT+0x18>)
 800050e:	f002 fe27 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f002 fabc 	bl	8002a90 <HAL_Delay>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40020400 	.word	0x40020400

08000520 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2140      	movs	r1, #64	@ 0x40
 8000528:	4803      	ldr	r0, [pc, #12]	@ (8000538 <DESELECT+0x18>)
 800052a:	f002 fe19 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f002 faae 	bl	8002a90 <HAL_Delay>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020400 	.word	0x40020400

0800053c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000546:	bf00      	nop
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <SPI_TxByte+0x30>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	2b02      	cmp	r3, #2
 8000554:	d1f8      	bne.n	8000548 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000556:	1df9      	adds	r1, r7, #7
 8000558:	2364      	movs	r3, #100	@ 0x64
 800055a:	2201      	movs	r2, #1
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <SPI_TxByte+0x30>)
 800055e:	f003 fc04 	bl	8003d6a <HAL_SPI_Transmit>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200176a0 	.word	0x200176a0

08000570 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057c:	bf00      	nop
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <SPI_TxBuffer+0x30>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b02      	cmp	r3, #2
 800058a:	d1f8      	bne.n	800057e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	2364      	movs	r3, #100	@ 0x64
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <SPI_TxBuffer+0x30>)
 8000594:	f003 fbe9 	bl	8003d6a <HAL_SPI_Transmit>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200176a0 	.word	0x200176a0

080005a4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005aa:	23ff      	movs	r3, #255	@ 0xff
 80005ac:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ae:	bf00      	nop
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <SPI_RxByte+0x34>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d1f8      	bne.n	80005b0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005be:	1dba      	adds	r2, r7, #6
 80005c0:	1df9      	adds	r1, r7, #7
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <SPI_RxByte+0x34>)
 80005ca:	f003 fd11 	bl	8003ff0 <HAL_SPI_TransmitReceive>

	return data;
 80005ce:	79bb      	ldrb	r3, [r7, #6]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200176a0 	.word	0x200176a0

080005dc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005e4:	f7ff ffde 	bl	80005a4 <SPI_RxByte>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	701a      	strb	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <SD_ReadyWait+0x30>)
 8000600:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000604:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000606:	f7ff ffcd 	bl	80005a4 <SPI_RxByte>
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2bff      	cmp	r3, #255	@ 0xff
 8000612:	d003      	beq.n	800061c <SD_ReadyWait+0x24>
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <SD_ReadyWait+0x30>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f4      	bne.n	8000606 <SD_ReadyWait+0xe>

	return res;
 800061c:	79fb      	ldrb	r3, [r7, #7]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2001769a 	.word	0x2001769a

0800062c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000632:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000636:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000638:	f7ff ff72 	bl	8000520 <DESELECT>
	for(int i = 0; i < 10; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e005      	b.n	800064e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000642:	20ff      	movs	r0, #255	@ 0xff
 8000644:	f7ff ff7a 	bl	800053c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	3301      	adds	r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2b09      	cmp	r3, #9
 8000652:	ddf6      	ble.n	8000642 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000654:	f7ff ff56 	bl	8000504 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000658:	2340      	movs	r3, #64	@ 0x40
 800065a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800066c:	2395      	movs	r3, #149	@ 0x95
 800066e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000670:	463b      	mov	r3, r7
 8000672:	2106      	movs	r1, #6
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff7b 	bl	8000570 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800067a:	e002      	b.n	8000682 <SD_PowerOn+0x56>
	{
		cnt--;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3b01      	subs	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000682:	f7ff ff8f 	bl	80005a4 <SPI_RxByte>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d002      	beq.n	8000692 <SD_PowerOn+0x66>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000692:	f7ff ff45 	bl	8000520 <DESELECT>
	SPI_TxByte(0XFF);
 8000696:	20ff      	movs	r0, #255	@ 0xff
 8000698:	f7ff ff50 	bl	800053c <SPI_TxByte>

	PowerFlag = 1;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <SD_PowerOn+0x80>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2001769d 	.word	0x2001769d

080006b0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <SD_PowerOff+0x14>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	2001769d 	.word	0x2001769d

080006c8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <SD_CheckPower+0x14>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2001769d 	.word	0x2001769d

080006e0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <SD_RxDataBlock+0x58>)
 80006ec:	22c8      	movs	r2, #200	@ 0xc8
 80006ee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006f0:	f7ff ff58 	bl	80005a4 <SPI_RxByte>
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2bff      	cmp	r3, #255	@ 0xff
 80006fc:	d103      	bne.n	8000706 <SD_RxDataBlock+0x26>
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SD_RxDataBlock+0x58>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f4      	bne.n	80006f0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2bfe      	cmp	r3, #254	@ 0xfe
 800070a:	d001      	beq.n	8000710 <SD_RxDataBlock+0x30>
 800070c:	2300      	movs	r3, #0
 800070e:	e00f      	b.n	8000730 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff60 	bl	80005dc <SPI_RxBytePtr>
	} while(len--);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	603a      	str	r2, [r7, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f4      	bne.n	8000710 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000726:	f7ff ff3d 	bl	80005a4 <SPI_RxByte>
	SPI_RxByte();
 800072a:	f7ff ff3b 	bl	80005a4 <SPI_RxByte>

	return TRUE;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20017698 	.word	0x20017698

0800073c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800074c:	f7ff ff54 	bl	80005f8 <SD_ReadyWait>
 8000750:	4603      	mov	r3, r0
 8000752:	2bff      	cmp	r3, #255	@ 0xff
 8000754:	d001      	beq.n	800075a <SD_TxDataBlock+0x1e>
 8000756:	2300      	movs	r3, #0
 8000758:	e02f      	b.n	80007ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feed 	bl	800053c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	2bfd      	cmp	r3, #253	@ 0xfd
 8000766:	d020      	beq.n	80007aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000768:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff feff 	bl	8000570 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000772:	f7ff ff17 	bl	80005a4 <SPI_RxByte>
		SPI_RxByte();
 8000776:	f7ff ff15 	bl	80005a4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800077a:	e00b      	b.n	8000794 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800077c:	f7ff ff12 	bl	80005a4 <SPI_RxByte>
 8000780:	4603      	mov	r3, r0
 8000782:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f003 031f 	and.w	r3, r3, #31
 800078a:	2b05      	cmp	r3, #5
 800078c:	d006      	beq.n	800079c <SD_TxDataBlock+0x60>
			i++;
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	3301      	adds	r3, #1
 8000792:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	2b40      	cmp	r3, #64	@ 0x40
 8000798:	d9f0      	bls.n	800077c <SD_TxDataBlock+0x40>
 800079a:	e000      	b.n	800079e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800079c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800079e:	bf00      	nop
 80007a0:	f7ff ff00 	bl	80005a4 <SPI_RxByte>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0fa      	beq.n	80007a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	f003 031f 	and.w	r3, r3, #31
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	d101      	bne.n	80007b8 <SD_TxDataBlock+0x7c>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	6039      	str	r1, [r7, #0]
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007ce:	f7ff ff13 	bl	80005f8 <SD_ReadyWait>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2bff      	cmp	r3, #255	@ 0xff
 80007d6:	d001      	beq.n	80007dc <SD_SendCmd+0x1a>
 80007d8:	23ff      	movs	r3, #255	@ 0xff
 80007da:	e042      	b.n	8000862 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff feac 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0e1b      	lsrs	r3, r3, #24
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fea6 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fea0 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe9a 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe95 	bl	800053c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b40      	cmp	r3, #64	@ 0x40
 8000816:	d102      	bne.n	800081e <SD_SendCmd+0x5c>
 8000818:	2395      	movs	r3, #149	@ 0x95
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e007      	b.n	800082e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b48      	cmp	r3, #72	@ 0x48
 8000822:	d102      	bne.n	800082a <SD_SendCmd+0x68>
 8000824:	2387      	movs	r3, #135	@ 0x87
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e001      	b.n	800082e <SD_SendCmd+0x6c>
	else crc = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe83 	bl	800053c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b4c      	cmp	r3, #76	@ 0x4c
 800083a:	d101      	bne.n	8000840 <SD_SendCmd+0x7e>
 800083c:	f7ff feb2 	bl	80005a4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000840:	230a      	movs	r3, #10
 8000842:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000844:	f7ff feae 	bl	80005a4 <SPI_RxByte>
 8000848:	4603      	mov	r3, r0
 800084a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800084c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000850:	2b00      	cmp	r3, #0
 8000852:	da05      	bge.n	8000860 <SD_SendCmd+0x9e>
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	3b01      	subs	r3, #1
 8000858:	73bb      	strb	r3, [r7, #14]
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f1      	bne.n	8000844 <SD_SendCmd+0x82>

	return res;
 8000860:	7b7b      	ldrb	r3, [r7, #13]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SD_disk_initialize+0x14>
 800087c:	2301      	movs	r3, #1
 800087e:	e0d1      	b.n	8000a24 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000880:	4b6a      	ldr	r3, [pc, #424]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <SD_disk_initialize+0x2a>
 800088e:	4b67      	ldr	r3, [pc, #412]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	e0c6      	b.n	8000a24 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000896:	f7ff fec9 	bl	800062c <SD_PowerOn>

	/* slave select */
	SELECT();
 800089a:	f7ff fe33 	bl	8000504 <SELECT>

	/* check disk type */
	type = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2040      	movs	r0, #64	@ 0x40
 80008a6:	f7ff ff8c 	bl	80007c2 <SD_SendCmd>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	f040 80a1 	bne.w	80009f4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008b2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80008b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008be:	2048      	movs	r0, #72	@ 0x48
 80008c0:	f7ff ff7f 	bl	80007c2 <SD_SendCmd>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d155      	bne.n	8000976 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	e00c      	b.n	80008ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008d0:	7bfc      	ldrb	r4, [r7, #15]
 80008d2:	f7ff fe67 	bl	80005a4 <SPI_RxByte>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	f104 0310 	add.w	r3, r4, #16
 80008de:	443b      	add	r3, r7
 80008e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	3301      	adds	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d9ef      	bls.n	80008d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d17e      	bne.n	80009f4 <SD_disk_initialize+0x188>
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	2baa      	cmp	r3, #170	@ 0xaa
 80008fa:	d17b      	bne.n	80009f4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008fc:	2100      	movs	r1, #0
 80008fe:	2077      	movs	r0, #119	@ 0x77
 8000900:	f7ff ff5f 	bl	80007c2 <SD_SendCmd>
 8000904:	4603      	mov	r3, r0
 8000906:	2b01      	cmp	r3, #1
 8000908:	d807      	bhi.n	800091a <SD_disk_initialize+0xae>
 800090a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800090e:	2069      	movs	r0, #105	@ 0x69
 8000910:	f7ff ff57 	bl	80007c2 <SD_SendCmd>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d004      	beq.n	8000924 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800091a:	4b45      	ldr	r3, [pc, #276]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1ec      	bne.n	80008fc <SD_disk_initialize+0x90>
 8000922:	e000      	b.n	8000926 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000924:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000926:	4b42      	ldr	r3, [pc, #264]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d062      	beq.n	80009f4 <SD_disk_initialize+0x188>
 800092e:	2100      	movs	r1, #0
 8000930:	207a      	movs	r0, #122	@ 0x7a
 8000932:	f7ff ff46 	bl	80007c2 <SD_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d15b      	bne.n	80009f4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e00c      	b.n	800095c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000942:	7bfc      	ldrb	r4, [r7, #15]
 8000944:	f7ff fe2e 	bl	80005a4 <SPI_RxByte>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	f104 0310 	add.w	r3, r4, #16
 8000950:	443b      	add	r3, r7
 8000952:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	3301      	adds	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d9ef      	bls.n	8000942 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000962:	7a3b      	ldrb	r3, [r7, #8]
 8000964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SD_disk_initialize+0x104>
 800096c:	230c      	movs	r3, #12
 800096e:	e000      	b.n	8000972 <SD_disk_initialize+0x106>
 8000970:	2304      	movs	r3, #4
 8000972:	73bb      	strb	r3, [r7, #14]
 8000974:	e03e      	b.n	80009f4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000976:	2100      	movs	r1, #0
 8000978:	2077      	movs	r0, #119	@ 0x77
 800097a:	f7ff ff22 	bl	80007c2 <SD_SendCmd>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d808      	bhi.n	8000996 <SD_disk_initialize+0x12a>
 8000984:	2100      	movs	r1, #0
 8000986:	2069      	movs	r0, #105	@ 0x69
 8000988:	f7ff ff1b 	bl	80007c2 <SD_SendCmd>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d801      	bhi.n	8000996 <SD_disk_initialize+0x12a>
 8000992:	2302      	movs	r3, #2
 8000994:	e000      	b.n	8000998 <SD_disk_initialize+0x12c>
 8000996:	2301      	movs	r3, #1
 8000998:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d10e      	bne.n	80009be <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009a0:	2100      	movs	r1, #0
 80009a2:	2077      	movs	r0, #119	@ 0x77
 80009a4:	f7ff ff0d 	bl	80007c2 <SD_SendCmd>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d80e      	bhi.n	80009cc <SD_disk_initialize+0x160>
 80009ae:	2100      	movs	r1, #0
 80009b0:	2069      	movs	r0, #105	@ 0x69
 80009b2:	f7ff ff06 	bl	80007c2 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d107      	bne.n	80009cc <SD_disk_initialize+0x160>
 80009bc:	e00c      	b.n	80009d8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009be:	2100      	movs	r1, #0
 80009c0:	2041      	movs	r0, #65	@ 0x41
 80009c2:	f7ff fefe 	bl	80007c2 <SD_SendCmd>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e2      	bne.n	800099a <SD_disk_initialize+0x12e>
 80009d4:	e000      	b.n	80009d8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d007      	beq.n	80009f0 <SD_disk_initialize+0x184>
 80009e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e4:	2050      	movs	r0, #80	@ 0x50
 80009e6:	f7ff feec 	bl	80007c2 <SD_SendCmd>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SD_disk_initialize+0x188>
 80009f0:	2300      	movs	r3, #0
 80009f2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <SD_disk_initialize+0x1c8>)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009fa:	f7ff fd91 	bl	8000520 <DESELECT>
	SPI_RxByte();
 80009fe:	f7ff fdd1 	bl	80005a4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e001      	b.n	8000a1e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a1a:	f7ff fe49 	bl	80006b0 <SD_PowerOff>
	}

	return Stat;
 8000a1e:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20017698 	.word	0x20017698
 8000a34:	2001769c 	.word	0x2001769c

08000a38 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SD_disk_status+0x14>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e002      	b.n	8000a52 <SD_disk_status+0x1a>
	return Stat;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <SD_disk_status+0x28>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000000 	.word	0x20000000

08000a64 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4603      	mov	r3, r0
 8000a72:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <SD_disk_read+0x1c>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <SD_disk_read+0x20>
 8000a80:	2304      	movs	r3, #4
 8000a82:	e051      	b.n	8000b28 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <SD_disk_read+0xcc>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SD_disk_read+0x32>
 8000a92:	2303      	movs	r3, #3
 8000a94:	e048      	b.n	8000b28 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a96:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <SD_disk_read+0xd0>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <SD_disk_read+0x44>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	607b      	str	r3, [r7, #4]

	SELECT();
 8000aa8:	f7ff fd2c 	bl	8000504 <SELECT>

	if (count == 1)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d111      	bne.n	8000ad6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2051      	movs	r0, #81	@ 0x51
 8000ab6:	f7ff fe84 	bl	80007c2 <SD_SendCmd>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d129      	bne.n	8000b14 <SD_disk_read+0xb0>
 8000ac0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac4:	68b8      	ldr	r0, [r7, #8]
 8000ac6:	f7ff fe0b 	bl	80006e0 <SD_RxDataBlock>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d021      	beq.n	8000b14 <SD_disk_read+0xb0>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	e01e      	b.n	8000b14 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2052      	movs	r0, #82	@ 0x52
 8000ada:	f7ff fe72 	bl	80007c2 <SD_SendCmd>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d117      	bne.n	8000b14 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f7ff fdf9 	bl	80006e0 <SD_RxDataBlock>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00a      	beq.n	8000b0a <SD_disk_read+0xa6>
				buff += 512;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000afa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1ed      	bne.n	8000ae4 <SD_disk_read+0x80>
 8000b08:	e000      	b.n	8000b0c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b0a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	204c      	movs	r0, #76	@ 0x4c
 8000b10:	f7ff fe57 	bl	80007c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b14:	f7ff fd04 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000b18:	f7ff fd44 	bl	80005a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	2001769c 	.word	0x2001769c

08000b38 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <SD_disk_write+0x1c>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <SD_disk_write+0x20>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e06b      	b.n	8000c30 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b58:	4b37      	ldr	r3, [pc, #220]	@ (8000c38 <SD_disk_write+0x100>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SD_disk_write+0x32>
 8000b66:	2303      	movs	r3, #3
 8000b68:	e062      	b.n	8000c30 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <SD_disk_write+0x100>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SD_disk_write+0x44>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e059      	b.n	8000c30 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <SD_disk_write+0x104>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <SD_disk_write+0x56>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	025b      	lsls	r3, r3, #9
 8000b8c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b8e:	f7ff fcb9 	bl	8000504 <SELECT>

	if (count == 1)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d110      	bne.n	8000bba <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	2058      	movs	r0, #88	@ 0x58
 8000b9c:	f7ff fe11 	bl	80007c2 <SD_SendCmd>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d13a      	bne.n	8000c1c <SD_disk_write+0xe4>
 8000ba6:	21fe      	movs	r1, #254	@ 0xfe
 8000ba8:	68b8      	ldr	r0, [r7, #8]
 8000baa:	f7ff fdc7 	bl	800073c <SD_TxDataBlock>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d033      	beq.n	8000c1c <SD_disk_write+0xe4>
			count = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	e030      	b.n	8000c1c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bba:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <SD_disk_write+0x104>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2077      	movs	r0, #119	@ 0x77
 8000bca:	f7ff fdfa 	bl	80007c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	2057      	movs	r0, #87	@ 0x57
 8000bd2:	f7ff fdf6 	bl	80007c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2059      	movs	r0, #89	@ 0x59
 8000bda:	f7ff fdf2 	bl	80007c2 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11b      	bne.n	8000c1c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000be4:	21fc      	movs	r1, #252	@ 0xfc
 8000be6:	68b8      	ldr	r0, [r7, #8]
 8000be8:	f7ff fda8 	bl	800073c <SD_TxDataBlock>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00a      	beq.n	8000c08 <SD_disk_write+0xd0>
				buff += 512;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bf8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1ee      	bne.n	8000be4 <SD_disk_write+0xac>
 8000c06:	e000      	b.n	8000c0a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c08:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c0a:	21fd      	movs	r1, #253	@ 0xfd
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fd95 	bl	800073c <SD_TxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <SD_disk_write+0xe4>
			{
				count = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c1c:	f7ff fc80 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000c20:	f7ff fcc0 	bl	80005a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf14      	ite	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	2300      	moveq	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	2001769c 	.word	0x2001769c

08000c40 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08b      	sub	sp, #44	@ 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	603a      	str	r2, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SD_disk_ioctl+0x1e>
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	e113      	b.n	8000e86 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b05      	cmp	r3, #5
 8000c68:	d124      	bne.n	8000cb4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d012      	beq.n	8000c98 <SD_disk_ioctl+0x58>
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dc1a      	bgt.n	8000cac <SD_disk_ioctl+0x6c>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <SD_disk_ioctl+0x40>
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d006      	beq.n	8000c8c <SD_disk_ioctl+0x4c>
 8000c7e:	e015      	b.n	8000cac <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c80:	f7ff fd16 	bl	80006b0 <SD_PowerOff>
			res = RES_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c8a:	e0fa      	b.n	8000e82 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c8c:	f7ff fcce 	bl	800062c <SD_PowerOn>
			res = RES_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c96:	e0f4      	b.n	8000e82 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	1c5c      	adds	r4, r3, #1
 8000c9c:	f7ff fd14 	bl	80006c8 <SD_CheckPower>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000caa:	e0ea      	b.n	8000e82 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000cac:	2304      	movs	r3, #4
 8000cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cb2:	e0e6      	b.n	8000e82 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cb4:	4b76      	ldr	r3, [pc, #472]	@ (8000e90 <SD_disk_ioctl+0x250>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SD_disk_ioctl+0x86>
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e0df      	b.n	8000e86 <SD_disk_ioctl+0x246>

		SELECT();
 8000cc6:	f7ff fc1d 	bl	8000504 <SELECT>

		switch (ctrl)
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	2b0d      	cmp	r3, #13
 8000cce:	f200 80c9 	bhi.w	8000e64 <SD_disk_ioctl+0x224>
 8000cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd8 <SD_disk_ioctl+0x98>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000dcf 	.word	0x08000dcf
 8000cdc:	08000d11 	.word	0x08000d11
 8000ce0:	08000dbf 	.word	0x08000dbf
 8000ce4:	08000e65 	.word	0x08000e65
 8000ce8:	08000e65 	.word	0x08000e65
 8000cec:	08000e65 	.word	0x08000e65
 8000cf0:	08000e65 	.word	0x08000e65
 8000cf4:	08000e65 	.word	0x08000e65
 8000cf8:	08000e65 	.word	0x08000e65
 8000cfc:	08000e65 	.word	0x08000e65
 8000d00:	08000e65 	.word	0x08000e65
 8000d04:	08000de1 	.word	0x08000de1
 8000d08:	08000e05 	.word	0x08000e05
 8000d0c:	08000e29 	.word	0x08000e29
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d10:	2100      	movs	r1, #0
 8000d12:	2049      	movs	r0, #73	@ 0x49
 8000d14:	f7ff fd55 	bl	80007c2 <SD_SendCmd>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 80a6 	bne.w	8000e6c <SD_disk_ioctl+0x22c>
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2110      	movs	r1, #16
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcda 	bl	80006e0 <SD_RxDataBlock>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 809c 	beq.w	8000e6c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d34:	7b3b      	ldrb	r3, [r7, #12]
 8000d36:	099b      	lsrs	r3, r3, #6
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10d      	bne.n	8000d5a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	461a      	mov	r2, r3
 8000d42:	7d3b      	ldrb	r3, [r7, #20]
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d50:	8bfb      	ldrh	r3, [r7, #30]
 8000d52:	029a      	lsls	r2, r3, #10
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e02d      	b.n	8000db6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d5a:	7c7b      	ldrb	r3, [r7, #17]
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	7dbb      	ldrb	r3, [r7, #22]
 8000d64:	09db      	lsrs	r3, r3, #7
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	7d7b      	ldrb	r3, [r7, #21]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0306 	and.w	r3, r3, #6
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d82:	7d3b      	ldrb	r3, [r7, #20]
 8000d84:	099b      	lsrs	r3, r3, #6
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	7cbb      	ldrb	r3, [r7, #18]
 8000d96:	029b      	lsls	r3, r3, #10
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000da8:	8bfa      	ldrh	r2, [r7, #30]
 8000daa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dae:	3b09      	subs	r3, #9
 8000db0:	409a      	lsls	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000dbc:	e056      	b.n	8000e6c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dcc:	e055      	b.n	8000e7a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dce:	f7ff fc13 	bl	80005f8 <SD_ReadyWait>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2bff      	cmp	r3, #255	@ 0xff
 8000dd6:	d14b      	bne.n	8000e70 <SD_disk_ioctl+0x230>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dde:	e047      	b.n	8000e70 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000de0:	2100      	movs	r1, #0
 8000de2:	2049      	movs	r0, #73	@ 0x49
 8000de4:	f7ff fced 	bl	80007c2 <SD_SendCmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d142      	bne.n	8000e74 <SD_disk_ioctl+0x234>
 8000dee:	2110      	movs	r1, #16
 8000df0:	6a38      	ldr	r0, [r7, #32]
 8000df2:	f7ff fc75 	bl	80006e0 <SD_RxDataBlock>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d03b      	beq.n	8000e74 <SD_disk_ioctl+0x234>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e02:	e037      	b.n	8000e74 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e04:	2100      	movs	r1, #0
 8000e06:	204a      	movs	r0, #74	@ 0x4a
 8000e08:	f7ff fcdb 	bl	80007c2 <SD_SendCmd>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d132      	bne.n	8000e78 <SD_disk_ioctl+0x238>
 8000e12:	2110      	movs	r1, #16
 8000e14:	6a38      	ldr	r0, [r7, #32]
 8000e16:	f7ff fc63 	bl	80006e0 <SD_RxDataBlock>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02b      	beq.n	8000e78 <SD_disk_ioctl+0x238>
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e26:	e027      	b.n	8000e78 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	207a      	movs	r0, #122	@ 0x7a
 8000e2c:	f7ff fcc9 	bl	80007c2 <SD_SendCmd>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d116      	bne.n	8000e64 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e3c:	e00b      	b.n	8000e56 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e3e:	6a3c      	ldr	r4, [r7, #32]
 8000e40:	1c63      	adds	r3, r4, #1
 8000e42:	623b      	str	r3, [r7, #32]
 8000e44:	f7ff fbae 	bl	80005a4 <SPI_RxByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e50:	3301      	adds	r3, #1
 8000e52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d9ef      	bls.n	8000e3e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e64:	2304      	movs	r3, #4
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e6a:	e006      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e6c:	bf00      	nop
 8000e6e:	e004      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e70:	bf00      	nop
 8000e72:	e002      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e78:	bf00      	nop
		}

		DESELECT();
 8000e7a:	f7ff fb51 	bl	8000520 <DESELECT>
		SPI_RxByte();
 8000e7e:	f7ff fb91 	bl	80005a4 <SPI_RxByte>
	}

	return res;
 8000e82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	372c      	adds	r7, #44	@ 0x2c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000

08000e94 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4878      	ldr	r0, [pc, #480]	@ (8001080 <LCD_Init+0x1ec>)
 8000e9e:	f002 f95f 	bl	8003160 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2113      	movs	r1, #19
 8000ea6:	4877      	ldr	r0, [pc, #476]	@ (8001084 <LCD_Init+0x1f0>)
 8000ea8:	f002 f95a 	bl	8003160 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4875      	ldr	r0, [pc, #468]	@ (8001088 <LCD_Init+0x1f4>)
 8000eb2:	f002 f955 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f001 fdea 	bl	8002a90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4871      	ldr	r0, [pc, #452]	@ (8001088 <LCD_Init+0x1f4>)
 8000ec2:	f002 f94d 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ec6:	2014      	movs	r0, #20
 8000ec8:	f001 fde2 	bl	8002a90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2102      	movs	r1, #2
 8000ed0:	486d      	ldr	r0, [pc, #436]	@ (8001088 <LCD_Init+0x1f4>)
 8000ed2:	f002 f945 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000ed6:	2096      	movs	r0, #150	@ 0x96
 8000ed8:	f001 fdda 	bl	8002a90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4867      	ldr	r0, [pc, #412]	@ (8001080 <LCD_Init+0x1ec>)
 8000ee2:	f002 f93d 	bl	8003160 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000ee6:	20e9      	movs	r0, #233	@ 0xe9
 8000ee8:	f000 f8d0 	bl	800108c <LCD_CMD>
	LCD_DATA(0x20);
 8000eec:	2020      	movs	r0, #32
 8000eee:	f000 f973 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000ef2:	2011      	movs	r0, #17
 8000ef4:	f000 f8ca 	bl	800108c <LCD_CMD>
	HAL_Delay(100);
 8000ef8:	2064      	movs	r0, #100	@ 0x64
 8000efa:	f001 fdc9 	bl	8002a90 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 8000efe:	20d1      	movs	r0, #209	@ 0xd1
 8000f00:	f000 f8c4 	bl	800108c <LCD_CMD>
	LCD_DATA(0x00);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 f967 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x71);
 8000f0a:	2071      	movs	r0, #113	@ 0x71
 8000f0c:	f000 f964 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x19);
 8000f10:	2019      	movs	r0, #25
 8000f12:	f000 f961 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000f16:	20d0      	movs	r0, #208	@ 0xd0
 8000f18:	f000 f8b8 	bl	800108c <LCD_CMD>
	LCD_DATA(0x07);
 8000f1c:	2007      	movs	r0, #7
 8000f1e:	f000 f95b 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 f958 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x08);
 8000f28:	2008      	movs	r0, #8
 8000f2a:	f000 f955 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 8000f2e:	2036      	movs	r0, #54	@ 0x36
 8000f30:	f000 f8ac 	bl	800108c <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000f34:	20e8      	movs	r0, #232	@ 0xe8
 8000f36:	f000 f94f 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8000f3a:	203a      	movs	r0, #58	@ 0x3a
 8000f3c:	f000 f8a6 	bl	800108c <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8000f40:	2005      	movs	r0, #5
 8000f42:	f000 f949 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8000f46:	20c1      	movs	r0, #193	@ 0xc1
 8000f48:	f000 f8a0 	bl	800108c <LCD_CMD>
	LCD_DATA(0x10);
 8000f4c:	2010      	movs	r0, #16
 8000f4e:	f000 f943 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x10);
 8000f52:	2010      	movs	r0, #16
 8000f54:	f000 f940 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f000 f93d 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f000 f93a 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000f64:	20c0      	movs	r0, #192	@ 0xc0
 8000f66:	f000 f891 	bl	800108c <LCD_CMD>
	LCD_DATA(0x00);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f934 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x35);
 8000f70:	2035      	movs	r0, #53	@ 0x35
 8000f72:	f000 f931 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f92e 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f92b 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 f928 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x02);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f000 f925 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000f8e:	20c5      	movs	r0, #197	@ 0xc5
 8000f90:	f000 f87c 	bl	800108c <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000f94:	2004      	movs	r0, #4
 8000f96:	f000 f91f 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000f9a:	20d2      	movs	r0, #210	@ 0xd2
 8000f9c:	f000 f876 	bl	800108c <LCD_CMD>
	LCD_DATA(0x01);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 f919 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x44);
 8000fa6:	2044      	movs	r0, #68	@ 0x44
 8000fa8:	f000 f916 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000fac:	20c8      	movs	r0, #200	@ 0xc8
 8000fae:	f000 f86d 	bl	800108c <LCD_CMD>
	LCD_DATA(0x04);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f000 f910 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x67);
 8000fb8:	2067      	movs	r0, #103	@ 0x67
 8000fba:	f000 f90d 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x35);
 8000fbe:	2035      	movs	r0, #53	@ 0x35
 8000fc0:	f000 f90a 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x04);
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f000 f907 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x08);
 8000fca:	2008      	movs	r0, #8
 8000fcc:	f000 f904 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x06);
 8000fd0:	2006      	movs	r0, #6
 8000fd2:	f000 f901 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x24);
 8000fd6:	2024      	movs	r0, #36	@ 0x24
 8000fd8:	f000 f8fe 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f000 f8fb 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x37);
 8000fe2:	2037      	movs	r0, #55	@ 0x37
 8000fe4:	f000 f8f8 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x40);
 8000fe8:	2040      	movs	r0, #64	@ 0x40
 8000fea:	f000 f8f5 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x03);
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f000 f8f2 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x10);
 8000ff4:	2010      	movs	r0, #16
 8000ff6:	f000 f8ef 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x08);
 8000ffa:	2008      	movs	r0, #8
 8000ffc:	f000 f8ec 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x80);
 8001000:	2080      	movs	r0, #128	@ 0x80
 8001002:	f000 f8e9 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f8e6 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 800100c:	202a      	movs	r0, #42	@ 0x2a
 800100e:	f000 f83d 	bl	800108c <LCD_CMD>
	LCD_DATA(0x00);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f8e0 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f8dd 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 f8da 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x3F);
 8001024:	203f      	movs	r0, #63	@ 0x3f
 8001026:	f000 f8d7 	bl	80011d8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800102a:	202b      	movs	r0, #43	@ 0x2b
 800102c:	f000 f82e 	bl	800108c <LCD_CMD>
	LCD_DATA(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f000 f8d1 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x00);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f8ce 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0x01);
 800103c:	2001      	movs	r0, #1
 800103e:	f000 f8cb 	bl	80011d8 <LCD_DATA>
	LCD_DATA(0xE0);
 8001042:	20e0      	movs	r0, #224	@ 0xe0
 8001044:	f000 f8c8 	bl	80011d8 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8001048:	2029      	movs	r0, #41	@ 0x29
 800104a:	f000 f81f 	bl	800108c <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800104e:	202c      	movs	r0, #44	@ 0x2c
 8001050:	f000 f81c 	bl	800108c <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8001054:	2020      	movs	r0, #32
 8001056:	f000 f819 	bl	800108c <LCD_CMD>
	HAL_Delay(120);
 800105a:	2078      	movs	r0, #120	@ 0x78
 800105c:	f001 fd18 	bl	8002a90 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8001060:	2011      	movs	r0, #17
 8001062:	f000 f813 	bl	800108c <LCD_CMD>
	HAL_Delay(120);
 8001066:	2078      	movs	r0, #120	@ 0x78
 8001068:	f001 fd12 	bl	8002a90 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 800106c:	2029      	movs	r0, #41	@ 0x29
 800106e:	f000 f80d 	bl	800108c <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2101      	movs	r1, #1
 8001076:	4802      	ldr	r0, [pc, #8]	@ (8001080 <LCD_Init+0x1ec>)
 8001078:	f002 f872 	bl	8003160 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020400 	.word	0x40020400
 8001084:	40020000 	.word	0x40020000
 8001088:	40020800 	.word	0x40020800

0800108c <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2110      	movs	r1, #16
 800109a:	484c      	ldr	r0, [pc, #304]	@ (80011cc <LCD_CMD+0x140>)
 800109c:	f002 f860 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2102      	movs	r1, #2
 80010a4:	4849      	ldr	r0, [pc, #292]	@ (80011cc <LCD_CMD+0x140>)
 80010a6:	f002 f85b 	bl	8003160 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ba:	4844      	ldr	r0, [pc, #272]	@ (80011cc <LCD_CMD+0x140>)
 80010bc:	f002 f850 	bl	8003160 <HAL_GPIO_WritePin>
 80010c0:	e005      	b.n	80010ce <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010c8:	4840      	ldr	r0, [pc, #256]	@ (80011cc <LCD_CMD+0x140>)
 80010ca:	f002 f849 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	483c      	ldr	r0, [pc, #240]	@ (80011d0 <LCD_CMD+0x144>)
 80010de:	f002 f83f 	bl	8003160 <HAL_GPIO_WritePin>
 80010e2:	e004      	b.n	80010ee <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2180      	movs	r1, #128	@ 0x80
 80010e8:	4839      	ldr	r0, [pc, #228]	@ (80011d0 <LCD_CMD+0x144>)
 80010ea:	f002 f839 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010fe:	4833      	ldr	r0, [pc, #204]	@ (80011cc <LCD_CMD+0x140>)
 8001100:	f002 f82e 	bl	8003160 <HAL_GPIO_WritePin>
 8001104:	e005      	b.n	8001112 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800110c:	482f      	ldr	r0, [pc, #188]	@ (80011cc <LCD_CMD+0x140>)
 800110e:	f002 f827 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2108      	movs	r1, #8
 8001120:	482c      	ldr	r0, [pc, #176]	@ (80011d4 <LCD_CMD+0x148>)
 8001122:	f002 f81d 	bl	8003160 <HAL_GPIO_WritePin>
 8001126:	e004      	b.n	8001132 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2108      	movs	r1, #8
 800112c:	4829      	ldr	r0, [pc, #164]	@ (80011d4 <LCD_CMD+0x148>)
 800112e:	f002 f817 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2120      	movs	r1, #32
 8001140:	4824      	ldr	r0, [pc, #144]	@ (80011d4 <LCD_CMD+0x148>)
 8001142:	f002 f80d 	bl	8003160 <HAL_GPIO_WritePin>
 8001146:	e004      	b.n	8001152 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2120      	movs	r1, #32
 800114c:	4821      	ldr	r0, [pc, #132]	@ (80011d4 <LCD_CMD+0x148>)
 800114e:	f002 f807 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	481c      	ldr	r0, [pc, #112]	@ (80011d4 <LCD_CMD+0x148>)
 8001162:	f001 fffd 	bl	8003160 <HAL_GPIO_WritePin>
 8001166:	e004      	b.n	8001172 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2110      	movs	r1, #16
 800116c:	4819      	ldr	r0, [pc, #100]	@ (80011d4 <LCD_CMD+0x148>)
 800116e:	f001 fff7 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001182:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <LCD_CMD+0x148>)
 8001184:	f001 ffec 	bl	8003160 <HAL_GPIO_WritePin>
 8001188:	e005      	b.n	8001196 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001190:	4810      	ldr	r0, [pc, #64]	@ (80011d4 <LCD_CMD+0x148>)
 8001192:	f001 ffe5 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	da06      	bge.n	80011ac <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <LCD_CMD+0x140>)
 80011a6:	f001 ffdb 	bl	8003160 <HAL_GPIO_WritePin>
 80011aa:	e005      	b.n	80011b8 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <LCD_CMD+0x140>)
 80011b4:	f001 ffd4 	bl	8003160 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2102      	movs	r1, #2
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <LCD_CMD+0x140>)
 80011be:	f001 ffcf 	bl	8003160 <HAL_GPIO_WritePin>

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020400 	.word	0x40020400

080011d8 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2110      	movs	r1, #16
 80011e6:	484c      	ldr	r0, [pc, #304]	@ (8001318 <LCD_DATA+0x140>)
 80011e8:	f001 ffba 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	4849      	ldr	r0, [pc, #292]	@ (8001318 <LCD_DATA+0x140>)
 80011f2:	f001 ffb5 	bl	8003160 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001206:	4844      	ldr	r0, [pc, #272]	@ (8001318 <LCD_DATA+0x140>)
 8001208:	f001 ffaa 	bl	8003160 <HAL_GPIO_WritePin>
 800120c:	e005      	b.n	800121a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001214:	4840      	ldr	r0, [pc, #256]	@ (8001318 <LCD_DATA+0x140>)
 8001216:	f001 ffa3 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	483c      	ldr	r0, [pc, #240]	@ (800131c <LCD_DATA+0x144>)
 800122a:	f001 ff99 	bl	8003160 <HAL_GPIO_WritePin>
 800122e:	e004      	b.n	800123a <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2180      	movs	r1, #128	@ 0x80
 8001234:	4839      	ldr	r0, [pc, #228]	@ (800131c <LCD_DATA+0x144>)
 8001236:	f001 ff93 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800124a:	4833      	ldr	r0, [pc, #204]	@ (8001318 <LCD_DATA+0x140>)
 800124c:	f001 ff88 	bl	8003160 <HAL_GPIO_WritePin>
 8001250:	e005      	b.n	800125e <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001258:	482f      	ldr	r0, [pc, #188]	@ (8001318 <LCD_DATA+0x140>)
 800125a:	f001 ff81 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	2108      	movs	r1, #8
 800126c:	482c      	ldr	r0, [pc, #176]	@ (8001320 <LCD_DATA+0x148>)
 800126e:	f001 ff77 	bl	8003160 <HAL_GPIO_WritePin>
 8001272:	e004      	b.n	800127e <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2108      	movs	r1, #8
 8001278:	4829      	ldr	r0, [pc, #164]	@ (8001320 <LCD_DATA+0x148>)
 800127a:	f001 ff71 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2120      	movs	r1, #32
 800128c:	4824      	ldr	r0, [pc, #144]	@ (8001320 <LCD_DATA+0x148>)
 800128e:	f001 ff67 	bl	8003160 <HAL_GPIO_WritePin>
 8001292:	e004      	b.n	800129e <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2120      	movs	r1, #32
 8001298:	4821      	ldr	r0, [pc, #132]	@ (8001320 <LCD_DATA+0x148>)
 800129a:	f001 ff61 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2110      	movs	r1, #16
 80012ac:	481c      	ldr	r0, [pc, #112]	@ (8001320 <LCD_DATA+0x148>)
 80012ae:	f001 ff57 	bl	8003160 <HAL_GPIO_WritePin>
 80012b2:	e004      	b.n	80012be <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2110      	movs	r1, #16
 80012b8:	4819      	ldr	r0, [pc, #100]	@ (8001320 <LCD_DATA+0x148>)
 80012ba:	f001 ff51 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ce:	4814      	ldr	r0, [pc, #80]	@ (8001320 <LCD_DATA+0x148>)
 80012d0:	f001 ff46 	bl	8003160 <HAL_GPIO_WritePin>
 80012d4:	e005      	b.n	80012e2 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012dc:	4810      	ldr	r0, [pc, #64]	@ (8001320 <LCD_DATA+0x148>)
 80012de:	f001 ff3f 	bl	8003160 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da06      	bge.n	80012f8 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f0:	4809      	ldr	r0, [pc, #36]	@ (8001318 <LCD_DATA+0x140>)
 80012f2:	f001 ff35 	bl	8003160 <HAL_GPIO_WritePin>
 80012f6:	e005      	b.n	8001304 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012fe:	4806      	ldr	r0, [pc, #24]	@ (8001318 <LCD_DATA+0x140>)
 8001300:	f001 ff2e 	bl	8003160 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2102      	movs	r1, #2
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <LCD_DATA+0x140>)
 800130a:	f001 ff29 	bl	8003160 <HAL_GPIO_WritePin>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000
 800131c:	40020800 	.word	0x40020800
 8001320:	40020400 	.word	0x40020400

08001324 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8001332:	202a      	movs	r0, #42	@ 0x2a
 8001334:	f7ff feaa 	bl	800108c <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff4a 	bl	80011d8 <LCD_DATA>
	LCD_DATA(x1);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff45 	bl	80011d8 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff3f 	bl	80011d8 <LCD_DATA>
	LCD_DATA(x2);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff3a 	bl	80011d8 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8001364:	202b      	movs	r0, #43	@ 0x2b
 8001366:	f7ff fe91 	bl	800108c <LCD_CMD>
	LCD_DATA(y1 >> 8);
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff31 	bl	80011d8 <LCD_DATA>
	LCD_DATA(y1);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff2c 	bl	80011d8 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff26 	bl	80011d8 <LCD_DATA>
	LCD_DATA(y2);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff21 	bl	80011d8 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8001396:	202c      	movs	r0, #44	@ 0x2c
 8001398:	f7ff fe78 	bl	800108c <LCD_CMD>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 80013ac:	202c      	movs	r0, #44	@ 0x2c
 80013ae:	f7ff fe6d 	bl	800108c <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2110      	movs	r1, #16
 80013b6:	481b      	ldr	r0, [pc, #108]	@ (8001424 <LCD_Clear+0x80>)
 80013b8:	f001 fed2 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2101      	movs	r1, #1
 80013c0:	4819      	ldr	r0, [pc, #100]	@ (8001428 <LCD_Clear+0x84>)
 80013c2:	f001 fecd 	bl	8003160 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 80013c6:	23ef      	movs	r3, #239	@ 0xef
 80013c8:	f240 123f 	movw	r2, #319	@ 0x13f
 80013cc:	2100      	movs	r1, #0
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff ffa8 	bl	8001324 <SetWindows>
	for (x = 0; x < 320; x++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e016      	b.n	8001408 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	e00d      	b.n	80013fc <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fef6 	bl	80011d8 <LCD_DATA>
			LCD_DATA(c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fef1 	bl	80011d8 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3301      	adds	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2bef      	cmp	r3, #239	@ 0xef
 8001400:	d9ee      	bls.n	80013e0 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800140e:	d3e4      	bcc.n	80013da <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2101      	movs	r1, #1
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <LCD_Clear+0x84>)
 8001416:	f001 fea3 	bl	8003160 <HAL_GPIO_WritePin>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400

0800142c <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 800143a:	202c      	movs	r0, #44	@ 0x2c
 800143c:	f7ff fe26 	bl	800108c <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2110      	movs	r1, #16
 8001444:	4824      	ldr	r0, [pc, #144]	@ (80014d8 <FillRect+0xac>)
 8001446:	f001 fe8b 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2101      	movs	r1, #1
 800144e:	4823      	ldr	r0, [pc, #140]	@ (80014dc <FillRect+0xb0>)
 8001450:	f001 fe86 	bl	8003160 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3b01      	subs	r3, #1
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f7ff ff58 	bl	8001324 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	3b01      	subs	r3, #1
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
 8001486:	e01a      	b.n	80014be <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	e010      	b.n	80014b0 <FillRect+0x84>
			LCD_DATA(c >> 8);
 800148e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe9f 	bl	80011d8 <LCD_DATA>
			LCD_DATA(c);
 800149a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fe9a 	bl	80011d8 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	3b02      	subs	r3, #2
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8ea      	bhi.n	800148e <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	3301      	adds	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d8e0      	bhi.n	8001488 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2101      	movs	r1, #1
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <FillRect+0xb0>)
 80014cc:	f001 fe48 	bl	8003160 <HAL_GPIO_WritePin>
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400

080014e0 <LCD_Sprite>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80014ee:	202c      	movs	r0, #44	@ 0x2c
 80014f0:	f7ff fdcc 	bl	800108c <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2110      	movs	r1, #16
 80014f8:	484d      	ldr	r0, [pc, #308]	@ (8001630 <LCD_Sprite+0x150>)
 80014fa:	f001 fe31 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2101      	movs	r1, #1
 8001502:	484c      	ldr	r0, [pc, #304]	@ (8001634 <LCD_Sprite+0x154>)
 8001504:	f001 fe2c 	bl	8003160 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3b01      	subs	r3, #1
 8001524:	f7ff fefe 	bl	8001324 <SetWindows>
	int k = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	613b      	str	r3, [r7, #16]
	if (flip) {
 8001536:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800153a:	2b00      	cmp	r3, #0
 800153c:	d03a      	beq.n	80015b4 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001542:	e032      	b.n	80015aa <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8001544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	fb03 f202 	mul.w	r2, r3, r2
 800154c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001568:	4413      	add	r3, r2
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001570:	e014      	b.n	800159c <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8001572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001574:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe2c 	bl	80011d8 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	3301      	adds	r3, #1
 8001584:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe24 	bl	80011d8 <LCD_DATA>
				k = k - 2;
 8001590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001592:	3b02      	subs	r3, #2
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	3301      	adds	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
 800159c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbe6      	blt.n	8001572 <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 80015a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a6:	3301      	adds	r3, #1
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dbc8      	blt.n	8001544 <LCD_Sprite+0x64>
 80015b2:	e034      	b.n	800161e <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
 80015b8:	e02d      	b.n	8001616 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	fb03 f202 	mul.w	r2, r3, r2
 80015c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80015d2:	4413      	add	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	e014      	b.n	8001608 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 80015de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fdf6 	bl	80011d8 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 80015ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ee:	3301      	adds	r3, #1
 80015f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdee 	bl	80011d8 <LCD_DATA>
				k = k + 2;
 80015fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015fe:	3302      	adds	r3, #2
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbe6      	blt.n	80015de <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	3301      	adds	r3, #1
 8001614:	623b      	str	r3, [r7, #32]
 8001616:	6a3a      	ldr	r2, [r7, #32]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	dbcd      	blt.n	80015ba <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2101      	movs	r1, #1
 8001622:	4804      	ldr	r0, [pc, #16]	@ (8001634 <LCD_Sprite+0x154>)
 8001624:	f001 fd9c 	bl	8003160 <HAL_GPIO_WritePin>
}
 8001628:	bf00      	nop
 800162a:	3730      	adds	r7, #48	@ 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b0a8      	sub	sp, #160	@ 0xa0
 800163c:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
int time = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
int time1 = -160;
 8001644:	f06f 039f 	mvn.w	r3, #159	@ 0x9f
 8001648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

int uni = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	67fb      	str	r3, [r7, #124]	@ 0x7c
int dec = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	67bb      	str	r3, [r7, #120]	@ 0x78

int b = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	677b      	str	r3, [r7, #116]	@ 0x74

int y = -30;
 8001658:	f06f 031d 	mvn.w	r3, #29
 800165c:	673b      	str	r3, [r7, #112]	@ 0x70
int y1 = 40;
 800165e:	2328      	movs	r3, #40	@ 0x28
 8001660:	66fb      	str	r3, [r7, #108]	@ 0x6c
int yp = 110;
 8001662:	236e      	movs	r3, #110	@ 0x6e
 8001664:	66bb      	str	r3, [r7, #104]	@ 0x68

int z = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	667b      	str	r3, [r7, #100]	@ 0x64
int i = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	663b      	str	r3, [r7, #96]	@ 0x60

int GO = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	65fb      	str	r3, [r7, #92]	@ 0x5c
int punt = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	65bb      	str	r3, [r7, #88]	@ 0x58

int posu[11] = {-50,-25,-10,50 ,-30,0  ,15,-50 ,10,35, -50};
 8001676:	4b56      	ldr	r3, [pc, #344]	@ (80017d0 <main+0x198>)
 8001678:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800167c:	461d      	mov	r5, r3
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800168a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
int posd[11] = {20 ,50 ,10 ,-20,10,-40,-30,-10,50,-30,50};
 800168e:	4b51      	ldr	r3, [pc, #324]	@ (80017d4 <main+0x19c>)
 8001690:	463c      	mov	r4, r7
 8001692:	461d      	mov	r5, r3
 8001694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

// Montar SD

   fres = f_mount(&fs,"/" , 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	494c      	ldr	r1, [pc, #304]	@ (80017d8 <main+0x1a0>)
 80016a8:	484c      	ldr	r0, [pc, #304]	@ (80017dc <main+0x1a4>)
 80016aa:	f006 f9cb 	bl	8007a44 <f_mount>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b4b      	ldr	r3, [pc, #300]	@ (80017e0 <main+0x1a8>)
 80016b4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b6:	f001 f979 	bl	80029ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ba:	f000 fbf5 	bl	8001ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016be:	f000 fd13 	bl	80020e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016c2:	f000 fc5d 	bl	8001f80 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80016c6:	f000 fcbb 	bl	8002040 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016ca:	f000 fce3 	bl	8002094 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80016ce:	f003 ff71 	bl	80055b4 <MX_FATFS_Init>
  MX_UART5_Init();
 80016d2:	f000 fc8b 	bl	8001fec <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, option, 1);  // EMPEZAR RECEPCIÓN
 80016d6:	2201      	movs	r2, #1
 80016d8:	4942      	ldr	r1, [pc, #264]	@ (80017e4 <main+0x1ac>)
 80016da:	4843      	ldr	r0, [pc, #268]	@ (80017e8 <main+0x1b0>)
 80016dc:	f002 ffef 	bl	80046be <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, option, 1);  // EMPEZAR RECEPCIÓN
 80016e0:	2201      	movs	r2, #1
 80016e2:	4940      	ldr	r1, [pc, #256]	@ (80017e4 <main+0x1ac>)
 80016e4:	4841      	ldr	r0, [pc, #260]	@ (80017ec <main+0x1b4>)
 80016e6:	f002 ffea 	bl	80046be <HAL_UART_Receive_IT>

	LCD_Init();
 80016ea:	f7ff fbd3 	bl	8000e94 <LCD_Init>

	LCD_Clear(0x00);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fe58 	bl	80013a4 <LCD_Clear>
	FillRect(0, 0, 319, 239, 0x0000);
 80016f4:	2300      	movs	r3, #0
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	23ef      	movs	r3, #239	@ 0xef
 80016fa:	f240 123f 	movw	r2, #319	@ 0x13f
 80016fe:	2100      	movs	r1, #0
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fe93 	bl	800142c <FillRect>

	LCD_Sprite(68, 20, 184, 50, titulo1, 1, 0, 0, 1);
 8001706:	2301      	movs	r3, #1
 8001708:	9304      	str	r3, [sp, #16]
 800170a:	2300      	movs	r3, #0
 800170c:	9303      	str	r3, [sp, #12]
 800170e:	2300      	movs	r3, #0
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2301      	movs	r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <main+0x1b8>)
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2332      	movs	r3, #50	@ 0x32
 800171c:	22b8      	movs	r2, #184	@ 0xb8
 800171e:	2114      	movs	r1, #20
 8001720:	2044      	movs	r0, #68	@ 0x44
 8001722:	f7ff fedd 	bl	80014e0 <LCD_Sprite>
	LCD_Sprite(68, 110, 184, 50, titulo2, 1, 0, 0, 1);
 8001726:	2301      	movs	r3, #1
 8001728:	9304      	str	r3, [sp, #16]
 800172a:	2300      	movs	r3, #0
 800172c:	9303      	str	r3, [sp, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	2301      	movs	r3, #1
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <main+0x1bc>)
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2332      	movs	r3, #50	@ 0x32
 800173c:	22b8      	movs	r2, #184	@ 0xb8
 800173e:	216e      	movs	r1, #110	@ 0x6e
 8001740:	2044      	movs	r0, #68	@ 0x44
 8001742:	f7ff fecd 	bl	80014e0 <LCD_Sprite>
	LCD_Sprite(100, 190, 116, 20, titulo3, 1, 0, 0, 1);
 8001746:	2301      	movs	r3, #1
 8001748:	9304      	str	r3, [sp, #16]
 800174a:	2300      	movs	r3, #0
 800174c:	9303      	str	r3, [sp, #12]
 800174e:	2300      	movs	r3, #0
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2301      	movs	r3, #1
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <main+0x1c0>)
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2314      	movs	r3, #20
 800175c:	2274      	movs	r2, #116	@ 0x74
 800175e:	21be      	movs	r1, #190	@ 0xbe
 8001760:	2064      	movs	r0, #100	@ 0x64
 8001762:	f7ff febd 	bl	80014e0 <LCD_Sprite>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// Aumentar la velocidad de las tuberías

		while(wh1 == 1){
 8001766:	e23a      	b.n	8001bde <main+0x5a6>

				LCD_Sprite(15, 30, 290, 25, cuan, 1, 0, 0, 1);
 8001768:	2301      	movs	r3, #1
 800176a:	9304      	str	r3, [sp, #16]
 800176c:	2300      	movs	r3, #0
 800176e:	9303      	str	r3, [sp, #12]
 8001770:	2300      	movs	r3, #0
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	2301      	movs	r3, #1
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <main+0x1c4>)
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2319      	movs	r3, #25
 800177e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001782:	211e      	movs	r1, #30
 8001784:	200f      	movs	r0, #15
 8001786:	f7ff feab 	bl	80014e0 <LCD_Sprite>
				LCD_Sprite(10, 110, 232, 12, p1, 1, 0, 0, 1);
 800178a:	2301      	movs	r3, #1
 800178c:	9304      	str	r3, [sp, #16]
 800178e:	2300      	movs	r3, #0
 8001790:	9303      	str	r3, [sp, #12]
 8001792:	2300      	movs	r3, #0
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	2301      	movs	r3, #1
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <main+0x1c8>)
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	230c      	movs	r3, #12
 80017a0:	22e8      	movs	r2, #232	@ 0xe8
 80017a2:	216e      	movs	r1, #110	@ 0x6e
 80017a4:	200a      	movs	r0, #10
 80017a6:	f7ff fe9b 	bl	80014e0 <LCD_Sprite>
				LCD_Sprite(10, 160, 285, 12, p2, 1, 0, 0, 1);
 80017aa:	2301      	movs	r3, #1
 80017ac:	9304      	str	r3, [sp, #16]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9303      	str	r3, [sp, #12]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	2301      	movs	r3, #1
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <main+0x1cc>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	230c      	movs	r3, #12
 80017c0:	f240 121d 	movw	r2, #285	@ 0x11d
 80017c4:	21a0      	movs	r1, #160	@ 0xa0
 80017c6:	200a      	movs	r0, #10
 80017c8:	f7ff fe8a 	bl	80014e0 <LCD_Sprite>

				while(wh2 == 1){
 80017cc:	e202      	b.n	8001bd4 <main+0x59c>
 80017ce:	bf00      	nop
 80017d0:	0800863c 	.word	0x0800863c
 80017d4:	08008668 	.word	0x08008668
 80017d8:	08008524 	.word	0x08008524
 80017dc:	200176f8 	.word	0x200176f8
 80017e0:	20018730 	.word	0x20018730
 80017e4:	2001880c 	.word	0x2001880c
 80017e8:	200187c4 	.word	0x200187c4
 80017ec:	20018734 	.word	0x20018734
 80017f0:	20006920 	.word	0x20006920
 80017f4:	2000b100 	.word	0x2000b100
 80017f8:	2000f8e0 	.word	0x2000f8e0
 80017fc:	2000307c 	.word	0x2000307c
 8001800:	20000004 	.word	0x20000004
 8001804:	200015c4 	.word	0x200015c4
					wh1 = 0;
 8001808:	4b9d      	ldr	r3, [pc, #628]	@ (8001a80 <main+0x448>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
					time = time + 5;  // Incremento ajustado para mayor velocidad
 800180e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001812:	3305      	adds	r3, #5
 8001814:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					time1 = time1 + 5;  // Incremento ajustado para mayor velocidad
 8001818:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800181c:	3305      	adds	r3, #5
 800181e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

					b++;
 8001822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001824:	3301      	adds	r3, #1
 8001826:	677b      	str	r3, [r7, #116]	@ 0x74

					// TUBERIA
					FillRect(330-time, 151-y, 5, 90+y, 0x07E0);
 8001828:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800182c:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 8001830:	4618      	mov	r0, r3
 8001832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001834:	f1c3 0397 	rsb	r3, r3, #151	@ 0x97
 8001838:	4619      	mov	r1, r3
 800183a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800183c:	335a      	adds	r3, #90	@ 0x5a
 800183e:	461a      	mov	r2, r3
 8001840:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	4613      	mov	r3, r2
 8001848:	2205      	movs	r2, #5
 800184a:	f7ff fdef 	bl	800142c <FillRect>
					FillRect(330-time, 161-y, 5, 5, 0x0000);
 800184e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001852:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 8001856:	4618      	mov	r0, r3
 8001858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800185a:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 800185e:	4619      	mov	r1, r3
 8001860:	2300      	movs	r3, #0
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2305      	movs	r3, #5
 8001866:	2205      	movs	r2, #5
 8001868:	f7ff fde0 	bl	800142c <FillRect>
					FillRect(365-time, 151-y, 5, 90+y, 0x0000);
 800186c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001870:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8001874:	3301      	adds	r3, #1
 8001876:	4618      	mov	r0, r3
 8001878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800187a:	f1c3 0397 	rsb	r3, r3, #151	@ 0x97
 800187e:	4619      	mov	r1, r3
 8001880:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001882:	335a      	adds	r3, #90	@ 0x5a
 8001884:	461a      	mov	r2, r3
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	2205      	movs	r2, #5
 800188e:	f7ff fdcd 	bl	800142c <FillRect>

					FillRect(330-time, 0, 5, 75-y, 0x07E0);
 8001892:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001896:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 800189a:	4618      	mov	r0, r3
 800189c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800189e:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 80018a2:	461a      	mov	r2, r3
 80018a4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	4613      	mov	r3, r2
 80018ac:	2205      	movs	r2, #5
 80018ae:	2100      	movs	r1, #0
 80018b0:	f7ff fdbc 	bl	800142c <FillRect>
					FillRect(330-time, 60-y, 5, 5, 0x0000);
 80018b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018b8:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 80018bc:	4618      	mov	r0, r3
 80018be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018c0:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80018c4:	4619      	mov	r1, r3
 80018c6:	2300      	movs	r3, #0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2305      	movs	r3, #5
 80018cc:	2205      	movs	r2, #5
 80018ce:	f7ff fdad 	bl	800142c <FillRect>
					FillRect(365-time, 0, 5, 75-y, 0x0000);
 80018d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018d6:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 80018da:	3301      	adds	r3, #1
 80018dc:	4618      	mov	r0, r3
 80018de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018e0:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 80018e4:	461a      	mov	r2, r3
 80018e6:	2300      	movs	r3, #0
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	2205      	movs	r2, #5
 80018ee:	2100      	movs	r1, #0
 80018f0:	f7ff fd9c 	bl	800142c <FillRect>


					FillRect(330-time1, 151-y1, 5, 90+y1, 0x07E0);
 80018f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018f8:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 80018fc:	4618      	mov	r0, r3
 80018fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001900:	f1c3 0397 	rsb	r3, r3, #151	@ 0x97
 8001904:	4619      	mov	r1, r3
 8001906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001908:	335a      	adds	r3, #90	@ 0x5a
 800190a:	461a      	mov	r2, r3
 800190c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4613      	mov	r3, r2
 8001914:	2205      	movs	r2, #5
 8001916:	f7ff fd89 	bl	800142c <FillRect>
					FillRect(330-time1, 161-y1, 5, 5, 0x0000);
 800191a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800191e:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 8001922:	4618      	mov	r0, r3
 8001924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001926:	f1c3 03a1 	rsb	r3, r3, #161	@ 0xa1
 800192a:	4619      	mov	r1, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2305      	movs	r3, #5
 8001932:	2205      	movs	r2, #5
 8001934:	f7ff fd7a 	bl	800142c <FillRect>
					FillRect(365-time1, 151-y1, 5, 90+y1, 0x0000);
 8001938:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800193c:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 8001940:	3301      	adds	r3, #1
 8001942:	4618      	mov	r0, r3
 8001944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001946:	f1c3 0397 	rsb	r3, r3, #151	@ 0x97
 800194a:	4619      	mov	r1, r3
 800194c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800194e:	335a      	adds	r3, #90	@ 0x5a
 8001950:	461a      	mov	r2, r3
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	4613      	mov	r3, r2
 8001958:	2205      	movs	r2, #5
 800195a:	f7ff fd67 	bl	800142c <FillRect>

					FillRect(330-time1, 0, 5, 75-y1, 0x07E0);
 800195e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001962:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 8001966:	4618      	mov	r0, r3
 8001968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800196a:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 800196e:	461a      	mov	r2, r3
 8001970:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4613      	mov	r3, r2
 8001978:	2205      	movs	r2, #5
 800197a:	2100      	movs	r1, #0
 800197c:	f7ff fd56 	bl	800142c <FillRect>
					FillRect(330-time1, 60-y1, 5, 5, 0x0000);
 8001980:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001984:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 8001988:	4618      	mov	r0, r3
 800198a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800198c:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8001990:	4619      	mov	r1, r3
 8001992:	2300      	movs	r3, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2305      	movs	r3, #5
 8001998:	2205      	movs	r2, #5
 800199a:	f7ff fd47 	bl	800142c <FillRect>
					FillRect(365-time1, 0, 5, 75-y1, 0x0000);
 800199e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019a2:	f5c3 73b6 	rsb	r3, r3, #364	@ 0x16c
 80019a6:	3301      	adds	r3, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019ac:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 80019b0:	461a      	mov	r2, r3
 80019b2:	2300      	movs	r3, #0
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	4613      	mov	r3, r2
 80019b8:	2205      	movs	r2, #5
 80019ba:	2100      	movs	r1, #0
 80019bc:	f7ff fd36 	bl	800142c <FillRect>
					// Reiniciar las tuberías cuando ya no se vean en la pantalla
					if(time >= 375){  // Ajuste del valor límite para evitar cortes
 80019c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019c4:	f5b3 7fbb 	cmp.w	r3, #374	@ 0x176
 80019c8:	dd0c      	ble.n	80019e4 <main+0x3ac>
						time = 0;  // Reiniciar de forma continua y suave
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						i++;
 80019d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d2:	3301      	adds	r3, #1
 80019d4:	663b      	str	r3, [r7, #96]	@ 0x60
					y = posu[i];
 80019d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	3388      	adds	r3, #136	@ 0x88
 80019dc:	443b      	add	r3, r7
 80019de:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80019e2:	673b      	str	r3, [r7, #112]	@ 0x70
					};

					if(time1 >= 375){  // Ajuste del valor límite para evitar cortes
 80019e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019e8:	f5b3 7fbb 	cmp.w	r3, #374	@ 0x176
 80019ec:	dd0c      	ble.n	8001a08 <main+0x3d0>
						time1 = 0;  // Reiniciar de forma continua y suave
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
						z++;
 80019f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019f6:	3301      	adds	r3, #1
 80019f8:	667b      	str	r3, [r7, #100]	@ 0x64
						y1 = posd[z];
 80019fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	3388      	adds	r3, #136	@ 0x88
 8001a00:	443b      	add	r3, r7
 8001a02:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
					};
					if(i == 10){
 8001a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	d101      	bne.n	8001a12 <main+0x3da>
						i = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	663b      	str	r3, [r7, #96]	@ 0x60
					};
					if(z == 10){
 8001a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a14:	2b0a      	cmp	r3, #10
 8001a16:	d101      	bne.n	8001a1c <main+0x3e4>
						z = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	667b      	str	r3, [r7, #100]	@ 0x64
					};
									// Control de la animación del pájaro
					if(b == 2){
 8001a1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d101      	bne.n	8001a26 <main+0x3ee>
						b = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	677b      	str	r3, [r7, #116]	@ 0x74
					};


					LCD_Sprite(75, yp, 40, 30, bird40x30, 3, b, 0, 1);
 8001a26:	2301      	movs	r3, #1
 8001a28:	9304      	str	r3, [sp, #16]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9303      	str	r3, [sp, #12]
 8001a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	2303      	movs	r3, #3
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <main+0x44c>)
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	231e      	movs	r3, #30
 8001a3c:	2228      	movs	r2, #40	@ 0x28
 8001a3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001a40:	204b      	movs	r0, #75	@ 0x4b
 8001a42:	f7ff fd4d 	bl	80014e0 <LCD_Sprite>

					yp = yp+incremento;
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <main+0x450>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001a4c:	4413      	add	r3, r2
 8001a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
										if(y_incre == 1){
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <main+0x454>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d13d      	bne.n	8001ad4 <main+0x49c>
											incremento++;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <main+0x450>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <main+0x450>)
 8001a60:	6013      	str	r3, [r2, #0]

											if (decremento == 0){
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <main+0x458>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d114      	bne.n	8001a94 <main+0x45c>
												FillRect(75, yp+30, 40, 15, 0x0000);
 8001a6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a6c:	331e      	adds	r3, #30
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	230f      	movs	r3, #15
 8001a76:	2228      	movs	r2, #40	@ 0x28
 8001a78:	204b      	movs	r0, #75	@ 0x4b
 8001a7a:	f7ff fcd7 	bl	800142c <FillRect>
 8001a7e:	e017      	b.n	8001ab0 <main+0x478>
 8001a80:	2001882c 	.word	0x2001882c
 8001a84:	20015a38 	.word	0x20015a38
 8001a88:	20018824 	.word	0x20018824
 8001a8c:	20018828 	.word	0x20018828
 8001a90:	20017658 	.word	0x20017658
											}else if (decremento == 1){
 8001a94:	4bb1      	ldr	r3, [pc, #708]	@ (8001d5c <main+0x724>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d109      	bne.n	8001ab0 <main+0x478>
												FillRect(75, yp-30, 40, 27, 0x0000);
 8001a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a9e:	3b1e      	subs	r3, #30
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	231b      	movs	r3, #27
 8001aa8:	2228      	movs	r2, #40	@ 0x28
 8001aaa:	204b      	movs	r0, #75	@ 0x4b
 8001aac:	f7ff fcbe 	bl	800142c <FillRect>
											}
											if(incremento == 0){
 8001ab0:	4bab      	ldr	r3, [pc, #684]	@ (8001d60 <main+0x728>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <main+0x486>
												decremento = 1;
 8001ab8:	4ba8      	ldr	r3, [pc, #672]	@ (8001d5c <main+0x724>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
											}
											if(yp >= 183){
 8001abe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ac0:	2bb6      	cmp	r3, #182	@ 0xb6
 8001ac2:	dd07      	ble.n	8001ad4 <main+0x49c>
												incremento = 0;
 8001ac4:	4ba6      	ldr	r3, [pc, #664]	@ (8001d60 <main+0x728>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
												y_incre = 0;
 8001aca:	4ba6      	ldr	r3, [pc, #664]	@ (8001d64 <main+0x72c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
												yp = 183;
 8001ad0:	23b7      	movs	r3, #183	@ 0xb7
 8001ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
											}
										}

					// Detectar cuando las tuberías están en la misma posición que el pájaro
					if(time == 275){
 8001ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ad8:	f240 1213 	movw	r2, #275	@ 0x113
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d105      	bne.n	8001aec <main+0x4b4>
						uni = uni + 1;
 8001ae0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
						transmit_uart3("s");
 8001ae6:	48a0      	ldr	r0, [pc, #640]	@ (8001d68 <main+0x730>)
 8001ae8:	f000 fc5c 	bl	80023a4 <transmit_uart3>
					};
					if(time1 == 275){
 8001aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001af0:	f240 1213 	movw	r2, #275	@ 0x113
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d102      	bne.n	8001afe <main+0x4c6>
						uni = uni + 1;
 8001af8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001afa:	3301      	adds	r3, #1
 8001afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
					};
					if(uni == 10){
 8001afe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b00:	2b0a      	cmp	r3, #10
 8001b02:	d104      	bne.n	8001b0e <main+0x4d6>
						uni = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
						dec = dec + 1;
 8001b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	67bb      	str	r3, [r7, #120]	@ 0x78
					};
					LCD_Sprite(276, 0, 26, 39, num26x39, 10, uni, 0, 1);
 8001b0e:	2301      	movs	r3, #1
 8001b10:	9304      	str	r3, [sp, #16]
 8001b12:	2300      	movs	r3, #0
 8001b14:	9303      	str	r3, [sp, #12]
 8001b16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b18:	9302      	str	r3, [sp, #8]
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	4b93      	ldr	r3, [pc, #588]	@ (8001d6c <main+0x734>)
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2327      	movs	r3, #39	@ 0x27
 8001b24:	221a      	movs	r2, #26
 8001b26:	2100      	movs	r1, #0
 8001b28:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8001b2c:	f7ff fcd8 	bl	80014e0 <LCD_Sprite>
					LCD_Sprite(250, 0, 26, 39, num26x39, 10, dec, 0, 1);
 8001b30:	2301      	movs	r3, #1
 8001b32:	9304      	str	r3, [sp, #16]
 8001b34:	2300      	movs	r3, #0
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	230a      	movs	r3, #10
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	4b8a      	ldr	r3, [pc, #552]	@ (8001d6c <main+0x734>)
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2327      	movs	r3, #39	@ 0x27
 8001b46:	221a      	movs	r2, #26
 8001b48:	2100      	movs	r1, #0
 8001b4a:	20fa      	movs	r0, #250	@ 0xfa
 8001b4c:	f7ff fcc8 	bl	80014e0 <LCD_Sprite>

					if(time <= 245 && time >= 215 ){
 8001b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b54:	2bf5      	cmp	r3, #245	@ 0xf5
 8001b56:	dc1c      	bgt.n	8001b92 <main+0x55a>
 8001b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b5c:	2bd6      	cmp	r3, #214	@ 0xd6
 8001b5e:	dd18      	ble.n	8001b92 <main+0x55a>
						if(yp <= (60-y) || yp >= (170+y)){
 8001b60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b62:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8001b66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dd04      	ble.n	8001b76 <main+0x53e>
 8001b6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b6e:	33a9      	adds	r3, #169	@ 0xa9
 8001b70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dd0d      	ble.n	8001b92 <main+0x55a>

							GO = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
							punt = uni + dec*10;
 8001b7a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	461a      	mov	r2, r3
 8001b86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b88:	4413      	add	r3, r2
 8001b8a:	65bb      	str	r3, [r7, #88]	@ 0x58


							wh2 = 0;
 8001b8c:	4b78      	ldr	r3, [pc, #480]	@ (8001d70 <main+0x738>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
						};
					};
					if(time1 <= 245 && time1 >= 215 ){
 8001b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b96:	2bf5      	cmp	r3, #245	@ 0xf5
 8001b98:	dc1c      	bgt.n	8001bd4 <main+0x59c>
 8001b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b9e:	2bd6      	cmp	r3, #214	@ 0xd6
 8001ba0:	dd18      	ble.n	8001bd4 <main+0x59c>
						if(yp <= (60-y1) || yp >= (170+y1)){
 8001ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ba4:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8001ba8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dd04      	ble.n	8001bb8 <main+0x580>
 8001bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bb0:	33a9      	adds	r3, #169	@ 0xa9
 8001bb2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dd0d      	ble.n	8001bd4 <main+0x59c>

							punt = uni + dec*10;
 8001bb8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bc6:	4413      	add	r3, r2
 8001bc8:	65bb      	str	r3, [r7, #88]	@ 0x58
							GO = 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
							wh2 = 0;
 8001bce:	4b68      	ldr	r3, [pc, #416]	@ (8001d70 <main+0x738>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
				while(wh2 == 1){
 8001bd4:	4b66      	ldr	r3, [pc, #408]	@ (8001d70 <main+0x738>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	f43f ae15 	beq.w	8001808 <main+0x1d0>
		while(wh1 == 1){
 8001bde:	4b65      	ldr	r3, [pc, #404]	@ (8001d74 <main+0x73c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	f43f adc0 	beq.w	8001768 <main+0x130>
						};
					};
				}
		}
		if(GO == 1){
 8001be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	f040 810f 	bne.w	8001e0e <main+0x7d6>
			FillRect(0, 0, 319, 239, 0x0000);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	23ef      	movs	r3, #239	@ 0xef
 8001bf6:	f240 123f 	movw	r2, #319	@ 0x13f
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fc15 	bl	800142c <FillRect>
			switch (punt) {
 8001c02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c04:	2b1e      	cmp	r3, #30
 8001c06:	f200 80ff 	bhi.w	8001e08 <main+0x7d0>
 8001c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c10 <main+0x5d8>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001c8d 	.word	0x08001c8d
 8001c14:	08001c95 	.word	0x08001c95
 8001c18:	08001c9d 	.word	0x08001c9d
 8001c1c:	08001ca5 	.word	0x08001ca5
 8001c20:	08001cad 	.word	0x08001cad
 8001c24:	08001cb5 	.word	0x08001cb5
 8001c28:	08001cbd 	.word	0x08001cbd
 8001c2c:	08001cc5 	.word	0x08001cc5
 8001c30:	08001ccd 	.word	0x08001ccd
 8001c34:	08001cd5 	.word	0x08001cd5
 8001c38:	08001cdd 	.word	0x08001cdd
 8001c3c:	08001ce5 	.word	0x08001ce5
 8001c40:	08001ced 	.word	0x08001ced
 8001c44:	08001cf5 	.word	0x08001cf5
 8001c48:	08001cfd 	.word	0x08001cfd
 8001c4c:	08001d05 	.word	0x08001d05
 8001c50:	08001d0d 	.word	0x08001d0d
 8001c54:	08001d15 	.word	0x08001d15
 8001c58:	08001d1d 	.word	0x08001d1d
 8001c5c:	08001d25 	.word	0x08001d25
 8001c60:	08001d2d 	.word	0x08001d2d
 8001c64:	08001d35 	.word	0x08001d35
 8001c68:	08001d3d 	.word	0x08001d3d
 8001c6c:	08001d45 	.word	0x08001d45
 8001c70:	08001d4d 	.word	0x08001d4d
 8001c74:	08001d55 	.word	0x08001d55
 8001c78:	08001de1 	.word	0x08001de1
 8001c7c:	08001de9 	.word	0x08001de9
 8001c80:	08001df1 	.word	0x08001df1
 8001c84:	08001df9 	.word	0x08001df9
 8001c88:	08001e01 	.word	0x08001e01
										        case 0:
										            transmit_uart3("M: 0");
 8001c8c:	483a      	ldr	r0, [pc, #232]	@ (8001d78 <main+0x740>)
 8001c8e:	f000 fb89 	bl	80023a4 <transmit_uart3>
										            break;
 8001c92:	e0ba      	b.n	8001e0a <main+0x7d2>
										        case 1:
										            transmit_uart3("M: 1");
 8001c94:	4839      	ldr	r0, [pc, #228]	@ (8001d7c <main+0x744>)
 8001c96:	f000 fb85 	bl	80023a4 <transmit_uart3>
										            break;
 8001c9a:	e0b6      	b.n	8001e0a <main+0x7d2>
										        case 2:
										            transmit_uart3("M: 2");
 8001c9c:	4838      	ldr	r0, [pc, #224]	@ (8001d80 <main+0x748>)
 8001c9e:	f000 fb81 	bl	80023a4 <transmit_uart3>
										            break;
 8001ca2:	e0b2      	b.n	8001e0a <main+0x7d2>
										        case 3:
										            transmit_uart3("M: 3");
 8001ca4:	4837      	ldr	r0, [pc, #220]	@ (8001d84 <main+0x74c>)
 8001ca6:	f000 fb7d 	bl	80023a4 <transmit_uart3>
										            break;
 8001caa:	e0ae      	b.n	8001e0a <main+0x7d2>
										        case 4:
										            transmit_uart3("M: 4");
 8001cac:	4836      	ldr	r0, [pc, #216]	@ (8001d88 <main+0x750>)
 8001cae:	f000 fb79 	bl	80023a4 <transmit_uart3>
										            break;
 8001cb2:	e0aa      	b.n	8001e0a <main+0x7d2>
										        case 5:
										            transmit_uart3("M: 5");
 8001cb4:	4835      	ldr	r0, [pc, #212]	@ (8001d8c <main+0x754>)
 8001cb6:	f000 fb75 	bl	80023a4 <transmit_uart3>
										            break;
 8001cba:	e0a6      	b.n	8001e0a <main+0x7d2>
										        case 6:
										            transmit_uart3("M: 6");
 8001cbc:	4834      	ldr	r0, [pc, #208]	@ (8001d90 <main+0x758>)
 8001cbe:	f000 fb71 	bl	80023a4 <transmit_uart3>
										            break;
 8001cc2:	e0a2      	b.n	8001e0a <main+0x7d2>
										        case 7:
										            transmit_uart3("M: 7");
 8001cc4:	4833      	ldr	r0, [pc, #204]	@ (8001d94 <main+0x75c>)
 8001cc6:	f000 fb6d 	bl	80023a4 <transmit_uart3>
										            break;
 8001cca:	e09e      	b.n	8001e0a <main+0x7d2>
										        case 8:
										            transmit_uart3("M: 8");
 8001ccc:	4832      	ldr	r0, [pc, #200]	@ (8001d98 <main+0x760>)
 8001cce:	f000 fb69 	bl	80023a4 <transmit_uart3>
										            break;
 8001cd2:	e09a      	b.n	8001e0a <main+0x7d2>
										        case 9:
										            transmit_uart3("M: 9");
 8001cd4:	4831      	ldr	r0, [pc, #196]	@ (8001d9c <main+0x764>)
 8001cd6:	f000 fb65 	bl	80023a4 <transmit_uart3>
										            break;
 8001cda:	e096      	b.n	8001e0a <main+0x7d2>
										        case 10:
										            transmit_uart3("M: 10");
 8001cdc:	4830      	ldr	r0, [pc, #192]	@ (8001da0 <main+0x768>)
 8001cde:	f000 fb61 	bl	80023a4 <transmit_uart3>
										            break;
 8001ce2:	e092      	b.n	8001e0a <main+0x7d2>
										        case 11:
										            transmit_uart3("M: 11");
 8001ce4:	482f      	ldr	r0, [pc, #188]	@ (8001da4 <main+0x76c>)
 8001ce6:	f000 fb5d 	bl	80023a4 <transmit_uart3>
										            break;
 8001cea:	e08e      	b.n	8001e0a <main+0x7d2>
										        case 12:
										            transmit_uart3("M: 12");
 8001cec:	482e      	ldr	r0, [pc, #184]	@ (8001da8 <main+0x770>)
 8001cee:	f000 fb59 	bl	80023a4 <transmit_uart3>
										            break;
 8001cf2:	e08a      	b.n	8001e0a <main+0x7d2>
										        case 13:
										            transmit_uart3("M: 13");
 8001cf4:	482d      	ldr	r0, [pc, #180]	@ (8001dac <main+0x774>)
 8001cf6:	f000 fb55 	bl	80023a4 <transmit_uart3>
										            break;
 8001cfa:	e086      	b.n	8001e0a <main+0x7d2>
										        case 14:
										            transmit_uart3("M: 14");
 8001cfc:	482c      	ldr	r0, [pc, #176]	@ (8001db0 <main+0x778>)
 8001cfe:	f000 fb51 	bl	80023a4 <transmit_uart3>
										            break;
 8001d02:	e082      	b.n	8001e0a <main+0x7d2>
										        case 15:
										            transmit_uart3("M: 15");
 8001d04:	482b      	ldr	r0, [pc, #172]	@ (8001db4 <main+0x77c>)
 8001d06:	f000 fb4d 	bl	80023a4 <transmit_uart3>
										            break;
 8001d0a:	e07e      	b.n	8001e0a <main+0x7d2>
										        case 16:
										            transmit_uart3("M: 16");
 8001d0c:	482a      	ldr	r0, [pc, #168]	@ (8001db8 <main+0x780>)
 8001d0e:	f000 fb49 	bl	80023a4 <transmit_uart3>
										            break;
 8001d12:	e07a      	b.n	8001e0a <main+0x7d2>
										        case 17:
										            transmit_uart3("M: 17");
 8001d14:	4829      	ldr	r0, [pc, #164]	@ (8001dbc <main+0x784>)
 8001d16:	f000 fb45 	bl	80023a4 <transmit_uart3>
										            break;
 8001d1a:	e076      	b.n	8001e0a <main+0x7d2>
										        case 18:
										            transmit_uart3("M: 18");
 8001d1c:	4828      	ldr	r0, [pc, #160]	@ (8001dc0 <main+0x788>)
 8001d1e:	f000 fb41 	bl	80023a4 <transmit_uart3>
										            break;
 8001d22:	e072      	b.n	8001e0a <main+0x7d2>
										        case 19:
										            transmit_uart3("M: 19");
 8001d24:	4827      	ldr	r0, [pc, #156]	@ (8001dc4 <main+0x78c>)
 8001d26:	f000 fb3d 	bl	80023a4 <transmit_uart3>
										            break;
 8001d2a:	e06e      	b.n	8001e0a <main+0x7d2>
										        case 20:
										            transmit_uart3("M: 20");
 8001d2c:	4826      	ldr	r0, [pc, #152]	@ (8001dc8 <main+0x790>)
 8001d2e:	f000 fb39 	bl	80023a4 <transmit_uart3>
										            break;
 8001d32:	e06a      	b.n	8001e0a <main+0x7d2>
										        case 21:
										            transmit_uart3("M: 21");
 8001d34:	4825      	ldr	r0, [pc, #148]	@ (8001dcc <main+0x794>)
 8001d36:	f000 fb35 	bl	80023a4 <transmit_uart3>
										            break;
 8001d3a:	e066      	b.n	8001e0a <main+0x7d2>
										        case 22:
										            transmit_uart3("M: 22");
 8001d3c:	4824      	ldr	r0, [pc, #144]	@ (8001dd0 <main+0x798>)
 8001d3e:	f000 fb31 	bl	80023a4 <transmit_uart3>
										            break;
 8001d42:	e062      	b.n	8001e0a <main+0x7d2>
										        case 23:
										            transmit_uart3("M: 23");
 8001d44:	4823      	ldr	r0, [pc, #140]	@ (8001dd4 <main+0x79c>)
 8001d46:	f000 fb2d 	bl	80023a4 <transmit_uart3>
										            break;
 8001d4a:	e05e      	b.n	8001e0a <main+0x7d2>
										        case 24:
										            transmit_uart3("M: 24");
 8001d4c:	4822      	ldr	r0, [pc, #136]	@ (8001dd8 <main+0x7a0>)
 8001d4e:	f000 fb29 	bl	80023a4 <transmit_uart3>
										            break;
 8001d52:	e05a      	b.n	8001e0a <main+0x7d2>
										        case 25:
										            transmit_uart3("M: 25");
 8001d54:	4821      	ldr	r0, [pc, #132]	@ (8001ddc <main+0x7a4>)
 8001d56:	f000 fb25 	bl	80023a4 <transmit_uart3>
										            break;
 8001d5a:	e056      	b.n	8001e0a <main+0x7d2>
 8001d5c:	20017658 	.word	0x20017658
 8001d60:	20018824 	.word	0x20018824
 8001d64:	20018828 	.word	0x20018828
 8001d68:	08008528 	.word	0x08008528
 8001d6c:	20010b00 	.word	0x20010b00
 8001d70:	20018830 	.word	0x20018830
 8001d74:	2001882c 	.word	0x2001882c
 8001d78:	0800852c 	.word	0x0800852c
 8001d7c:	08008534 	.word	0x08008534
 8001d80:	0800853c 	.word	0x0800853c
 8001d84:	08008544 	.word	0x08008544
 8001d88:	0800854c 	.word	0x0800854c
 8001d8c:	08008554 	.word	0x08008554
 8001d90:	0800855c 	.word	0x0800855c
 8001d94:	08008564 	.word	0x08008564
 8001d98:	0800856c 	.word	0x0800856c
 8001d9c:	08008574 	.word	0x08008574
 8001da0:	0800857c 	.word	0x0800857c
 8001da4:	08008584 	.word	0x08008584
 8001da8:	0800858c 	.word	0x0800858c
 8001dac:	08008594 	.word	0x08008594
 8001db0:	0800859c 	.word	0x0800859c
 8001db4:	080085a4 	.word	0x080085a4
 8001db8:	080085ac 	.word	0x080085ac
 8001dbc:	080085b4 	.word	0x080085b4
 8001dc0:	080085bc 	.word	0x080085bc
 8001dc4:	080085c4 	.word	0x080085c4
 8001dc8:	080085cc 	.word	0x080085cc
 8001dcc:	080085d4 	.word	0x080085d4
 8001dd0:	080085dc 	.word	0x080085dc
 8001dd4:	080085e4 	.word	0x080085e4
 8001dd8:	080085ec 	.word	0x080085ec
 8001ddc:	080085f4 	.word	0x080085f4
										        case 26:
										            transmit_uart3("M: 26");
 8001de0:	4826      	ldr	r0, [pc, #152]	@ (8001e7c <main+0x844>)
 8001de2:	f000 fadf 	bl	80023a4 <transmit_uart3>
										            break;
 8001de6:	e010      	b.n	8001e0a <main+0x7d2>
										        case 27:
										            transmit_uart3("M: 27");
 8001de8:	4825      	ldr	r0, [pc, #148]	@ (8001e80 <main+0x848>)
 8001dea:	f000 fadb 	bl	80023a4 <transmit_uart3>
										            break;
 8001dee:	e00c      	b.n	8001e0a <main+0x7d2>
										        case 28:
										            transmit_uart3("M: 28");
 8001df0:	4824      	ldr	r0, [pc, #144]	@ (8001e84 <main+0x84c>)
 8001df2:	f000 fad7 	bl	80023a4 <transmit_uart3>
										            break;
 8001df6:	e008      	b.n	8001e0a <main+0x7d2>
										        case 29:
										            transmit_uart3("M: 29");
 8001df8:	4823      	ldr	r0, [pc, #140]	@ (8001e88 <main+0x850>)
 8001dfa:	f000 fad3 	bl	80023a4 <transmit_uart3>
										            break;
 8001dfe:	e004      	b.n	8001e0a <main+0x7d2>
										        case 30:
										        	transmit_uart3("M: 30");
 8001e00:	4822      	ldr	r0, [pc, #136]	@ (8001e8c <main+0x854>)
 8001e02:	f000 facf 	bl	80023a4 <transmit_uart3>
										            break;
 8001e06:	e000      	b.n	8001e0a <main+0x7d2>
										        default:
										            break;
 8001e08:	bf00      	nop
			}
			GO = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		};
		if(win == 1){
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <main+0x858>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d115      	bne.n	8001e42 <main+0x80a>
			 if (load_image_from_sd_to_play("winner.bin")) {
 8001e16:	481f      	ldr	r0, [pc, #124]	@ (8001e94 <main+0x85c>)
 8001e18:	f000 fa14 	bl	8002244 <load_image_from_sd_to_play>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00f      	beq.n	8001e42 <main+0x80a>
				LCD_Sprite(71, 106, 178, 28, image, 1, 0, 0, 1);
 8001e22:	2301      	movs	r3, #1
 8001e24:	9304      	str	r3, [sp, #16]
 8001e26:	2300      	movs	r3, #0
 8001e28:	9303      	str	r3, [sp, #12]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <main+0x860>)
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	231c      	movs	r3, #28
 8001e38:	22b2      	movs	r2, #178	@ 0xb2
 8001e3a:	216a      	movs	r1, #106	@ 0x6a
 8001e3c:	2047      	movs	r0, #71	@ 0x47
 8001e3e:	f7ff fb4f 	bl	80014e0 <LCD_Sprite>
				}
		};
		if(lo == 1){
 8001e42:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <main+0x864>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	f47f aec9 	bne.w	8001bde <main+0x5a6>
			 if (load_image_from_sd_to_play2("loser.bin")) {
 8001e4c:	4814      	ldr	r0, [pc, #80]	@ (8001ea0 <main+0x868>)
 8001e4e:	f000 fa51 	bl	80022f4 <load_image_from_sd_to_play2>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f43f aec2 	beq.w	8001bde <main+0x5a6>
				LCD_Sprite(66, 103, 187, 34, image2, 1, 0, 0, 1);
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	9304      	str	r3, [sp, #16]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9303      	str	r3, [sp, #12]
 8001e62:	2300      	movs	r3, #0
 8001e64:	9302      	str	r3, [sp, #8]
 8001e66:	2301      	movs	r3, #1
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <main+0x86c>)
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2322      	movs	r3, #34	@ 0x22
 8001e70:	22bb      	movs	r2, #187	@ 0xbb
 8001e72:	2167      	movs	r1, #103	@ 0x67
 8001e74:	2042      	movs	r0, #66	@ 0x42
 8001e76:	f7ff fb33 	bl	80014e0 <LCD_Sprite>
		while(wh1 == 1){
 8001e7a:	e6b0      	b.n	8001bde <main+0x5a6>
 8001e7c:	080085fc 	.word	0x080085fc
 8001e80:	08008604 	.word	0x08008604
 8001e84:	0800860c 	.word	0x0800860c
 8001e88:	08008614 	.word	0x08008614
 8001e8c:	0800861c 	.word	0x0800861c
 8001e90:	20018834 	.word	0x20018834
 8001e94:	08008624 	.word	0x08008624
 8001e98:	2001883c 	.word	0x2001883c
 8001e9c:	20018838 	.word	0x20018838
 8001ea0:	08008630 	.word	0x08008630
 8001ea4:	2001af2c 	.word	0x2001af2c

08001ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b094      	sub	sp, #80	@ 0x50
 8001eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	2234      	movs	r2, #52	@ 0x34
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f006 fafc 	bl	80084b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	4b29      	ldr	r3, [pc, #164]	@ (8001f78 <SystemClock_Config+0xd0>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	4a28      	ldr	r2, [pc, #160]	@ (8001f78 <SystemClock_Config+0xd0>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001edc:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <SystemClock_Config+0xd0>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	4b23      	ldr	r3, [pc, #140]	@ (8001f7c <SystemClock_Config+0xd4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ef4:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <SystemClock_Config+0xd4>)
 8001ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <SystemClock_Config+0xd4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f10:	2310      	movs	r3, #16
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f14:	2302      	movs	r3, #2
 8001f16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001f20:	2350      	movs	r3, #80	@ 0x50
 8001f22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f24:	2302      	movs	r3, #2
 8001f26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 fbf1 	bl	800371c <HAL_RCC_OscConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001f40:	f000 fb2e 	bl	80025a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f44:	230f      	movs	r3, #15
 8001f46:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	2102      	movs	r1, #2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 f917 	bl	8003194 <HAL_RCC_ClockConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001f6c:	f000 fb18 	bl	80025a0 <Error_Handler>
  }
}
 8001f70:	bf00      	nop
 8001f72:	3750      	adds	r7, #80	@ 0x50
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40007000 	.word	0x40007000

08001f80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001f86:	4a18      	ldr	r2, [pc, #96]	@ (8001fe8 <MX_SPI1_Init+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001f8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fcc:	220a      	movs	r2, #10
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <MX_SPI1_Init+0x64>)
 8001fd2:	f001 fe41 	bl	8003c58 <HAL_SPI_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fdc:	f000 fae0 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200176a0 	.word	0x200176a0
 8001fe8:	40013000 	.word	0x40013000

08001fec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <MX_UART5_Init+0x4c>)
 8001ff2:	4a12      	ldr	r2, [pc, #72]	@ (800203c <MX_UART5_Init+0x50>)
 8001ff4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <MX_UART5_Init+0x4c>)
 8001ff8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ffc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <MX_UART5_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <MX_UART5_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <MX_UART5_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <MX_UART5_Init+0x4c>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <MX_UART5_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <MX_UART5_Init+0x4c>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002022:	4805      	ldr	r0, [pc, #20]	@ (8002038 <MX_UART5_Init+0x4c>)
 8002024:	f002 fa70 	bl	8004508 <HAL_UART_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800202e:	f000 fab7 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20018734 	.word	0x20018734
 800203c:	40005000 	.word	0x40005000

08002040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002044:	4b11      	ldr	r3, [pc, #68]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <MX_USART2_UART_Init+0x50>)
 8002048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800204a:	4b10      	ldr	r3, [pc, #64]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 800204c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b09      	ldr	r3, [pc, #36]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	@ (800208c <MX_USART2_UART_Init+0x4c>)
 8002078:	f002 fa46 	bl	8004508 <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002082:	f000 fa8d 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2001877c 	.word	0x2001877c
 8002090:	40004400 	.word	0x40004400

08002094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 800209a:	4a12      	ldr	r2, [pc, #72]	@ (80020e4 <MX_USART3_UART_Init+0x50>)
 800209c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 80020a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 80020ba:	220c      	movs	r2, #12
 80020bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020ca:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <MX_USART3_UART_Init+0x4c>)
 80020cc:	f002 fa1c 	bl	8004508 <HAL_UART_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020d6:	f000 fa63 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200187c4 	.word	0x200187c4
 80020e4:	40004800 	.word	0x40004800

080020e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b49      	ldr	r3, [pc, #292]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b45      	ldr	r3, [pc, #276]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4a44      	ldr	r2, [pc, #272]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	6313      	str	r3, [r2, #48]	@ 0x30
 800212a:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <MX_GPIO_Init+0x14c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b3e      	ldr	r3, [pc, #248]	@ (8002234 <MX_GPIO_Init+0x14c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	4a3d      	ldr	r2, [pc, #244]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30
 8002146:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a36      	ldr	r2, [pc, #216]	@ (8002234 <MX_GPIO_Init+0x14c>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4b30      	ldr	r3, [pc, #192]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <MX_GPIO_Init+0x14c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	2182      	movs	r1, #130	@ 0x82
 800218e:	482a      	ldr	r0, [pc, #168]	@ (8002238 <MX_GPIO_Init+0x150>)
 8002190:	f000 ffe6 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8002194:	2200      	movs	r2, #0
 8002196:	f240 7113 	movw	r1, #1811	@ 0x713
 800219a:	4828      	ldr	r0, [pc, #160]	@ (800223c <MX_GPIO_Init+0x154>)
 800219c:	f000 ffe0 	bl	8003160 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80021a0:	2200      	movs	r2, #0
 80021a2:	f240 4139 	movw	r1, #1081	@ 0x439
 80021a6:	4826      	ldr	r0, [pc, #152]	@ (8002240 <MX_GPIO_Init+0x158>)
 80021a8:	f000 ffda 	bl	8003160 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2140      	movs	r1, #64	@ 0x40
 80021b0:	4823      	ldr	r0, [pc, #140]	@ (8002240 <MX_GPIO_Init+0x158>)
 80021b2:	f000 ffd5 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 80021b6:	2382      	movs	r3, #130	@ 0x82
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c2:	2302      	movs	r3, #2
 80021c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	481a      	ldr	r0, [pc, #104]	@ (8002238 <MX_GPIO_Init+0x150>)
 80021ce:	f000 fe33 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80021d2:	f240 7313 	movw	r3, #1811	@ 0x713
 80021d6:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4814      	ldr	r0, [pc, #80]	@ (800223c <MX_GPIO_Init+0x154>)
 80021ec:	f000 fe24 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80021f0:	f240 4339 	movw	r3, #1081	@ 0x439
 80021f4:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021fe:	2302      	movs	r3, #2
 8002200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	480d      	ldr	r0, [pc, #52]	@ (8002240 <MX_GPIO_Init+0x158>)
 800220a:	f000 fe15 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 800220e:	2340      	movs	r3, #64	@ 0x40
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800221a:	2301      	movs	r3, #1
 800221c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4806      	ldr	r0, [pc, #24]	@ (8002240 <MX_GPIO_Init+0x158>)
 8002226:	f000 fe07 	bl	8002e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	@ 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40020800 	.word	0x40020800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400

08002244 <load_image_from_sd_to_play>:

/* USER CODE BEGIN 4 */
int load_image_from_sd_to_play(const char* filename) {
 8002244:	b580      	push	{r7, lr}
 8002246:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800224a:	af00      	add	r7, sp, #0
 800224c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002250:	f843 0c3c 	str.w	r0, [r3, #-60]
    FIL fil;
    UINT bytes_read;
    FRESULT fres;

    // Abrir el archivo desde la SD
    fres = f_open(&fil, filename, FA_READ);
 8002254:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002258:	4619      	mov	r1, r3
 800225a:	f107 0320 	add.w	r3, r7, #32
 800225e:	3b14      	subs	r3, #20
 8002260:	2201      	movs	r2, #1
 8002262:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8002266:	4618      	mov	r0, r3
 8002268:	f005 fc32 	bl	8007ad0 <f_open>
 800226c:	4603      	mov	r3, r0
 800226e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002272:	f102 021f 	add.w	r2, r2, #31
 8002276:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8002278:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800227c:	f103 031f 	add.w	r3, r3, #31
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <load_image_from_sd_to_play+0x46>
      //  transmit_uart("Error al abrir el archivo en la SD\n");
        return 0;  // Error al abrir el archivo
 8002286:	2300      	movs	r3, #0
 8002288:	e02c      	b.n	80022e4 <load_image_from_sd_to_play+0xa0>
    }

    // Leer los datos del archivo y almacenarlos en la variable play
    fres = f_read(&fil, image, IMAGE_SIZE, &bytes_read);
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	3b18      	subs	r3, #24
 8002290:	f107 0020 	add.w	r0, r7, #32
 8002294:	3814      	subs	r0, #20
 8002296:	f242 62f0 	movw	r2, #9968	@ 0x26f0
 800229a:	4915      	ldr	r1, [pc, #84]	@ (80022f0 <load_image_from_sd_to_play+0xac>)
 800229c:	f005 fde0 	bl	8007e60 <f_read>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80022a6:	f102 021f 	add.w	r2, r2, #31
 80022aa:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytes_read == 0) {
 80022ac:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80022b0:	f103 031f 	add.w	r3, r3, #31
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <load_image_from_sd_to_play+0x82>
 80022ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022be:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d107      	bne.n	80022d6 <load_image_from_sd_to_play+0x92>
      //  transmit_uart("Error al leer la imagen desde la SD\n");
        f_close(&fil);
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	3b14      	subs	r3, #20
 80022cc:	4618      	mov	r0, r3
 80022ce:	f005 ffa4 	bl	800821a <f_close>
        return 0;  // Error al leer el archivo
 80022d2:	2300      	movs	r3, #0
 80022d4:	e006      	b.n	80022e4 <load_image_from_sd_to_play+0xa0>
    }

    // Cerrar el archivo
    f_close(&fil);
 80022d6:	f107 0320 	add.w	r3, r7, #32
 80022da:	3b14      	subs	r3, #20
 80022dc:	4618      	mov	r0, r3
 80022de:	f005 ff9c 	bl	800821a <f_close>
   // transmit_uart("Imagen cargada correctamente desde la SD a la variable play\n");
    return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2001883c 	.word	0x2001883c

080022f4 <load_image_from_sd_to_play2>:
int load_image_from_sd_to_play2(const char* filename) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002300:	f843 0c3c 	str.w	r0, [r3, #-60]
    FIL fil;
    UINT bytes_read;
    FRESULT fres;

    // Abrir el archivo desde la SD
    fres = f_open(&fil, filename, FA_READ);
 8002304:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002308:	4619      	mov	r1, r3
 800230a:	f107 0320 	add.w	r3, r7, #32
 800230e:	3b14      	subs	r3, #20
 8002310:	2201      	movs	r2, #1
 8002312:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8002316:	4618      	mov	r0, r3
 8002318:	f005 fbda 	bl	8007ad0 <f_open>
 800231c:	4603      	mov	r3, r0
 800231e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002322:	f102 021f 	add.w	r2, r2, #31
 8002326:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8002328:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800232c:	f103 031f 	add.w	r3, r3, #31
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <load_image_from_sd_to_play2+0x46>
      //  transmit_uart("Error al abrir el archivo en la SD\n");
        return 0;  // Error al abrir el archivo
 8002336:	2300      	movs	r3, #0
 8002338:	e02c      	b.n	8002394 <load_image_from_sd_to_play2+0xa0>
    }

    // Leer los datos del archivo y almacenarlos en la variable play
    fres = f_read(&fil, image2, IMAGE_SIZE2, &bytes_read);
 800233a:	f107 0320 	add.w	r3, r7, #32
 800233e:	3b18      	subs	r3, #24
 8002340:	f107 0020 	add.w	r0, r7, #32
 8002344:	3814      	subs	r0, #20
 8002346:	f243 12ac 	movw	r2, #12716	@ 0x31ac
 800234a:	4915      	ldr	r1, [pc, #84]	@ (80023a0 <load_image_from_sd_to_play2+0xac>)
 800234c:	f005 fd88 	bl	8007e60 <f_read>
 8002350:	4603      	mov	r3, r0
 8002352:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002356:	f102 021f 	add.w	r2, r2, #31
 800235a:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytes_read == 0) {
 800235c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002360:	f103 031f 	add.w	r3, r3, #31
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <load_image_from_sd_to_play2+0x82>
 800236a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800236e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d107      	bne.n	8002386 <load_image_from_sd_to_play2+0x92>
      //  transmit_uart("Error al leer la imagen desde la SD\n");
        f_close(&fil);
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	3b14      	subs	r3, #20
 800237c:	4618      	mov	r0, r3
 800237e:	f005 ff4c 	bl	800821a <f_close>
        return 0;  // Error al leer el archivo
 8002382:	2300      	movs	r3, #0
 8002384:	e006      	b.n	8002394 <load_image_from_sd_to_play2+0xa0>
    }

    // Cerrar el archivo
    f_close(&fil);
 8002386:	f107 0320 	add.w	r3, r7, #32
 800238a:	3b14      	subs	r3, #20
 800238c:	4618      	mov	r0, r3
 800238e:	f005 ff44 	bl	800821a <f_close>
   // transmit_uart("Imagen cargada correctamente desde la SD a la variable play\n");
    return 1;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2001af2c 	.word	0x2001af2c

080023a4 <transmit_uart3>:

void transmit_uart3(char *message){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7fd ff29 	bl	8000204 <strlen>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4803      	ldr	r0, [pc, #12]	@ (80023cc <transmit_uart3+0x28>)
 80023be:	f002 f8f3 	bl	80045a8 <HAL_UART_Transmit>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200187c4 	.word	0x200187c4

080023d0 <HAL_UART_RxCpltCallback>:



  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	6078      	str	r0, [r7, #4]
	  if(huart->Instance == UART5){
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a5f      	ldr	r2, [pc, #380]	@ (800255c <HAL_UART_RxCpltCallback+0x18c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d129      	bne.n	8002436 <HAL_UART_RxCpltCallback+0x66>

	    		  switch (option[0]){
 80023e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002560 <HAL_UART_RxCpltCallback+0x190>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b4d      	cmp	r3, #77	@ 0x4d
 80023e8:	d002      	beq.n	80023f0 <HAL_UART_RxCpltCallback+0x20>
 80023ea:	2b68      	cmp	r3, #104	@ 0x68
 80023ec:	d00a      	beq.n	8002404 <HAL_UART_RxCpltCallback+0x34>
	    			  lo = 1;
	    			  win= 0;
	    			  transmit_uart3("R");
	    			  break;
	    		  default:
	    			  break;
 80023ee:	e013      	b.n	8002418 <HAL_UART_RxCpltCallback+0x48>
	    			  win = 1;
 80023f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002564 <HAL_UART_RxCpltCallback+0x194>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
	    			  lo = 0;
 80023f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002568 <HAL_UART_RxCpltCallback+0x198>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
	    			  transmit_uart3("r");
 80023fc:	485b      	ldr	r0, [pc, #364]	@ (800256c <HAL_UART_RxCpltCallback+0x19c>)
 80023fe:	f7ff ffd1 	bl	80023a4 <transmit_uart3>
	    			  break;
 8002402:	e009      	b.n	8002418 <HAL_UART_RxCpltCallback+0x48>
	    			  lo = 1;
 8002404:	4b58      	ldr	r3, [pc, #352]	@ (8002568 <HAL_UART_RxCpltCallback+0x198>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]
	    			  win= 0;
 800240a:	4b56      	ldr	r3, [pc, #344]	@ (8002564 <HAL_UART_RxCpltCallback+0x194>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
	    			  transmit_uart3("R");
 8002410:	4857      	ldr	r0, [pc, #348]	@ (8002570 <HAL_UART_RxCpltCallback+0x1a0>)
 8002412:	f7ff ffc7 	bl	80023a4 <transmit_uart3>
	    			  break;
 8002416:	bf00      	nop
	    		  }

	    		  HAL_UART_Transmit(&huart5, tx_buffer, strlen(tx_buffer), 10);
 8002418:	4856      	ldr	r0, [pc, #344]	@ (8002574 <HAL_UART_RxCpltCallback+0x1a4>)
 800241a:	f7fd fef3 	bl	8000204 <strlen>
 800241e:	4603      	mov	r3, r0
 8002420:	b29a      	uxth	r2, r3
 8002422:	230a      	movs	r3, #10
 8002424:	4953      	ldr	r1, [pc, #332]	@ (8002574 <HAL_UART_RxCpltCallback+0x1a4>)
 8002426:	4854      	ldr	r0, [pc, #336]	@ (8002578 <HAL_UART_RxCpltCallback+0x1a8>)
 8002428:	f002 f8be 	bl	80045a8 <HAL_UART_Transmit>
	    	  	  HAL_UART_Receive_IT(&huart5, option, 1);
 800242c:	2201      	movs	r2, #1
 800242e:	494c      	ldr	r1, [pc, #304]	@ (8002560 <HAL_UART_RxCpltCallback+0x190>)
 8002430:	4851      	ldr	r0, [pc, #324]	@ (8002578 <HAL_UART_RxCpltCallback+0x1a8>)
 8002432:	f002 f944 	bl	80046be <HAL_UART_Receive_IT>


	    	  }

	  if(huart->Instance == USART3){
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a50      	ldr	r2, [pc, #320]	@ (800257c <HAL_UART_RxCpltCallback+0x1ac>)
 800243c:	4293      	cmp	r3, r2
 800243e:	f040 8088 	bne.w	8002552 <HAL_UART_RxCpltCallback+0x182>

		  switch (option[0]){
 8002442:	4b47      	ldr	r3, [pc, #284]	@ (8002560 <HAL_UART_RxCpltCallback+0x190>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	3b61      	subs	r3, #97	@ 0x61
 8002448:	2b16      	cmp	r3, #22
 800244a:	d872      	bhi.n	8002532 <HAL_UART_RxCpltCallback+0x162>
 800244c:	a201      	add	r2, pc, #4	@ (adr r2, 8002454 <HAL_UART_RxCpltCallback+0x84>)
 800244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002452:	bf00      	nop
 8002454:	080024cd 	.word	0x080024cd
 8002458:	080024ed 	.word	0x080024ed
 800245c:	0800250d 	.word	0x0800250d
 8002460:	08002533 	.word	0x08002533
 8002464:	08002533 	.word	0x08002533
 8002468:	08002533 	.word	0x08002533
 800246c:	08002533 	.word	0x08002533
 8002470:	08002533 	.word	0x08002533
 8002474:	08002533 	.word	0x08002533
 8002478:	08002533 	.word	0x08002533
 800247c:	08002533 	.word	0x08002533
 8002480:	08002533 	.word	0x08002533
 8002484:	08002533 	.word	0x08002533
 8002488:	08002533 	.word	0x08002533
 800248c:	08002533 	.word	0x08002533
 8002490:	08002533 	.word	0x08002533
 8002494:	08002533 	.word	0x08002533
 8002498:	08002533 	.word	0x08002533
 800249c:	08002533 	.word	0x08002533
 80024a0:	08002533 	.word	0x08002533
 80024a4:	08002533 	.word	0x08002533
 80024a8:	08002533 	.word	0x08002533
 80024ac:	080024b1 	.word	0x080024b1
		  case 'w':
			//strcpy(tx_buffer, "w");
			incremento= -8;
 80024b0:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <HAL_UART_RxCpltCallback+0x1b0>)
 80024b2:	f06f 0207 	mvn.w	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
			y_incre = 1;
 80024b8:	4b32      	ldr	r3, [pc, #200]	@ (8002584 <HAL_UART_RxCpltCallback+0x1b4>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
			decremento= 0;
 80024be:	4b32      	ldr	r3, [pc, #200]	@ (8002588 <HAL_UART_RxCpltCallback+0x1b8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
			transmit_uart3("p");
 80024c4:	4831      	ldr	r0, [pc, #196]	@ (800258c <HAL_UART_RxCpltCallback+0x1bc>)
 80024c6:	f7ff ff6d 	bl	80023a4 <transmit_uart3>
			break;
 80024ca:	e033      	b.n	8002534 <HAL_UART_RxCpltCallback+0x164>

		  case 'a':
			  wh1 = 1;
 80024cc:	4b30      	ldr	r3, [pc, #192]	@ (8002590 <HAL_UART_RxCpltCallback+0x1c0>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
			  LCD_Clear(0x00);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7fe ff66 	bl	80013a4 <LCD_Clear>
			  FillRect(0, 0, 319, 239, 0x0000);
 80024d8:	2300      	movs	r3, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	23ef      	movs	r3, #239	@ 0xef
 80024de:	f240 123f 	movw	r2, #319	@ 0x13f
 80024e2:	2100      	movs	r1, #0
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7fe ffa1 	bl	800142c <FillRect>
			  break;
 80024ea:	e023      	b.n	8002534 <HAL_UART_RxCpltCallback+0x164>

		  case 'b':
			  wh2 = 1;
 80024ec:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_UART_RxCpltCallback+0x1c4>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
			  LCD_Clear(0x00);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe ff56 	bl	80013a4 <LCD_Clear>
			  FillRect(0, 0, 319, 239, 0x0000);
 80024f8:	2300      	movs	r3, #0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	23ef      	movs	r3, #239	@ 0xef
 80024fe:	f240 123f 	movw	r2, #319	@ 0x13f
 8002502:	2100      	movs	r1, #0
 8002504:	2000      	movs	r0, #0
 8002506:	f7fe ff91 	bl	800142c <FillRect>
			  break;
 800250a:	e013      	b.n	8002534 <HAL_UART_RxCpltCallback+0x164>
		  case 'c':
			  wh2 = 1;
 800250c:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_UART_RxCpltCallback+0x1c4>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
			  LCD_Clear(0x00);
 8002512:	2000      	movs	r0, #0
 8002514:	f7fe ff46 	bl	80013a4 <LCD_Clear>
			  FillRect(0, 0, 319, 239, 0x0000);
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	23ef      	movs	r3, #239	@ 0xef
 800251e:	f240 123f 	movw	r2, #319	@ 0x13f
 8002522:	2100      	movs	r1, #0
 8002524:	2000      	movs	r0, #0
 8002526:	f7fe ff81 	bl	800142c <FillRect>
			  transmit_uart3("f");
 800252a:	481b      	ldr	r0, [pc, #108]	@ (8002598 <HAL_UART_RxCpltCallback+0x1c8>)
 800252c:	f7ff ff3a 	bl	80023a4 <transmit_uart3>
			  break;
 8002530:	e000      	b.n	8002534 <HAL_UART_RxCpltCallback+0x164>

		  default:
			  break;
 8002532:	bf00      	nop
		  }

		  HAL_UART_Transmit(&huart3, tx_buffer, strlen(tx_buffer), 10);
 8002534:	480f      	ldr	r0, [pc, #60]	@ (8002574 <HAL_UART_RxCpltCallback+0x1a4>)
 8002536:	f7fd fe65 	bl	8000204 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	b29a      	uxth	r2, r3
 800253e:	230a      	movs	r3, #10
 8002540:	490c      	ldr	r1, [pc, #48]	@ (8002574 <HAL_UART_RxCpltCallback+0x1a4>)
 8002542:	4816      	ldr	r0, [pc, #88]	@ (800259c <HAL_UART_RxCpltCallback+0x1cc>)
 8002544:	f002 f830 	bl	80045a8 <HAL_UART_Transmit>
	  	  HAL_UART_Receive_IT(&huart3, option, 1);
 8002548:	2201      	movs	r2, #1
 800254a:	4905      	ldr	r1, [pc, #20]	@ (8002560 <HAL_UART_RxCpltCallback+0x190>)
 800254c:	4813      	ldr	r0, [pc, #76]	@ (800259c <HAL_UART_RxCpltCallback+0x1cc>)
 800254e:	f002 f8b6 	bl	80046be <HAL_UART_Receive_IT>


	  }
  }
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40005000 	.word	0x40005000
 8002560:	2001880c 	.word	0x2001880c
 8002564:	20018834 	.word	0x20018834
 8002568:	20018838 	.word	0x20018838
 800256c:	08008694 	.word	0x08008694
 8002570:	08008698 	.word	0x08008698
 8002574:	20018810 	.word	0x20018810
 8002578:	20018734 	.word	0x20018734
 800257c:	40004800 	.word	0x40004800
 8002580:	20018824 	.word	0x20018824
 8002584:	20018828 	.word	0x20018828
 8002588:	20017658 	.word	0x20017658
 800258c:	0800869c 	.word	0x0800869c
 8002590:	2001882c 	.word	0x2001882c
 8002594:	20018830 	.word	0x20018830
 8002598:	080086a0 	.word	0x080086a0
 800259c:	200187c4 	.word	0x200187c4

080025a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <Error_Handler+0x8>

080025ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_MspInit+0x4c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	4a0f      	ldr	r2, [pc, #60]	@ (80025f8 <HAL_MspInit+0x4c>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <HAL_MspInit+0x4c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_MspInit+0x4c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_MspInit+0x4c>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_MspInit+0x4c>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_SPI_MspInit+0x84>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d12b      	bne.n	8002676 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <HAL_SPI_MspInit+0x88>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <HAL_SPI_MspInit+0x88>)
 8002628:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <HAL_SPI_MspInit+0x88>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_SPI_MspInit+0x88>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a10      	ldr	r2, [pc, #64]	@ (8002684 <HAL_SPI_MspInit+0x88>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <HAL_SPI_MspInit+0x88>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002656:	23e0      	movs	r3, #224	@ 0xe0
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002666:	2305      	movs	r3, #5
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	@ (8002688 <HAL_SPI_MspInit+0x8c>)
 8002672:	f000 fbe1 	bl	8002e38 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	@ 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40013000 	.word	0x40013000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08e      	sub	sp, #56	@ 0x38
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a67      	ldr	r2, [pc, #412]	@ (8002848 <HAL_UART_MspInit+0x1bc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d153      	bne.n	8002756 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	4b66      	ldr	r3, [pc, #408]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	4a65      	ldr	r2, [pc, #404]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026be:	4b63      	ldr	r3, [pc, #396]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	4b5f      	ldr	r3, [pc, #380]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a5e      	ldr	r2, [pc, #376]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b5c      	ldr	r3, [pc, #368]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	4b58      	ldr	r3, [pc, #352]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a57      	ldr	r2, [pc, #348]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b55      	ldr	r3, [pc, #340]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002714:	2308      	movs	r3, #8
 8002716:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800271c:	4619      	mov	r1, r3
 800271e:	484c      	ldr	r0, [pc, #304]	@ (8002850 <HAL_UART_MspInit+0x1c4>)
 8002720:	f000 fb8a 	bl	8002e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002724:	2304      	movs	r3, #4
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002734:	2308      	movs	r3, #8
 8002736:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273c:	4619      	mov	r1, r3
 800273e:	4845      	ldr	r0, [pc, #276]	@ (8002854 <HAL_UART_MspInit+0x1c8>)
 8002740:	f000 fb7a 	bl	8002e38 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	2035      	movs	r0, #53	@ 0x35
 800274a:	f000 faa0 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800274e:	2035      	movs	r0, #53	@ 0x35
 8002750:	f000 fab9 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002754:	e073      	b.n	800283e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3f      	ldr	r2, [pc, #252]	@ (8002858 <HAL_UART_MspInit+0x1cc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d134      	bne.n	80027ca <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	4a38      	ldr	r2, [pc, #224]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 800276a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800276e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002770:	4b36      	ldr	r3, [pc, #216]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	4a31      	ldr	r2, [pc, #196]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6313      	str	r3, [r2, #48]	@ 0x30
 800278c:	4b2f      	ldr	r3, [pc, #188]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002798:	230c      	movs	r3, #12
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027a8:	2307      	movs	r3, #7
 80027aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	482a      	ldr	r0, [pc, #168]	@ (800285c <HAL_UART_MspInit+0x1d0>)
 80027b4:	f000 fb40 	bl	8002e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2100      	movs	r1, #0
 80027bc:	2026      	movs	r0, #38	@ 0x26
 80027be:	f000 fa66 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027c2:	2026      	movs	r0, #38	@ 0x26
 80027c4:	f000 fa7f 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
}
 80027c8:	e039      	b.n	800283e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <HAL_UART_MspInit+0x1d4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d134      	bne.n	800283e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	4a1b      	ldr	r2, [pc, #108]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80027de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e4:	4b19      	ldr	r3, [pc, #100]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	4b15      	ldr	r3, [pc, #84]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	4a14      	ldr	r2, [pc, #80]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002800:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_UART_MspInit+0x1c0>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800280c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281a:	2303      	movs	r3, #3
 800281c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800281e:	2307      	movs	r3, #7
 8002820:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002826:	4619      	mov	r1, r3
 8002828:	4809      	ldr	r0, [pc, #36]	@ (8002850 <HAL_UART_MspInit+0x1c4>)
 800282a:	f000 fb05 	bl	8002e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2027      	movs	r0, #39	@ 0x27
 8002834:	f000 fa2b 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002838:	2027      	movs	r0, #39	@ 0x27
 800283a:	f000 fa44 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3738      	adds	r7, #56	@ 0x38
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40005000 	.word	0x40005000
 800284c:	40023800 	.word	0x40023800
 8002850:	40020800 	.word	0x40020800
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40004400 	.word	0x40004400
 800285c:	40020000 	.word	0x40020000
 8002860:	40004800 	.word	0x40004800

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <NMI_Handler+0x4>

0800286c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <MemManage_Handler+0x4>

0800287c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <UsageFault_Handler+0x4>

0800288c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0){
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <SysTick_Handler+0x38>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <SysTick_Handler+0x18>
		Timer1--;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <SysTick_Handler+0x38>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <SysTick_Handler+0x38>)
 80028ce:	801a      	strh	r2, [r3, #0]
	};
	if(Timer2 > 0){
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <SysTick_Handler+0x3c>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <SysTick_Handler+0x2c>
		Timer2--;
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <SysTick_Handler+0x3c>)
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Handler+0x3c>)
 80028e2:	801a      	strh	r2, [r3, #0]
	};
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e4:	f000 f8b4 	bl	8002a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80028e8:	f000 fa07 	bl	8002cfa <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20017698 	.word	0x20017698
 80028f4:	2001769a 	.word	0x2001769a

080028f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <USART2_IRQHandler+0x10>)
 80028fe:	f001 ff03 	bl	8004708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2001877c 	.word	0x2001877c

0800290c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <USART3_IRQHandler+0x10>)
 8002912:	f001 fef9 	bl	8004708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200187c4 	.word	0x200187c4

08002920 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002924:	4802      	ldr	r0, [pc, #8]	@ (8002930 <UART5_IRQHandler+0x10>)
 8002926:	f001 feef 	bl	8004708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20018734 	.word	0x20018734

08002934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <SystemInit+0x20>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293e:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <SystemInit+0x20>)
 8002940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8002958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002990 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800295c:	f7ff ffea 	bl	8002934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002960:	480c      	ldr	r0, [pc, #48]	@ (8002994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002962:	490d      	ldr	r1, [pc, #52]	@ (8002998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002964:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002968:	e002      	b.n	8002970 <LoopCopyDataInit>

0800296a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800296c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296e:	3304      	adds	r3, #4

08002970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002974:	d3f9      	bcc.n	800296a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002978:	4c0a      	ldr	r4, [pc, #40]	@ (80029a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800297c:	e001      	b.n	8002982 <LoopFillZerobss>

0800297e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002980:	3204      	adds	r2, #4

08002982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002984:	d3fb      	bcc.n	800297e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002986:	f005 fd9d 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298a:	f7fe fe55 	bl	8001638 <main>
  bx  lr    
 800298e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002998:	2001767c 	.word	0x2001767c
  ldr r2, =_sidata
 800299c:	08008b54 	.word	0x08008b54
  ldr r2, =_sbss
 80029a0:	2001767c 	.word	0x2001767c
  ldr r4, =_ebss
 80029a4:	2001e318 	.word	0x2001e318

080029a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a8:	e7fe      	b.n	80029a8 <ADC_IRQHandler>
	...

080029ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b0:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <HAL_Init+0x40>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	@ (80029ec <HAL_Init+0x40>)
 80029b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <HAL_Init+0x40>)
 80029c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c8:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a07      	ldr	r2, [pc, #28]	@ (80029ec <HAL_Init+0x40>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d4:	2003      	movs	r0, #3
 80029d6:	f000 f94f 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029da:	200f      	movs	r0, #15
 80029dc:	f000 f808 	bl	80029f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e0:	f7ff fde4 	bl	80025ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023c00 	.word	0x40023c00

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <HAL_InitTick+0x54>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_InitTick+0x58>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f967 	bl	8002ce2 <HAL_SYSTICK_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00e      	b.n	8002a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d80a      	bhi.n	8002a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a24:	2200      	movs	r2, #0
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f000 f92f 	bl	8002c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a30:	4a06      	ldr	r2, [pc, #24]	@ (8002a4c <HAL_InitTick+0x5c>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2001765c 	.word	0x2001765c
 8002a48:	20017664 	.word	0x20017664
 8002a4c:	20017660 	.word	0x20017660

08002a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_IncTick+0x20>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_IncTick+0x24>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <HAL_IncTick+0x24>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20017664 	.word	0x20017664
 8002a74:	2001e0d8 	.word	0x2001e0d8

08002a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_GetTick+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	2001e0d8 	.word	0x2001e0d8

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff ffee 	bl	8002a78 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20017664 	.word	0x20017664

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	@ (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	@ (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	@ (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	@ 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	@ (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff29 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff3e 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff31 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffa2 	bl	8002c34 <SysTick_Config>
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002cfe:	f000 f802 	bl	8002d06 <HAL_SYSTICK_Callback>
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d22:	f7ff fea9 	bl	8002a78 <HAL_GetTick>
 8002d26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d008      	beq.n	8002d46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2280      	movs	r2, #128	@ 0x80
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e052      	b.n	8002dec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0216 	bic.w	r2, r2, #22
 8002d54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <HAL_DMA_Abort+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0208 	bic.w	r2, r2, #8
 8002d84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d96:	e013      	b.n	8002dc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d98:	f7ff fe6e 	bl	8002a78 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d90c      	bls.n	8002dc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2203      	movs	r2, #3
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e015      	b.n	8002dec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e4      	bne.n	8002d98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	223f      	movs	r2, #63	@ 0x3f
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d004      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2280      	movs	r2, #128	@ 0x80
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00c      	b.n	8002e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2205      	movs	r2, #5
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e165      	b.n	8003120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	f040 8154 	bne.w	800311a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d005      	beq.n	8002e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d130      	bne.n	8002eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2203      	movs	r2, #3
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 0201 	and.w	r2, r3, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d017      	beq.n	8002f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d123      	bne.n	8002f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	08da      	lsrs	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3208      	adds	r2, #8
 8002f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	69b9      	ldr	r1, [r7, #24]
 8002f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80ae 	beq.w	800311a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8003138 <HAL_GPIO_Init+0x300>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8003138 <HAL_GPIO_Init+0x300>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fce:	4b5a      	ldr	r3, [pc, #360]	@ (8003138 <HAL_GPIO_Init+0x300>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fda:	4a58      	ldr	r2, [pc, #352]	@ (800313c <HAL_GPIO_Init+0x304>)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4f      	ldr	r2, [pc, #316]	@ (8003140 <HAL_GPIO_Init+0x308>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d025      	beq.n	8003052 <HAL_GPIO_Init+0x21a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4e      	ldr	r2, [pc, #312]	@ (8003144 <HAL_GPIO_Init+0x30c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01f      	beq.n	800304e <HAL_GPIO_Init+0x216>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4d      	ldr	r2, [pc, #308]	@ (8003148 <HAL_GPIO_Init+0x310>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d019      	beq.n	800304a <HAL_GPIO_Init+0x212>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4c      	ldr	r2, [pc, #304]	@ (800314c <HAL_GPIO_Init+0x314>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_GPIO_Init+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4b      	ldr	r2, [pc, #300]	@ (8003150 <HAL_GPIO_Init+0x318>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00d      	beq.n	8003042 <HAL_GPIO_Init+0x20a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4a      	ldr	r2, [pc, #296]	@ (8003154 <HAL_GPIO_Init+0x31c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <HAL_GPIO_Init+0x206>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a49      	ldr	r2, [pc, #292]	@ (8003158 <HAL_GPIO_Init+0x320>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_GPIO_Init+0x202>
 8003036:	2306      	movs	r3, #6
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800303a:	2307      	movs	r3, #7
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	@ (800313c <HAL_GPIO_Init+0x304>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b3a      	ldr	r3, [pc, #232]	@ (800315c <HAL_GPIO_Init+0x324>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a31      	ldr	r2, [pc, #196]	@ (800315c <HAL_GPIO_Init+0x324>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <HAL_GPIO_Init+0x324>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a26      	ldr	r2, [pc, #152]	@ (800315c <HAL_GPIO_Init+0x324>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c6:	4b25      	ldr	r3, [pc, #148]	@ (800315c <HAL_GPIO_Init+0x324>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ea:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <HAL_GPIO_Init+0x324>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <HAL_GPIO_Init+0x324>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003114:	4a11      	ldr	r2, [pc, #68]	@ (800315c <HAL_GPIO_Init+0x324>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae96 	bls.w	8002e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	@ 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cc      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b68      	ldr	r3, [pc, #416]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90c      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b65      	ldr	r3, [pc, #404]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d044      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b3f      	ldr	r3, [pc, #252]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e067      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b37      	ldr	r3, [pc, #220]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4934      	ldr	r1, [pc, #208]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7ff fbf8 	bl	8002a78 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7ff fbf4 	bl	8002a78 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20c      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b22      	ldr	r3, [pc, #136]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f855 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	@ (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fb58 	bl	80029f0 <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	080086ec 	.word	0x080086ec
 8003358:	2001765c 	.word	0x2001765c
 800335c:	20017660 	.word	0x20017660

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	2001765c 	.word	0x2001765c

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff0 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	080086fc 	.word	0x080086fc

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033a4:	f7ff ffdc 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0b5b      	lsrs	r3, r3, #13
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	@ (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	080086fc 	.word	0x080086fc

080033c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0a6      	sub	sp, #152	@ 0x98
 80033ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ee:	4bc8      	ldr	r3, [pc, #800]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	f200 817e 	bhi.w	80036f8 <HAL_RCC_GetSysClockFreq+0x330>
 80033fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003439 	.word	0x08003439
 8003408:	080036f9 	.word	0x080036f9
 800340c:	080036f9 	.word	0x080036f9
 8003410:	080036f9 	.word	0x080036f9
 8003414:	08003441 	.word	0x08003441
 8003418:	080036f9 	.word	0x080036f9
 800341c:	080036f9 	.word	0x080036f9
 8003420:	080036f9 	.word	0x080036f9
 8003424:	08003449 	.word	0x08003449
 8003428:	080036f9 	.word	0x080036f9
 800342c:	080036f9 	.word	0x080036f9
 8003430:	080036f9 	.word	0x080036f9
 8003434:	080035b3 	.word	0x080035b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4bb6      	ldr	r3, [pc, #728]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x34c>)
 800343a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 800343e:	e15f      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003440:	4bb5      	ldr	r3, [pc, #724]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x350>)
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003446:	e15b      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003448:	4bb1      	ldr	r3, [pc, #708]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003450:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003454:	4bae      	ldr	r3, [pc, #696]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d031      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003460:	4bab      	ldr	r3, [pc, #684]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	2200      	movs	r2, #0
 8003468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800346a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800346c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800346e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003472:	663b      	str	r3, [r7, #96]	@ 0x60
 8003474:	2300      	movs	r3, #0
 8003476:	667b      	str	r3, [r7, #100]	@ 0x64
 8003478:	4ba7      	ldr	r3, [pc, #668]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x350>)
 800347a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800347e:	462a      	mov	r2, r5
 8003480:	fb03 f202 	mul.w	r2, r3, r2
 8003484:	2300      	movs	r3, #0
 8003486:	4621      	mov	r1, r4
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	4aa2      	ldr	r2, [pc, #648]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x350>)
 8003490:	4621      	mov	r1, r4
 8003492:	fba1 1202 	umull	r1, r2, r1, r2
 8003496:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003498:	460a      	mov	r2, r1
 800349a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800349c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800349e:	4413      	add	r3, r2
 80034a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034a6:	2200      	movs	r2, #0
 80034a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80034ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80034b4:	f7fc feae 	bl	8000214 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034c2:	e064      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c4:	4b92      	ldr	r3, [pc, #584]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	2200      	movs	r2, #0
 80034cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80034ce:	657a      	str	r2, [r7, #84]	@ 0x54
 80034d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034d8:	2300      	movs	r3, #0
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034dc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80034e0:	4622      	mov	r2, r4
 80034e2:	462b      	mov	r3, r5
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	0159      	lsls	r1, r3, #5
 80034ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f2:	0150      	lsls	r0, r2, #5
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4621      	mov	r1, r4
 80034fa:	1a51      	subs	r1, r2, r1
 80034fc:	6139      	str	r1, [r7, #16]
 80034fe:	4629      	mov	r1, r5
 8003500:	eb63 0301 	sbc.w	r3, r3, r1
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003512:	4659      	mov	r1, fp
 8003514:	018b      	lsls	r3, r1, #6
 8003516:	4651      	mov	r1, sl
 8003518:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351c:	4651      	mov	r1, sl
 800351e:	018a      	lsls	r2, r1, #6
 8003520:	4651      	mov	r1, sl
 8003522:	ebb2 0801 	subs.w	r8, r2, r1
 8003526:	4659      	mov	r1, fp
 8003528:	eb63 0901 	sbc.w	r9, r3, r1
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003538:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800353c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003540:	4690      	mov	r8, r2
 8003542:	4699      	mov	r9, r3
 8003544:	4623      	mov	r3, r4
 8003546:	eb18 0303 	adds.w	r3, r8, r3
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	462b      	mov	r3, r5
 800354e:	eb49 0303 	adc.w	r3, r9, r3
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003560:	4629      	mov	r1, r5
 8003562:	028b      	lsls	r3, r1, #10
 8003564:	4621      	mov	r1, r4
 8003566:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800356a:	4621      	mov	r1, r4
 800356c:	028a      	lsls	r2, r1, #10
 800356e:	4610      	mov	r0, r2
 8003570:	4619      	mov	r1, r3
 8003572:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003576:	2200      	movs	r2, #0
 8003578:	643b      	str	r3, [r7, #64]	@ 0x40
 800357a:	647a      	str	r2, [r7, #68]	@ 0x44
 800357c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003580:	f7fc fe48 	bl	8000214 <__aeabi_uldivmod>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4613      	mov	r3, r2
 800358a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800358e:	4b60      	ldr	r3, [pc, #384]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	3301      	adds	r3, #1
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80035a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035b0:	e0a6      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b2:	4b57      	ldr	r3, [pc, #348]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035be:	4b54      	ldr	r3, [pc, #336]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d02a      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b51      	ldr	r3, [pc, #324]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	2200      	movs	r2, #0
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035dc:	2100      	movs	r1, #0
 80035de:	4b4e      	ldr	r3, [pc, #312]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x350>)
 80035e0:	fb03 f201 	mul.w	r2, r3, r1
 80035e4:	2300      	movs	r3, #0
 80035e6:	fb00 f303 	mul.w	r3, r0, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x350>)
 80035ee:	fba0 1202 	umull	r1, r2, r0, r2
 80035f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80035f4:	460a      	mov	r2, r1
 80035f6:	673a      	str	r2, [r7, #112]	@ 0x70
 80035f8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035fa:	4413      	add	r3, r2
 80035fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80035fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003602:	2200      	movs	r2, #0
 8003604:	633b      	str	r3, [r7, #48]	@ 0x30
 8003606:	637a      	str	r2, [r7, #52]	@ 0x34
 8003608:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800360c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003610:	f7fc fe00 	bl	8000214 <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4613      	mov	r3, r2
 800361a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800361e:	e05b      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003620:	4b3b      	ldr	r3, [pc, #236]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	2200      	movs	r2, #0
 8003628:	62bb      	str	r3, [r7, #40]	@ 0x28
 800362a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	2300      	movs	r3, #0
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
 8003638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	f04f 0000 	mov.w	r0, #0
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	0159      	lsls	r1, r3, #5
 800364a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800364e:	0150      	lsls	r0, r2, #5
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4641      	mov	r1, r8
 8003656:	ebb2 0a01 	subs.w	sl, r2, r1
 800365a:	4649      	mov	r1, r9
 800365c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800366c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003674:	ebb2 040a 	subs.w	r4, r2, sl
 8003678:	eb63 050b 	sbc.w	r5, r3, fp
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	00eb      	lsls	r3, r5, #3
 8003686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368a:	00e2      	lsls	r2, r4, #3
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	4643      	mov	r3, r8
 8003692:	18e3      	adds	r3, r4, r3
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	464b      	mov	r3, r9
 8003698:	eb45 0303 	adc.w	r3, r5, r3
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036aa:	4629      	mov	r1, r5
 80036ac:	028b      	lsls	r3, r1, #10
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b4:	4621      	mov	r1, r4
 80036b6:	028a      	lsls	r2, r1, #10
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c0:	2200      	movs	r2, #0
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	61fa      	str	r2, [r7, #28]
 80036c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ca:	f7fc fda3 	bl	8000214 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4613      	mov	r3, r2
 80036d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x348>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	0f1b      	lsrs	r3, r3, #28
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80036e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80036f6:	e003      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x34c>)
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80036fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003700:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003704:	4618      	mov	r0, r3
 8003706:	3798      	adds	r7, #152	@ 0x98
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400
 8003718:	017d7840 	.word	0x017d7840

0800371c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e28d      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8083 	beq.w	8003842 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800373c:	4b94      	ldr	r3, [pc, #592]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b04      	cmp	r3, #4
 8003746:	d019      	beq.n	800377c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003748:	4b91      	ldr	r3, [pc, #580]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003750:	2b08      	cmp	r3, #8
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003754:	4b8e      	ldr	r3, [pc, #568]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003760:	d00c      	beq.n	800377c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b8b      	ldr	r3, [pc, #556]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d112      	bne.n	8003794 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376e:	4b88      	ldr	r3, [pc, #544]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800377a:	d10b      	bne.n	8003794 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	4b84      	ldr	r3, [pc, #528]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05b      	beq.n	8003840 <HAL_RCC_OscConfig+0x124>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d157      	bne.n	8003840 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e25a      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x90>
 800379e:	4b7c      	ldr	r3, [pc, #496]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7b      	ldr	r2, [pc, #492]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e01d      	b.n	80037e8 <HAL_RCC_OscConfig+0xcc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0xb4>
 80037b6:	4b76      	ldr	r3, [pc, #472]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a75      	ldr	r2, [pc, #468]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b73      	ldr	r3, [pc, #460]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a72      	ldr	r2, [pc, #456]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e00b      	b.n	80037e8 <HAL_RCC_OscConfig+0xcc>
 80037d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80037e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7ff f942 	bl	8002a78 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f8:	f7ff f93e 	bl	8002a78 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	@ 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e21f      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b61      	ldr	r3, [pc, #388]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0xdc>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7ff f92e 	bl	8002a78 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003820:	f7ff f92a 	bl	8002a78 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	@ 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e20b      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	4b57      	ldr	r3, [pc, #348]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x104>
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d06f      	beq.n	800392e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800384e:	4b50      	ldr	r3, [pc, #320]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800385a:	4b4d      	ldr	r3, [pc, #308]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003862:	2b08      	cmp	r3, #8
 8003864:	d105      	bne.n	8003872 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003866:	4b4a      	ldr	r3, [pc, #296]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003872:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d11c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387e:	4b44      	ldr	r3, [pc, #272]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d116      	bne.n	80038b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	4b41      	ldr	r3, [pc, #260]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_RCC_OscConfig+0x186>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e1d3      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4937      	ldr	r1, [pc, #220]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b6:	e03a      	b.n	800392e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d020      	beq.n	8003902 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c0:	4b34      	ldr	r3, [pc, #208]	@ (8003994 <HAL_RCC_OscConfig+0x278>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7ff f8d7 	bl	8002a78 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ce:	f7ff f8d3 	bl	8002a78 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e1b4      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ec:	4b28      	ldr	r3, [pc, #160]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4925      	ldr	r1, [pc, #148]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]
 8003900:	e015      	b.n	800392e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003902:	4b24      	ldr	r3, [pc, #144]	@ (8003994 <HAL_RCC_OscConfig+0x278>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7ff f8b6 	bl	8002a78 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003910:	f7ff f8b2 	bl	8002a78 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e193      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d036      	beq.n	80039a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d016      	beq.n	8003970 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003942:	4b15      	ldr	r3, [pc, #84]	@ (8003998 <HAL_RCC_OscConfig+0x27c>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7ff f896 	bl	8002a78 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003950:	f7ff f892 	bl	8002a78 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e173      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x234>
 800396e:	e01b      	b.n	80039a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003970:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <HAL_RCC_OscConfig+0x27c>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7ff f87f 	bl	8002a78 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397c:	e00e      	b.n	800399c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397e:	f7ff f87b 	bl	8002a78 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d907      	bls.n	800399c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e15c      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
 8003990:	40023800 	.word	0x40023800
 8003994:	42470000 	.word	0x42470000
 8003998:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399c:	4b8a      	ldr	r3, [pc, #552]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ea      	bne.n	800397e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8097 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b83      	ldr	r3, [pc, #524]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10f      	bne.n	80039e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	4a7e      	ldr	r2, [pc, #504]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e2:	2301      	movs	r3, #1
 80039e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e6:	4b79      	ldr	r3, [pc, #484]	@ (8003bcc <HAL_RCC_OscConfig+0x4b0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d118      	bne.n	8003a24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f2:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <HAL_RCC_OscConfig+0x4b0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	@ (8003bcc <HAL_RCC_OscConfig+0x4b0>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fe:	f7ff f83b 	bl	8002a78 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a06:	f7ff f837 	bl	8002a78 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e118      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	4b6c      	ldr	r3, [pc, #432]	@ (8003bcc <HAL_RCC_OscConfig+0x4b0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x31e>
 8003a2c:	4b66      	ldr	r3, [pc, #408]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a30:	4a65      	ldr	r2, [pc, #404]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a38:	e01c      	b.n	8003a74 <HAL_RCC_OscConfig+0x358>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x340>
 8003a42:	4b61      	ldr	r3, [pc, #388]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a46:	4a60      	ldr	r2, [pc, #384]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4e:	4b5e      	ldr	r3, [pc, #376]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	4a5d      	ldr	r2, [pc, #372]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0x358>
 8003a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a60:	4a59      	ldr	r2, [pc, #356]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a68:	4b57      	ldr	r3, [pc, #348]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6c:	4a56      	ldr	r2, [pc, #344]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	f023 0304 	bic.w	r3, r3, #4
 8003a72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7c:	f7fe fffc 	bl	8002a78 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fe fff8 	bl	8002a78 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0d7      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0ee      	beq.n	8003a84 <HAL_RCC_OscConfig+0x368>
 8003aa6:	e014      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fe ffe6 	bl	8002a78 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fe ffe2 	bl	8002a78 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0c1      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac6:	4b40      	ldr	r3, [pc, #256]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1ee      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d105      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80ad 	beq.w	8003c48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aee:	4b36      	ldr	r3, [pc, #216]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d060      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d145      	bne.n	8003b8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b02:	4b33      	ldr	r3, [pc, #204]	@ (8003bd0 <HAL_RCC_OscConfig+0x4b4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe ffb6 	bl	8002a78 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe ffb2 	bl	8002a78 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e093      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	4b29      	ldr	r3, [pc, #164]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	071b      	lsls	r3, r3, #28
 8003b5a:	491b      	ldr	r1, [pc, #108]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b60:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd0 <HAL_RCC_OscConfig+0x4b4>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fe ff87 	bl	8002a78 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe ff83 	bl	8002a78 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e064      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b80:	4b11      	ldr	r3, [pc, #68]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x452>
 8003b8c:	e05c      	b.n	8003c48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_RCC_OscConfig+0x4b4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe ff70 	bl	8002a78 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe ff6c 	bl	8002a78 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e04d      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x480>
 8003bba:	e045      	b.n	8003c48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e040      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c54 <HAL_RCC_OscConfig+0x538>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d030      	beq.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d129      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d122      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d119      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d10f      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e07b      	b.n	8003d62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d108      	bne.n	8003c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c7a:	d009      	beq.n	8003c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
 8003c82:	e005      	b.n	8003c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fe fca6 	bl	80025fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d14:	ea42 0103 	orr.w	r1, r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0104 	and.w	r1, r3, #4
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	f003 0210 	and.w	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b088      	sub	sp, #32
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	4613      	mov	r3, r2
 8003d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_SPI_Transmit+0x22>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e12d      	b.n	8003fe8 <HAL_SPI_Transmit+0x27e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d94:	f7fe fe70 	bl	8002a78 <HAL_GetTick>
 8003d98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d002      	beq.n	8003db0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003daa:	2302      	movs	r3, #2
 8003dac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dae:	e116      	b.n	8003fde <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_SPI_Transmit+0x52>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dc0:	e10d      	b.n	8003fde <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	88fa      	ldrh	r2, [r7, #6]
 8003dda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e08:	d10f      	bne.n	8003e2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b40      	cmp	r3, #64	@ 0x40
 8003e36:	d007      	beq.n	8003e48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e50:	d14f      	bne.n	8003ef2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0xf6>
 8003e5a:	8afb      	ldrh	r3, [r7, #22]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d142      	bne.n	8003ee6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e84:	e02f      	b.n	8003ee6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d112      	bne.n	8003eba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003eb8:	e015      	b.n	8003ee6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eba:	f7fe fddd 	bl	8002a78 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d803      	bhi.n	8003ed2 <HAL_SPI_Transmit+0x168>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d102      	bne.n	8003ed8 <HAL_SPI_Transmit+0x16e>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003ee4:	e07b      	b.n	8003fde <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ca      	bne.n	8003e86 <HAL_SPI_Transmit+0x11c>
 8003ef0:	e050      	b.n	8003f94 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_SPI_Transmit+0x196>
 8003efa:	8afb      	ldrh	r3, [r7, #22]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d144      	bne.n	8003f8a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f26:	e030      	b.n	8003f8a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d113      	bne.n	8003f5e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f5c:	e015      	b.n	8003f8a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5e:	f7fe fd8b 	bl	8002a78 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d803      	bhi.n	8003f76 <HAL_SPI_Transmit+0x20c>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_Transmit+0x212>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003f88:	e029      	b.n	8003fde <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1c9      	bne.n	8003f28 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	6839      	ldr	r1, [r7, #0]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fa61 	bl	8004460 <SPI_EndRxTxTransaction>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e003      	b.n	8003fde <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ffe:	2301      	movs	r3, #1
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x26>
 8004012:	2302      	movs	r3, #2
 8004014:	e198      	b.n	8004348 <HAL_SPI_TransmitReceive+0x358>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800401e:	f7fe fd2b 	bl	8002a78 <HAL_GetTick>
 8004022:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004038:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800403c:	2b01      	cmp	r3, #1
 800403e:	d00f      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x70>
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004046:	d107      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d103      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x68>
 8004050:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004054:	2b04      	cmp	r3, #4
 8004056:	d003      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004058:	2302      	movs	r3, #2
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800405e:	e16d      	b.n	800433c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x82>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x82>
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d103      	bne.n	800407a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004078:	e160      	b.n	800433c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b04      	cmp	r3, #4
 8004084:	d003      	beq.n	800408e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2205      	movs	r2, #5
 800408a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	887a      	ldrh	r2, [r7, #2]
 800409e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	887a      	ldrh	r2, [r7, #2]
 80040b6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b40      	cmp	r3, #64	@ 0x40
 80040d0:	d007      	beq.n	80040e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ea:	d17c      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x10a>
 80040f4:	8b7b      	ldrh	r3, [r7, #26]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d16a      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	1c9a      	adds	r2, r3, #2
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411e:	e057      	b.n	80041d0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d11b      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x176>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d016      	beq.n	8004166 <HAL_SPI_TransmitReceive+0x176>
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d113      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	881a      	ldrh	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	1c9a      	adds	r2, r3, #2
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d119      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x1b8>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d014      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	b292      	uxth	r2, r2
 800418a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a4:	2301      	movs	r3, #1
 80041a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041a8:	f7fe fc66 	bl	8002a78 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d80b      	bhi.n	80041d0 <HAL_SPI_TransmitReceive+0x1e0>
 80041b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d007      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80041ce:	e0b5      	b.n	800433c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1a2      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x130>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d19d      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x130>
 80041e4:	e080      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x204>
 80041ee:	8b7b      	ldrh	r3, [r7, #26]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d16f      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800421a:	e05b      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d11c      	bne.n	8004264 <HAL_SPI_TransmitReceive+0x274>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d017      	beq.n	8004264 <HAL_SPI_TransmitReceive+0x274>
 8004234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d114      	bne.n	8004264 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d119      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0x2b6>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d014      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042a2:	2301      	movs	r3, #1
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042a6:	f7fe fbe7 	bl	8002a78 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d803      	bhi.n	80042be <HAL_SPI_TransmitReceive+0x2ce>
 80042b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d102      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x2d4>
 80042be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80042d2:	e033      	b.n	800433c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d19e      	bne.n	800421c <HAL_SPI_TransmitReceive+0x22c>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d199      	bne.n	800421c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f8b7 	bl	8004460 <SPI_EndRxTxTransaction>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d006      	beq.n	8004306 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004304:	e01a      	b.n	800433c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004332:	e003      	b.n	800433c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004344:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004348:	4618      	mov	r0, r3
 800434a:	3730      	adds	r7, #48	@ 0x30
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004360:	f7fe fb8a 	bl	8002a78 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	4413      	add	r3, r2
 800436e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004370:	f7fe fb82 	bl	8002a78 <HAL_GetTick>
 8004374:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004376:	4b39      	ldr	r3, [pc, #228]	@ (800445c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	015b      	lsls	r3, r3, #5
 800437c:	0d1b      	lsrs	r3, r3, #20
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004386:	e054      	b.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d050      	beq.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004390:	f7fe fb72 	bl	8002a78 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	429a      	cmp	r2, r3
 800439e:	d902      	bls.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d13d      	bne.n	8004422 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043be:	d111      	bne.n	80043e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c8:	d004      	beq.n	80043d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d2:	d107      	bne.n	80043e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ec:	d10f      	bne.n	800440e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800440c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e017      	b.n	8004452 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3b01      	subs	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	429a      	cmp	r2, r3
 800444e:	d19b      	bne.n	8004388 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	2001765c 	.word	0x2001765c

08004460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2201      	movs	r2, #1
 8004474:	2102      	movs	r1, #2
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff ff6a 	bl	8004350 <SPI_WaitFlagStateUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e032      	b.n	80044f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004492:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <SPI_EndRxTxTransaction+0xa0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <SPI_EndRxTxTransaction+0xa4>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	0d5b      	lsrs	r3, r3, #21
 800449e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044b0:	d112      	bne.n	80044d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2180      	movs	r1, #128	@ 0x80
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff ff47 	bl	8004350 <SPI_WaitFlagStateUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e00f      	b.n	80044f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b80      	cmp	r3, #128	@ 0x80
 80044f0:	d0f2      	beq.n	80044d8 <SPI_EndRxTxTransaction+0x78>
 80044f2:	e000      	b.n	80044f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80044f4:	bf00      	nop
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	2001765c 	.word	0x2001765c
 8004504:	165e9f81 	.word	0x165e9f81

08004508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e042      	b.n	80045a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fe f8ac 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	@ 0x24
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800454a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fdbd 	bl	80050cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	@ 0x28
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d175      	bne.n	80046b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Transmit+0x2c>
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e06e      	b.n	80046b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2221      	movs	r2, #33	@ 0x21
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045e6:	f7fe fa47 	bl	8002a78 <HAL_GetTick>
 80045ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	88fa      	ldrh	r2, [r7, #6]
 80045f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004600:	d108      	bne.n	8004614 <HAL_UART_Transmit+0x6c>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	e003      	b.n	800461c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800461c:	e02e      	b.n	800467c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	2180      	movs	r1, #128	@ 0x80
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fb1f 	bl	8004c6c <UART_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e03a      	b.n	80046b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	3302      	adds	r3, #2
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	e007      	b.n	800466e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	3301      	adds	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1cb      	bne.n	800461e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2200      	movs	r2, #0
 800468e:	2140      	movs	r1, #64	@ 0x40
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 faeb 	bl	8004c6c <UART_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e006      	b.n	80046b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	4613      	mov	r3, r2
 80046ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d112      	bne.n	80046fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Receive_IT+0x26>
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e00b      	b.n	8004700 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fb12 	bl	8004d1e <UART_Start_Receive_IT>
 80046fa:	4603      	mov	r3, r0
 80046fc:	e000      	b.n	8004700 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b0ba      	sub	sp, #232	@ 0xe8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004734:	2300      	movs	r3, #0
 8004736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_UART_IRQHandler+0x66>
 800475a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fbf2 	bl	8004f50 <UART_Receive_IT>
      return;
 800476c:	e25b      	b.n	8004c26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800476e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80de 	beq.w	8004934 <HAL_UART_IRQHandler+0x22c>
 8004778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004788:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80d1 	beq.w	8004934 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <HAL_UART_IRQHandler+0xae>
 800479e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_UART_IRQHandler+0xd2>
 80047c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	f043 0202 	orr.w	r2, r3, #2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_UART_IRQHandler+0xf6>
 80047e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d011      	beq.n	800482e <HAL_UART_IRQHandler+0x126>
 800480a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d105      	bne.n	8004822 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004826:	f043 0208 	orr.w	r2, r3, #8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 81f2 	beq.w	8004c1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_UART_IRQHandler+0x14e>
 8004844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb7d 	bl	8004f50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004860:	2b40      	cmp	r3, #64	@ 0x40
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d103      	bne.n	8004882 <HAL_UART_IRQHandler+0x17a>
 800487a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d04f      	beq.n	8004922 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa85 	bl	8004d92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004892:	2b40      	cmp	r3, #64	@ 0x40
 8004894:	d141      	bne.n	800491a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3314      	adds	r3, #20
 80048be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1d9      	bne.n	8004896 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d013      	beq.n	8004912 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	4a7e      	ldr	r2, [pc, #504]	@ (8004ae8 <HAL_UART_IRQHandler+0x3e0>)
 80048f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fa7c 	bl	8002df4 <HAL_DMA_Abort_IT>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d016      	beq.n	8004930 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800490c:	4610      	mov	r0, r2
 800490e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	e00e      	b.n	8004930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f994 	bl	8004c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	e00a      	b.n	8004930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f990 	bl	8004c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	e006      	b.n	8004930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f98c 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800492e:	e175      	b.n	8004c1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	bf00      	nop
    return;
 8004932:	e173      	b.n	8004c1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 814f 	bne.w	8004bdc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8148 	beq.w	8004bdc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8141 	beq.w	8004bdc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497a:	2b40      	cmp	r3, #64	@ 0x40
 800497c:	f040 80b6 	bne.w	8004aec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800498c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8145 	beq.w	8004c20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800499a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800499e:	429a      	cmp	r2, r3
 80049a0:	f080 813e 	bcs.w	8004c20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b6:	f000 8088 	beq.w	8004aca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80049e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1d9      	bne.n	80049ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e1      	bne.n	8004a06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e3      	bne.n	8004a42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a9a:	f023 0310 	bic.w	r3, r3, #16
 8004a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004aac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004aae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ab2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e3      	bne.n	8004a88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe f925 	bl	8002d14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8b7 	bl	8004c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ae6:	e09b      	b.n	8004c20 <HAL_UART_IRQHandler+0x518>
 8004ae8:	08004e59 	.word	0x08004e59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 808e 	beq.w	8004c24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8089 	beq.w	8004c24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b36:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e3      	bne.n	8004b12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	623b      	str	r3, [r7, #32]
   return(result);
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3314      	adds	r3, #20
 8004b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e3      	bne.n	8004b4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0310 	bic.w	r3, r3, #16
 8004ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004bb4:	61fa      	str	r2, [r7, #28]
 8004bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e3      	bne.n	8004b90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f83d 	bl	8004c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bda:	e023      	b.n	8004c24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <HAL_UART_IRQHandler+0x4f4>
 8004be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f943 	bl	8004e80 <UART_Transmit_IT>
    return;
 8004bfa:	e014      	b.n	8004c26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <HAL_UART_IRQHandler+0x51e>
 8004c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f983 	bl	8004f20 <UART_EndTransmit_IT>
    return;
 8004c1a:	e004      	b.n	8004c26 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c1c:	bf00      	nop
 8004c1e:	e002      	b.n	8004c26 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c20:	bf00      	nop
 8004c22:	e000      	b.n	8004c26 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c24:	bf00      	nop
  }
}
 8004c26:	37e8      	adds	r7, #232	@ 0xe8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7c:	e03b      	b.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d037      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c86:	f7fd fef7 	bl	8002a78 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e03a      	b.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d023      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b80      	cmp	r3, #128	@ 0x80
 8004cb2:	d020      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b40      	cmp	r3, #64	@ 0x40
 8004cb8:	d01d      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d116      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f857 	bl	8004d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e00f      	b.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	bf0c      	ite	eq
 8004d06:	2301      	moveq	r3, #1
 8004d08:	2300      	movne	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d0b4      	beq.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2222      	movs	r2, #34	@ 0x22
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0220 	orr.w	r2, r2, #32
 8004d82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b095      	sub	sp, #84	@ 0x54
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	330c      	adds	r3, #12
 8004db8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dba:	643a      	str	r2, [r7, #64]	@ 0x40
 8004dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3314      	adds	r3, #20
 8004dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3314      	adds	r3, #20
 8004dec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e5      	bne.n	8004dce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d119      	bne.n	8004e3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f023 0310 	bic.w	r3, r3, #16
 8004e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e2a:	61ba      	str	r2, [r7, #24]
 8004e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	6979      	ldr	r1, [r7, #20]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	613b      	str	r3, [r7, #16]
   return(result);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e5      	bne.n	8004e0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e4c:	bf00      	nop
 8004e4e:	3754      	adds	r7, #84	@ 0x54
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fee4 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b21      	cmp	r3, #33	@ 0x21
 8004e92:	d13e      	bne.n	8004f12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9c:	d114      	bne.n	8004ec8 <UART_Transmit_IT+0x48>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d110      	bne.n	8004ec8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	621a      	str	r2, [r3, #32]
 8004ec6:	e008      	b.n	8004eda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	1c59      	adds	r1, r3, #1
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6211      	str	r1, [r2, #32]
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004efc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e000      	b.n	8004f14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f12:	2302      	movs	r3, #2
  }
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff fe73 	bl	8004c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	@ 0x30
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b22      	cmp	r3, #34	@ 0x22
 8004f62:	f040 80ae 	bne.w	80050c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6e:	d117      	bne.n	8004fa0 <UART_Receive_IT+0x50>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f98:	1c9a      	adds	r2, r3, #2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f9e:	e026      	b.n	8004fee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb2:	d007      	beq.n	8004fc4 <UART_Receive_IT+0x74>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <UART_Receive_IT+0x82>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e008      	b.n	8004fe4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d15d      	bne.n	80050be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0220 	bic.w	r2, r2, #32
 8005010:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005020:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005044:	2b01      	cmp	r3, #1
 8005046:	d135      	bne.n	80050b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	330c      	adds	r3, #12
 8005054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	613b      	str	r3, [r7, #16]
   return(result);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f023 0310 	bic.w	r3, r3, #16
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506e:	623a      	str	r2, [r7, #32]
 8005070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	69f9      	ldr	r1, [r7, #28]
 8005074:	6a3a      	ldr	r2, [r7, #32]
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	61bb      	str	r3, [r7, #24]
   return(result);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e5      	bne.n	800504e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b10      	cmp	r3, #16
 800508e:	d10a      	bne.n	80050a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fdd1 	bl	8004c54 <HAL_UARTEx_RxEventCallback>
 80050b2:	e002      	b.n	80050ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7fd f98b 	bl	80023d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e002      	b.n	80050c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e000      	b.n	80050c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
  }
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3730      	adds	r7, #48	@ 0x30
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b0c0      	sub	sp, #256	@ 0x100
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	68d9      	ldr	r1, [r3, #12]
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	ea40 0301 	orr.w	r3, r0, r1
 80050f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	431a      	orrs	r2, r3
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	431a      	orrs	r2, r3
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005124:	f021 010c 	bic.w	r1, r1, #12
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005132:	430b      	orrs	r3, r1
 8005134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	6999      	ldr	r1, [r3, #24]
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	ea40 0301 	orr.w	r3, r0, r1
 8005152:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b8f      	ldr	r3, [pc, #572]	@ (8005398 <UART_SetConfig+0x2cc>)
 800515c:	429a      	cmp	r2, r3
 800515e:	d005      	beq.n	800516c <UART_SetConfig+0xa0>
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b8d      	ldr	r3, [pc, #564]	@ (800539c <UART_SetConfig+0x2d0>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d104      	bne.n	8005176 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800516c:	f7fe f918 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8005170:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005174:	e003      	b.n	800517e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005176:	f7fe f8ff 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 800517a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005188:	f040 810c 	bne.w	80053a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800518c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005190:	2200      	movs	r2, #0
 8005192:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005196:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800519a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800519e:	4622      	mov	r2, r4
 80051a0:	462b      	mov	r3, r5
 80051a2:	1891      	adds	r1, r2, r2
 80051a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051a6:	415b      	adcs	r3, r3
 80051a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051ae:	4621      	mov	r1, r4
 80051b0:	eb12 0801 	adds.w	r8, r2, r1
 80051b4:	4629      	mov	r1, r5
 80051b6:	eb43 0901 	adc.w	r9, r3, r1
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ce:	4690      	mov	r8, r2
 80051d0:	4699      	mov	r9, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	eb18 0303 	adds.w	r3, r8, r3
 80051d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051dc:	462b      	mov	r3, r5
 80051de:	eb49 0303 	adc.w	r3, r9, r3
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051fa:	460b      	mov	r3, r1
 80051fc:	18db      	adds	r3, r3, r3
 80051fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005200:	4613      	mov	r3, r2
 8005202:	eb42 0303 	adc.w	r3, r2, r3
 8005206:	657b      	str	r3, [r7, #84]	@ 0x54
 8005208:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800520c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005210:	f7fb f800 	bl	8000214 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4b61      	ldr	r3, [pc, #388]	@ (80053a0 <UART_SetConfig+0x2d4>)
 800521a:	fba3 2302 	umull	r2, r3, r3, r2
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	011c      	lsls	r4, r3, #4
 8005222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005226:	2200      	movs	r2, #0
 8005228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800522c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005230:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	1891      	adds	r1, r2, r2
 800523a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800523c:	415b      	adcs	r3, r3
 800523e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005240:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005244:	4641      	mov	r1, r8
 8005246:	eb12 0a01 	adds.w	sl, r2, r1
 800524a:	4649      	mov	r1, r9
 800524c:	eb43 0b01 	adc.w	fp, r3, r1
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800525c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005264:	4692      	mov	sl, r2
 8005266:	469b      	mov	fp, r3
 8005268:	4643      	mov	r3, r8
 800526a:	eb1a 0303 	adds.w	r3, sl, r3
 800526e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005272:	464b      	mov	r3, r9
 8005274:	eb4b 0303 	adc.w	r3, fp, r3
 8005278:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005288:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800528c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005290:	460b      	mov	r3, r1
 8005292:	18db      	adds	r3, r3, r3
 8005294:	643b      	str	r3, [r7, #64]	@ 0x40
 8005296:	4613      	mov	r3, r2
 8005298:	eb42 0303 	adc.w	r3, r2, r3
 800529c:	647b      	str	r3, [r7, #68]	@ 0x44
 800529e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052a6:	f7fa ffb5 	bl	8000214 <__aeabi_uldivmod>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4611      	mov	r1, r2
 80052b0:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <UART_SetConfig+0x2d4>)
 80052b2:	fba3 2301 	umull	r2, r3, r3, r1
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2264      	movs	r2, #100	@ 0x64
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	1acb      	subs	r3, r1, r3
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052c6:	4b36      	ldr	r3, [pc, #216]	@ (80053a0 <UART_SetConfig+0x2d4>)
 80052c8:	fba3 2302 	umull	r2, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052d4:	441c      	add	r4, r3
 80052d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052e8:	4642      	mov	r2, r8
 80052ea:	464b      	mov	r3, r9
 80052ec:	1891      	adds	r1, r2, r2
 80052ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052f0:	415b      	adcs	r3, r3
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052f8:	4641      	mov	r1, r8
 80052fa:	1851      	adds	r1, r2, r1
 80052fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80052fe:	4649      	mov	r1, r9
 8005300:	414b      	adcs	r3, r1
 8005302:	637b      	str	r3, [r7, #52]	@ 0x34
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005310:	4659      	mov	r1, fp
 8005312:	00cb      	lsls	r3, r1, #3
 8005314:	4651      	mov	r1, sl
 8005316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531a:	4651      	mov	r1, sl
 800531c:	00ca      	lsls	r2, r1, #3
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	4603      	mov	r3, r0
 8005324:	4642      	mov	r2, r8
 8005326:	189b      	adds	r3, r3, r2
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800532c:	464b      	mov	r3, r9
 800532e:	460a      	mov	r2, r1
 8005330:	eb42 0303 	adc.w	r3, r2, r3
 8005334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005344:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800534c:	460b      	mov	r3, r1
 800534e:	18db      	adds	r3, r3, r3
 8005350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005352:	4613      	mov	r3, r2
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800535a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800535e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005362:	f7fa ff57 	bl	8000214 <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <UART_SetConfig+0x2d4>)
 800536c:	fba3 1302 	umull	r1, r3, r3, r2
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	2164      	movs	r1, #100	@ 0x64
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	3332      	adds	r3, #50	@ 0x32
 800537e:	4a08      	ldr	r2, [pc, #32]	@ (80053a0 <UART_SetConfig+0x2d4>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	f003 0207 	and.w	r2, r3, #7
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4422      	add	r2, r4
 8005392:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005394:	e106      	b.n	80055a4 <UART_SetConfig+0x4d8>
 8005396:	bf00      	nop
 8005398:	40011000 	.word	0x40011000
 800539c:	40011400 	.word	0x40011400
 80053a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053b6:	4642      	mov	r2, r8
 80053b8:	464b      	mov	r3, r9
 80053ba:	1891      	adds	r1, r2, r2
 80053bc:	6239      	str	r1, [r7, #32]
 80053be:	415b      	adcs	r3, r3
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053c6:	4641      	mov	r1, r8
 80053c8:	1854      	adds	r4, r2, r1
 80053ca:	4649      	mov	r1, r9
 80053cc:	eb43 0501 	adc.w	r5, r3, r1
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	00eb      	lsls	r3, r5, #3
 80053da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053de:	00e2      	lsls	r2, r4, #3
 80053e0:	4614      	mov	r4, r2
 80053e2:	461d      	mov	r5, r3
 80053e4:	4643      	mov	r3, r8
 80053e6:	18e3      	adds	r3, r4, r3
 80053e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053ec:	464b      	mov	r3, r9
 80053ee:	eb45 0303 	adc.w	r3, r5, r3
 80053f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005402:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005412:	4629      	mov	r1, r5
 8005414:	008b      	lsls	r3, r1, #2
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800541c:	4621      	mov	r1, r4
 800541e:	008a      	lsls	r2, r1, #2
 8005420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005424:	f7fa fef6 	bl	8000214 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4b60      	ldr	r3, [pc, #384]	@ (80055b0 <UART_SetConfig+0x4e4>)
 800542e:	fba3 2302 	umull	r2, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	011c      	lsls	r4, r3, #4
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005440:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005444:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	61b9      	str	r1, [r7, #24]
 8005450:	415b      	adcs	r3, r3
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005458:	4641      	mov	r1, r8
 800545a:	1851      	adds	r1, r2, r1
 800545c:	6139      	str	r1, [r7, #16]
 800545e:	4649      	mov	r1, r9
 8005460:	414b      	adcs	r3, r1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005470:	4659      	mov	r1, fp
 8005472:	00cb      	lsls	r3, r1, #3
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547a:	4651      	mov	r1, sl
 800547c:	00ca      	lsls	r2, r1, #3
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	4603      	mov	r3, r0
 8005484:	4642      	mov	r2, r8
 8005486:	189b      	adds	r3, r3, r2
 8005488:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800548c:	464b      	mov	r3, r9
 800548e:	460a      	mov	r2, r1
 8005490:	eb42 0303 	adc.w	r3, r2, r3
 8005494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054b0:	4649      	mov	r1, r9
 80054b2:	008b      	lsls	r3, r1, #2
 80054b4:	4641      	mov	r1, r8
 80054b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ba:	4641      	mov	r1, r8
 80054bc:	008a      	lsls	r2, r1, #2
 80054be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054c2:	f7fa fea7 	bl	8000214 <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4611      	mov	r1, r2
 80054cc:	4b38      	ldr	r3, [pc, #224]	@ (80055b0 <UART_SetConfig+0x4e4>)
 80054ce:	fba3 2301 	umull	r2, r3, r3, r1
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	2264      	movs	r2, #100	@ 0x64
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	1acb      	subs	r3, r1, r3
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	3332      	adds	r3, #50	@ 0x32
 80054e0:	4a33      	ldr	r2, [pc, #204]	@ (80055b0 <UART_SetConfig+0x4e4>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054ec:	441c      	add	r4, r3
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80054f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80054f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	1891      	adds	r1, r2, r2
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	415b      	adcs	r3, r3
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550c:	4641      	mov	r1, r8
 800550e:	1851      	adds	r1, r2, r1
 8005510:	6039      	str	r1, [r7, #0]
 8005512:	4649      	mov	r1, r9
 8005514:	414b      	adcs	r3, r1
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005524:	4659      	mov	r1, fp
 8005526:	00cb      	lsls	r3, r1, #3
 8005528:	4651      	mov	r1, sl
 800552a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552e:	4651      	mov	r1, sl
 8005530:	00ca      	lsls	r2, r1, #3
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	4603      	mov	r3, r0
 8005538:	4642      	mov	r2, r8
 800553a:	189b      	adds	r3, r3, r2
 800553c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800553e:	464b      	mov	r3, r9
 8005540:	460a      	mov	r2, r1
 8005542:	eb42 0303 	adc.w	r3, r2, r3
 8005546:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	663b      	str	r3, [r7, #96]	@ 0x60
 8005552:	667a      	str	r2, [r7, #100]	@ 0x64
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005560:	4649      	mov	r1, r9
 8005562:	008b      	lsls	r3, r1, #2
 8005564:	4641      	mov	r1, r8
 8005566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556a:	4641      	mov	r1, r8
 800556c:	008a      	lsls	r2, r1, #2
 800556e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005572:	f7fa fe4f 	bl	8000214 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4b0d      	ldr	r3, [pc, #52]	@ (80055b0 <UART_SetConfig+0x4e4>)
 800557c:	fba3 1302 	umull	r1, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	2164      	movs	r1, #100	@ 0x64
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	3332      	adds	r3, #50	@ 0x32
 800558e:	4a08      	ldr	r2, [pc, #32]	@ (80055b0 <UART_SetConfig+0x4e4>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 020f 	and.w	r2, r3, #15
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4422      	add	r2, r4
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055aa:	46bd      	mov	sp, r7
 80055ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b0:	51eb851f 	.word	0x51eb851f

080055b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055b8:	4904      	ldr	r1, [pc, #16]	@ (80055cc <MX_FATFS_Init+0x18>)
 80055ba:	4805      	ldr	r0, [pc, #20]	@ (80055d0 <MX_FATFS_Init+0x1c>)
 80055bc:	f002 fea4 	bl	8008308 <FATFS_LinkDriver>
 80055c0:	4603      	mov	r3, r0
 80055c2:	461a      	mov	r2, r3
 80055c4:	4b03      	ldr	r3, [pc, #12]	@ (80055d4 <MX_FATFS_Init+0x20>)
 80055c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80055c8:	bf00      	nop
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	2001e0e0 	.word	0x2001e0e0
 80055d0:	20017668 	.word	0x20017668
 80055d4:	2001e0dc 	.word	0x2001e0dc

080055d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80055dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80055de:	4618      	mov	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  //  Stat = STA_NOINIT;
  //  return Stat;
 SD_disk_initialize (pdrv);
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb f939 	bl	800086c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80055fa:	bf00      	nop
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  //  Stat = STA_NOINIT;
  //  return Stat;
 SD_disk_status (pdrv);
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	4618      	mov	r0, r3
 8005612:	f7fb fa11 	bl	8000a38 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8005616:	bf00      	nop
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
   // return RES_OK;
	SD_disk_read (pdrv,buff,sector,count);
 8005630:	7bf8      	ldrb	r0, [r7, #15]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	f7fb fa14 	bl	8000a64 <SD_disk_read>
  /* USER CODE END READ */
}
 800563c:	bf00      	nop
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	4603      	mov	r3, r0
 8005654:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff, sector,count);
 8005656:	7bf8      	ldrb	r0, [r7, #15]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	f7fb fa6b 	bl	8000b38 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8005662:	bf00      	nop
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	603a      	str	r2, [r7, #0]
 8005676:	71fb      	strb	r3, [r7, #7]
 8005678:	460b      	mov	r3, r1
 800567a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   // DRESULT res = RES_ERROR;
  //  return res;
SD_disk_ioctl (pdrv,cmd,buff);
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	79b9      	ldrb	r1, [r7, #6]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7fb fadc 	bl	8000c40 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8005688:	bf00      	nop
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	4a08      	ldr	r2, [pc, #32]	@ (80056c4 <disk_status+0x30>)
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	79fa      	ldrb	r2, [r7, #7]
 80056ac:	4905      	ldr	r1, [pc, #20]	@ (80056c4 <disk_status+0x30>)
 80056ae:	440a      	add	r2, r1
 80056b0:	7a12      	ldrb	r2, [r2, #8]
 80056b2:	4610      	mov	r0, r2
 80056b4:	4798      	blx	r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	2001e30c 	.word	0x2001e30c

080056c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005714 <disk_initialize+0x4c>)
 80056da:	5cd3      	ldrb	r3, [r2, r3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d114      	bne.n	800570a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005714 <disk_initialize+0x4c>)
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	79fa      	ldrb	r2, [r7, #7]
 80056ee:	4909      	ldr	r1, [pc, #36]	@ (8005714 <disk_initialize+0x4c>)
 80056f0:	440a      	add	r2, r1
 80056f2:	7a12      	ldrb	r2, [r2, #8]
 80056f4:	4610      	mov	r0, r2
 80056f6:	4798      	blx	r3
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	4a03      	ldr	r2, [pc, #12]	@ (8005714 <disk_initialize+0x4c>)
 8005706:	2101      	movs	r1, #1
 8005708:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	2001e30c 	.word	0x2001e30c

08005718 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4603      	mov	r3, r0
 8005726:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	4a0a      	ldr	r2, [pc, #40]	@ (8005754 <disk_read+0x3c>)
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	689c      	ldr	r4, [r3, #8]
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	4a07      	ldr	r2, [pc, #28]	@ (8005754 <disk_read+0x3c>)
 8005738:	4413      	add	r3, r2
 800573a:	7a18      	ldrb	r0, [r3, #8]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	47a0      	blx	r4
 8005744:	4603      	mov	r3, r0
 8005746:	75fb      	strb	r3, [r7, #23]
  return res;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
}
 800574a:	4618      	mov	r0, r3
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd90      	pop	{r4, r7, pc}
 8005752:	bf00      	nop
 8005754:	2001e30c 	.word	0x2001e30c

08005758 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005758:	b590      	push	{r4, r7, lr}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	4a0a      	ldr	r2, [pc, #40]	@ (8005794 <disk_write+0x3c>)
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68dc      	ldr	r4, [r3, #12]
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	4a07      	ldr	r2, [pc, #28]	@ (8005794 <disk_write+0x3c>)
 8005778:	4413      	add	r3, r2
 800577a:	7a18      	ldrb	r0, [r3, #8]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	47a0      	blx	r4
 8005784:	4603      	mov	r3, r0
 8005786:	75fb      	strb	r3, [r7, #23]
  return res;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
}
 800578a:	4618      	mov	r0, r3
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd90      	pop	{r4, r7, pc}
 8005792:	bf00      	nop
 8005794:	2001e30c 	.word	0x2001e30c

08005798 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	603a      	str	r2, [r7, #0]
 80057a2:	71fb      	strb	r3, [r7, #7]
 80057a4:	460b      	mov	r3, r1
 80057a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	4a09      	ldr	r2, [pc, #36]	@ (80057d0 <disk_ioctl+0x38>)
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	79fa      	ldrb	r2, [r7, #7]
 80057b6:	4906      	ldr	r1, [pc, #24]	@ (80057d0 <disk_ioctl+0x38>)
 80057b8:	440a      	add	r2, r1
 80057ba:	7a10      	ldrb	r0, [r2, #8]
 80057bc:	79b9      	ldrb	r1, [r7, #6]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	4798      	blx	r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	2001e30c 	.word	0x2001e30c

080057d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3301      	adds	r3, #1
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80057e4:	89fb      	ldrh	r3, [r7, #14]
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	b21a      	sxth	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b21b      	sxth	r3, r3
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b21b      	sxth	r3, r3
 80057f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80057f6:	89fb      	ldrh	r3, [r7, #14]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3303      	adds	r3, #3
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	3202      	adds	r2, #2
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	3201      	adds	r2, #1
 800582a:	7812      	ldrb	r2, [r2, #0]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	7812      	ldrb	r2, [r2, #0]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
	return rv;
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	887a      	ldrh	r2, [r7, #2]
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	887b      	ldrh	r3, [r7, #2]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	0a1b      	lsrs	r3, r3, #8
 80058ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00d      	beq.n	800590e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	1c53      	adds	r3, r2, #1
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	6179      	str	r1, [r7, #20]
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3b01      	subs	r3, #1
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f1      	bne.n	80058f2 <mem_cpy+0x1a>
	}
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800591a:	b480      	push	{r7}
 800591c:	b087      	sub	sp, #28
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	617a      	str	r2, [r7, #20]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3b01      	subs	r3, #1
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f3      	bne.n	800592a <mem_set+0x10>
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005950:	b480      	push	{r7}
 8005952:	b089      	sub	sp, #36	@ 0x24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	61fa      	str	r2, [r7, #28]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	4619      	mov	r1, r3
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	61ba      	str	r2, [r7, #24]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	1acb      	subs	r3, r1, r3
 800597c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3b01      	subs	r3, #1
 8005982:	607b      	str	r3, [r7, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <mem_cmp+0x40>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0eb      	beq.n	8005968 <mem_cmp+0x18>

	return r;
 8005990:	697b      	ldr	r3, [r7, #20]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3724      	adds	r7, #36	@ 0x24
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059a8:	e002      	b.n	80059b0 <chk_chr+0x12>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3301      	adds	r3, #1
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <chk_chr+0x26>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d1f2      	bne.n	80059aa <chk_chr+0xc>
	return *str;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	781b      	ldrb	r3, [r3, #0]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e029      	b.n	8005a3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80059e8:	4a27      	ldr	r2, [pc, #156]	@ (8005a88 <chk_lock+0xb4>)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	4413      	add	r3, r2
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01d      	beq.n	8005a32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80059f6:	4a24      	ldr	r2, [pc, #144]	@ (8005a88 <chk_lock+0xb4>)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	4413      	add	r3, r2
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d116      	bne.n	8005a36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a08:	4a1f      	ldr	r2, [pc, #124]	@ (8005a88 <chk_lock+0xb4>)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	4413      	add	r3, r2
 8005a10:	3304      	adds	r3, #4
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d10c      	bne.n	8005a36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a88 <chk_lock+0xb4>)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	4413      	add	r3, r2
 8005a24:	3308      	adds	r3, #8
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d102      	bne.n	8005a36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a30:	e007      	b.n	8005a42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a32:	2301      	movs	r3, #1
 8005a34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d9d2      	bls.n	80059e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d109      	bne.n	8005a5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <chk_lock+0x80>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d101      	bne.n	8005a58 <chk_lock+0x84>
 8005a54:	2300      	movs	r3, #0
 8005a56:	e010      	b.n	8005a7a <chk_lock+0xa6>
 8005a58:	2312      	movs	r3, #18
 8005a5a:	e00e      	b.n	8005a7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d108      	bne.n	8005a74 <chk_lock+0xa0>
 8005a62:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <chk_lock+0xb4>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	4413      	add	r3, r2
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a72:	d101      	bne.n	8005a78 <chk_lock+0xa4>
 8005a74:	2310      	movs	r3, #16
 8005a76:	e000      	b.n	8005a7a <chk_lock+0xa6>
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	2001e0ec 	.word	0x2001e0ec

08005a8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	e002      	b.n	8005a9e <enq_lock+0x12>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d806      	bhi.n	8005ab2 <enq_lock+0x26>
 8005aa4:	4a09      	ldr	r2, [pc, #36]	@ (8005acc <enq_lock+0x40>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	4413      	add	r3, r2
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f2      	bne.n	8005a98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	2001e0ec 	.word	0x2001e0ec

08005ad0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e01f      	b.n	8005b20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ae0:	4a41      	ldr	r2, [pc, #260]	@ (8005be8 <inc_lock+0x118>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	4413      	add	r3, r2
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d113      	bne.n	8005b1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005af2:	4a3d      	ldr	r2, [pc, #244]	@ (8005be8 <inc_lock+0x118>)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	4413      	add	r3, r2
 8005afa:	3304      	adds	r3, #4
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d109      	bne.n	8005b1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b06:	4a38      	ldr	r2, [pc, #224]	@ (8005be8 <inc_lock+0x118>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3308      	adds	r3, #8
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d006      	beq.n	8005b28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d9dc      	bls.n	8005ae0 <inc_lock+0x10>
 8005b26:	e000      	b.n	8005b2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d132      	bne.n	8005b96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e002      	b.n	8005b3c <inc_lock+0x6c>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d806      	bhi.n	8005b50 <inc_lock+0x80>
 8005b42:	4a29      	ldr	r2, [pc, #164]	@ (8005be8 <inc_lock+0x118>)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4413      	add	r3, r2
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1f2      	bne.n	8005b36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d101      	bne.n	8005b5a <inc_lock+0x8a>
 8005b56:	2300      	movs	r3, #0
 8005b58:	e040      	b.n	8005bdc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4922      	ldr	r1, [pc, #136]	@ (8005be8 <inc_lock+0x118>)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	440b      	add	r3, r1
 8005b66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	491e      	ldr	r1, [pc, #120]	@ (8005be8 <inc_lock+0x118>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	440b      	add	r3, r1
 8005b74:	3304      	adds	r3, #4
 8005b76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	491a      	ldr	r1, [pc, #104]	@ (8005be8 <inc_lock+0x118>)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	440b      	add	r3, r1
 8005b84:	3308      	adds	r3, #8
 8005b86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b88:	4a17      	ldr	r2, [pc, #92]	@ (8005be8 <inc_lock+0x118>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	4413      	add	r3, r2
 8005b90:	330c      	adds	r3, #12
 8005b92:	2200      	movs	r2, #0
 8005b94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d009      	beq.n	8005bb0 <inc_lock+0xe0>
 8005b9c:	4a12      	ldr	r2, [pc, #72]	@ (8005be8 <inc_lock+0x118>)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	4413      	add	r3, r2
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <inc_lock+0xe0>
 8005bac:	2300      	movs	r3, #0
 8005bae:	e015      	b.n	8005bdc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d108      	bne.n	8005bc8 <inc_lock+0xf8>
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005be8 <inc_lock+0x118>)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	4413      	add	r3, r2
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	e001      	b.n	8005bcc <inc_lock+0xfc>
 8005bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bcc:	4906      	ldr	r1, [pc, #24]	@ (8005be8 <inc_lock+0x118>)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	440b      	add	r3, r1
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	2001e0ec 	.word	0x2001e0ec

08005bec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d825      	bhi.n	8005c4c <dec_lock+0x60>
		n = Files[i].ctr;
 8005c00:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <dec_lock+0x74>)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	4413      	add	r3, r2
 8005c08:	330c      	adds	r3, #12
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c0e:	89fb      	ldrh	r3, [r7, #14]
 8005c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c14:	d101      	bne.n	8005c1a <dec_lock+0x2e>
 8005c16:	2300      	movs	r3, #0
 8005c18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c1a:	89fb      	ldrh	r3, [r7, #14]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <dec_lock+0x3a>
 8005c20:	89fb      	ldrh	r3, [r7, #14]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c26:	4a0e      	ldr	r2, [pc, #56]	@ (8005c60 <dec_lock+0x74>)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	4413      	add	r3, r2
 8005c2e:	330c      	adds	r3, #12
 8005c30:	89fa      	ldrh	r2, [r7, #14]
 8005c32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c34:	89fb      	ldrh	r3, [r7, #14]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <dec_lock+0x5a>
 8005c3a:	4a09      	ldr	r2, [pc, #36]	@ (8005c60 <dec_lock+0x74>)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	4413      	add	r3, r2
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	737b      	strb	r3, [r7, #13]
 8005c4a:	e001      	b.n	8005c50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c50:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	2001e0ec 	.word	0x2001e0ec

08005c64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e010      	b.n	8005c94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c72:	4a0d      	ldr	r2, [pc, #52]	@ (8005ca8 <clear_lock+0x44>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	4413      	add	r3, r2
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d105      	bne.n	8005c8e <clear_lock+0x2a>
 8005c82:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <clear_lock+0x44>)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	4413      	add	r3, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d9eb      	bls.n	8005c72 <clear_lock+0xe>
	}
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	2001e0ec 	.word	0x2001e0ec

08005cac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	78db      	ldrb	r3, [r3, #3]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d034      	beq.n	8005d2a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	7858      	ldrb	r0, [r3, #1]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	f7ff fd40 	bl	8005758 <disk_write>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
 8005ce2:	e022      	b.n	8005d2a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d217      	bcs.n	8005d2a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	789b      	ldrb	r3, [r3, #2]
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	e010      	b.n	8005d24 <sync_window+0x78>
					wsect += fs->fsize;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7858      	ldrb	r0, [r3, #1]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d16:	2301      	movs	r3, #1
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	f7ff fd1d 	bl	8005758 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d8eb      	bhi.n	8005d02 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d01b      	beq.n	8005d84 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ffad 	bl	8005cac <sync_window>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d113      	bne.n	8005d84 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7858      	ldrb	r0, [r3, #1]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d66:	2301      	movs	r3, #1
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	f7ff fcd5 	bl	8005718 <disk_read>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295
 8005d78:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ff87 	bl	8005cac <sync_window>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d159      	bne.n	8005e5c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d149      	bne.n	8005e44 <sync_fs+0xb4>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	791b      	ldrb	r3, [r3, #4]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d145      	bne.n	8005e44 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	899b      	ldrh	r3, [r3, #12]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	f7ff fda8 	bl	800591a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3338      	adds	r3, #56	@ 0x38
 8005dce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005dd2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fd37 	bl	800584a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3338      	adds	r3, #56	@ 0x38
 8005de0:	4921      	ldr	r1, [pc, #132]	@ (8005e68 <sync_fs+0xd8>)
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fd4c 	bl	8005880 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3338      	adds	r3, #56	@ 0x38
 8005dec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005df0:	491e      	ldr	r1, [pc, #120]	@ (8005e6c <sync_fs+0xdc>)
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fd44 	bl	8005880 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3338      	adds	r3, #56	@ 0x38
 8005dfc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7ff fd3a 	bl	8005880 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3338      	adds	r3, #56	@ 0x38
 8005e10:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7ff fd30 	bl	8005880 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	7858      	ldrb	r0, [r3, #1]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f7ff fc8d 	bl	8005758 <disk_write>
			fs->fsi_flag = 0;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fca3 	bl	8005798 <disk_ioctl>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <sync_fs+0xcc>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	41615252 	.word	0x41615252
 8005e6c:	61417272 	.word	0x61417272

08005e70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	3b02      	subs	r3, #2
 8005e7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	3b02      	subs	r3, #2
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d301      	bcc.n	8005e90 <clust2sect+0x20>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e008      	b.n	8005ea2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	895b      	ldrh	r3, [r3, #10]
 8005e94:	461a      	mov	r2, r3
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	fb03 f202 	mul.w	r2, r3, r2
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea0:	4413      	add	r3, r2
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d904      	bls.n	8005ece <get_fat+0x20>
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005ece:	2301      	movs	r3, #1
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e0ba      	b.n	800604a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	f000 8082 	beq.w	8005fe8 <get_fat+0x13a>
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	f300 80a6 	bgt.w	8006036 <get_fat+0x188>
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d002      	beq.n	8005ef4 <get_fat+0x46>
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d055      	beq.n	8005f9e <get_fat+0xf0>
 8005ef2:	e0a0      	b.n	8006036 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	899b      	ldrh	r3, [r3, #12]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f12:	4413      	add	r3, r2
 8005f14:	4619      	mov	r1, r3
 8005f16:	6938      	ldr	r0, [r7, #16]
 8005f18:	f7ff ff0c 	bl	8005d34 <move_window>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 808c 	bne.w	800603c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	60fa      	str	r2, [r7, #12]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	8992      	ldrh	r2, [r2, #12]
 8005f2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f32:	fb01 f202 	mul.w	r2, r1, r2
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	899b      	ldrh	r3, [r3, #12]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f52:	4413      	add	r3, r2
 8005f54:	4619      	mov	r1, r3
 8005f56:	6938      	ldr	r0, [r7, #16]
 8005f58:	f7ff feec 	bl	8005d34 <move_window>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d16e      	bne.n	8006040 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	899b      	ldrh	r3, [r3, #12]
 8005f66:	461a      	mov	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f6e:	fb01 f202 	mul.w	r2, r1, r2
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <get_fat+0xe6>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	e002      	b.n	8005f9a <get_fat+0xec>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f9a:	617b      	str	r3, [r7, #20]
			break;
 8005f9c:	e055      	b.n	800604a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	899b      	ldrh	r3, [r3, #12]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4619      	mov	r1, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6938      	ldr	r0, [r7, #16]
 8005fb8:	f7ff febc 	bl	8005d34 <move_window>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d140      	bne.n	8006044 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	8992      	ldrh	r2, [r2, #12]
 8005fd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fd4:	fb00 f202 	mul.w	r2, r0, r2
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	440b      	add	r3, r1
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fbf9 	bl	80057d4 <ld_word>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	617b      	str	r3, [r7, #20]
			break;
 8005fe6:	e030      	b.n	800604a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	899b      	ldrh	r3, [r3, #12]
 8005ff0:	089b      	lsrs	r3, r3, #2
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ffc:	4413      	add	r3, r2
 8005ffe:	4619      	mov	r1, r3
 8006000:	6938      	ldr	r0, [r7, #16]
 8006002:	f7ff fe97 	bl	8005d34 <move_window>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11d      	bne.n	8006048 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	8992      	ldrh	r2, [r2, #12]
 800601a:	fbb3 f0f2 	udiv	r0, r3, r2
 800601e:	fb00 f202 	mul.w	r2, r0, r2
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	440b      	add	r3, r1
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fbec 	bl	8005804 <ld_dword>
 800602c:	4603      	mov	r3, r0
 800602e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006032:	617b      	str	r3, [r7, #20]
			break;
 8006034:	e009      	b.n	800604a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006036:	2301      	movs	r3, #1
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e006      	b.n	800604a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800603c:	bf00      	nop
 800603e:	e004      	b.n	800604a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006040:	bf00      	nop
 8006042:	e002      	b.n	800604a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006048:	bf00      	nop
		}
	}

	return val;
 800604a:	697b      	ldr	r3, [r7, #20]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b089      	sub	sp, #36	@ 0x24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006060:	2302      	movs	r3, #2
 8006062:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b01      	cmp	r3, #1
 8006068:	f240 8109 	bls.w	800627e <put_fat+0x22a>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	429a      	cmp	r2, r3
 8006074:	f080 8103 	bcs.w	800627e <put_fat+0x22a>
		switch (fs->fs_type) {
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b03      	cmp	r3, #3
 800607e:	f000 80b6 	beq.w	80061ee <put_fat+0x19a>
 8006082:	2b03      	cmp	r3, #3
 8006084:	f300 80fb 	bgt.w	800627e <put_fat+0x22a>
 8006088:	2b01      	cmp	r3, #1
 800608a:	d003      	beq.n	8006094 <put_fat+0x40>
 800608c:	2b02      	cmp	r3, #2
 800608e:	f000 8083 	beq.w	8006198 <put_fat+0x144>
 8006092:	e0f4      	b.n	800627e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	4413      	add	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	899b      	ldrh	r3, [r3, #12]
 80060aa:	4619      	mov	r1, r3
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80060b2:	4413      	add	r3, r2
 80060b4:	4619      	mov	r1, r3
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff fe3c 	bl	8005d34 <move_window>
 80060bc:	4603      	mov	r3, r0
 80060be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060c0:	7ffb      	ldrb	r3, [r7, #31]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 80d4 	bne.w	8006270 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	61ba      	str	r2, [r7, #24]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	8992      	ldrh	r2, [r2, #12]
 80060d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80060dc:	fb00 f202 	mul.w	r2, r0, r2
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	440b      	add	r3, r1
 80060e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <put_fat+0xb8>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	b25b      	sxtb	r3, r3
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	b25a      	sxtb	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	b25b      	sxtb	r3, r3
 8006104:	4313      	orrs	r3, r2
 8006106:	b25b      	sxtb	r3, r3
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e001      	b.n	8006110 <put_fat+0xbc>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2201      	movs	r2, #1
 8006118:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	899b      	ldrh	r3, [r3, #12]
 8006122:	4619      	mov	r1, r3
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	fbb3 f3f1 	udiv	r3, r3, r1
 800612a:	4413      	add	r3, r2
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff fe00 	bl	8005d34 <move_window>
 8006134:	4603      	mov	r3, r0
 8006136:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006138:	7ffb      	ldrb	r3, [r7, #31]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 809a 	bne.w	8006274 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	899b      	ldrh	r3, [r3, #12]
 800614a:	461a      	mov	r2, r3
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006152:	fb00 f202 	mul.w	r2, r0, r2
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	440b      	add	r3, r1
 800615a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <put_fat+0x11a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	b2db      	uxtb	r3, r3
 800616c:	e00e      	b.n	800618c <put_fat+0x138>
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b25b      	sxtb	r3, r3
 8006174:	f023 030f 	bic.w	r3, r3, #15
 8006178:	b25a      	sxtb	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	b25b      	sxtb	r3, r3
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	b25b      	sxtb	r3, r3
 8006186:	4313      	orrs	r3, r2
 8006188:	b25b      	sxtb	r3, r3
 800618a:	b2db      	uxtb	r3, r3
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	70da      	strb	r2, [r3, #3]
			break;
 8006196:	e072      	b.n	800627e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	899b      	ldrh	r3, [r3, #12]
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4619      	mov	r1, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80061ac:	4413      	add	r3, r2
 80061ae:	4619      	mov	r1, r3
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff fdbf 	bl	8005d34 <move_window>
 80061b6:	4603      	mov	r3, r0
 80061b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061ba:	7ffb      	ldrb	r3, [r7, #31]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d15b      	bne.n	8006278 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	8992      	ldrh	r2, [r2, #12]
 80061ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80061d2:	fb00 f202 	mul.w	r2, r0, r2
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	440b      	add	r3, r1
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	b292      	uxth	r2, r2
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fb32 	bl	800584a <st_word>
			fs->wflag = 1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	70da      	strb	r2, [r3, #3]
			break;
 80061ec:	e047      	b.n	800627e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	899b      	ldrh	r3, [r3, #12]
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	4619      	mov	r1, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006202:	4413      	add	r3, r2
 8006204:	4619      	mov	r1, r3
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff fd94 	bl	8005d34 <move_window>
 800620c:	4603      	mov	r3, r0
 800620e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006210:	7ffb      	ldrb	r3, [r7, #31]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d132      	bne.n	800627c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	8992      	ldrh	r2, [r2, #12]
 800622a:	fbb3 f0f2 	udiv	r0, r3, r2
 800622e:	fb00 f202 	mul.w	r2, r0, r2
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	440b      	add	r3, r1
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff fae4 	bl	8005804 <ld_dword>
 800623c:	4603      	mov	r3, r0
 800623e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006242:	4323      	orrs	r3, r4
 8006244:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	8992      	ldrh	r2, [r2, #12]
 8006254:	fbb3 f0f2 	udiv	r0, r3, r2
 8006258:	fb00 f202 	mul.w	r2, r0, r2
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	440b      	add	r3, r1
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff fb0c 	bl	8005880 <st_dword>
			fs->wflag = 1;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	70da      	strb	r2, [r3, #3]
			break;
 800626e:	e006      	b.n	800627e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006270:	bf00      	nop
 8006272:	e004      	b.n	800627e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006274:	bf00      	nop
 8006276:	e002      	b.n	800627e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006278:	bf00      	nop
 800627a:	e000      	b.n	800627e <put_fat+0x22a>
			if (res != FR_OK) break;
 800627c:	bf00      	nop
		}
	}
	return res;
 800627e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3724      	adds	r7, #36	@ 0x24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd90      	pop	{r4, r7, pc}

08006288 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d904      	bls.n	80062ae <remove_chain+0x26>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d301      	bcc.n	80062b2 <remove_chain+0x2a>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e04b      	b.n	800634a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	69b8      	ldr	r0, [r7, #24]
 80062c0:	f7ff fec8 	bl	8006054 <put_fat>
 80062c4:	4603      	mov	r3, r0
 80062c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <remove_chain+0x4a>
 80062ce:	7ffb      	ldrb	r3, [r7, #31]
 80062d0:	e03b      	b.n	800634a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff fdea 	bl	8005eae <get_fat>
 80062da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d031      	beq.n	8006346 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <remove_chain+0x64>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e02e      	b.n	800634a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d101      	bne.n	80062f8 <remove_chain+0x70>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e028      	b.n	800634a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80062f8:	2200      	movs	r2, #0
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	69b8      	ldr	r0, [r7, #24]
 80062fe:	f7ff fea9 	bl	8006054 <put_fat>
 8006302:	4603      	mov	r3, r0
 8006304:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006306:	7ffb      	ldrb	r3, [r7, #31]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <remove_chain+0x88>
 800630c:	7ffb      	ldrb	r3, [r7, #31]
 800630e:	e01c      	b.n	800634a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	3b02      	subs	r3, #2
 800631a:	429a      	cmp	r2, r3
 800631c:	d20b      	bcs.n	8006336 <remove_chain+0xae>
			fs->free_clst++;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	791b      	ldrb	r3, [r3, #4]
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	b2da      	uxtb	r2, r3
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	429a      	cmp	r2, r3
 8006342:	d3c6      	bcc.n	80062d2 <remove_chain+0x4a>
 8006344:	e000      	b.n	8006348 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006346:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3720      	adds	r7, #32
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b088      	sub	sp, #32
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10d      	bne.n	8006384 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <create_chain+0x2c>
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	429a      	cmp	r2, r3
 800637c:	d31b      	bcc.n	80063b6 <create_chain+0x64>
 800637e:	2301      	movs	r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e018      	b.n	80063b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fd91 	bl	8005eae <get_fat>
 800638c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d801      	bhi.n	8006398 <create_chain+0x46>
 8006394:	2301      	movs	r3, #1
 8006396:	e070      	b.n	800647a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d101      	bne.n	80063a4 <create_chain+0x52>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	e06a      	b.n	800647a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d201      	bcs.n	80063b2 <create_chain+0x60>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	e063      	b.n	800647a <create_chain+0x128>
		scl = clst;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	3301      	adds	r3, #1
 80063be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d307      	bcc.n	80063da <create_chain+0x88>
				ncl = 2;
 80063ca:	2302      	movs	r3, #2
 80063cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d901      	bls.n	80063da <create_chain+0x88>
 80063d6:	2300      	movs	r3, #0
 80063d8:	e04f      	b.n	800647a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80063da:	69f9      	ldr	r1, [r7, #28]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fd66 	bl	8005eae <get_fat>
 80063e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d003      	beq.n	80063f8 <create_chain+0xa6>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d101      	bne.n	80063fc <create_chain+0xaa>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	e03e      	b.n	800647a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	429a      	cmp	r2, r3
 8006402:	d1da      	bne.n	80063ba <create_chain+0x68>
 8006404:	2300      	movs	r3, #0
 8006406:	e038      	b.n	800647a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006408:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800640a:	f04f 32ff 	mov.w	r2, #4294967295
 800640e:	69f9      	ldr	r1, [r7, #28]
 8006410:	6938      	ldr	r0, [r7, #16]
 8006412:	f7ff fe1f 	bl	8006054 <put_fat>
 8006416:	4603      	mov	r3, r0
 8006418:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <create_chain+0xe2>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d006      	beq.n	8006434 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6938      	ldr	r0, [r7, #16]
 800642c:	f7ff fe12 	bl	8006054 <put_fat>
 8006430:	4603      	mov	r3, r0
 8006432:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d116      	bne.n	8006468 <create_chain+0x116>
		fs->last_clst = ncl;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	3b02      	subs	r3, #2
 800644a:	429a      	cmp	r2, r3
 800644c:	d804      	bhi.n	8006458 <create_chain+0x106>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	1e5a      	subs	r2, r3, #1
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	791b      	ldrb	r3, [r3, #4]
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	b2da      	uxtb	r2, r3
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	711a      	strb	r2, [r3, #4]
 8006466:	e007      	b.n	8006478 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d102      	bne.n	8006474 <create_chain+0x122>
 800646e:	f04f 33ff 	mov.w	r3, #4294967295
 8006472:	e000      	b.n	8006476 <create_chain+0x124>
 8006474:	2301      	movs	r3, #1
 8006476:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006478:	69fb      	ldr	r3, [r7, #28]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006482:	b480      	push	{r7}
 8006484:	b087      	sub	sp, #28
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	3304      	adds	r3, #4
 8006498:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	899b      	ldrh	r3, [r3, #12]
 800649e:	461a      	mov	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	8952      	ldrh	r2, [r2, #10]
 80064aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1d1a      	adds	r2, r3, #4
 80064b4:	613a      	str	r2, [r7, #16]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <clmt_clust+0x42>
 80064c0:	2300      	movs	r3, #0
 80064c2:	e010      	b.n	80064e6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d307      	bcc.n	80064dc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	3304      	adds	r3, #4
 80064d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064da:	e7e9      	b.n	80064b0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80064dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4413      	add	r3, r2
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006508:	d204      	bcs.n	8006514 <dir_sdi+0x22>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006514:	2302      	movs	r3, #2
 8006516:	e071      	b.n	80065fc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <dir_sdi+0x46>
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d902      	bls.n	8006538 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006536:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10c      	bne.n	8006558 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	8912      	ldrh	r2, [r2, #8]
 8006546:	4293      	cmp	r3, r2
 8006548:	d301      	bcc.n	800654e <dir_sdi+0x5c>
 800654a:	2302      	movs	r3, #2
 800654c:	e056      	b.n	80065fc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	61da      	str	r2, [r3, #28]
 8006556:	e02d      	b.n	80065b4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	895b      	ldrh	r3, [r3, #10]
 800655c:	461a      	mov	r2, r3
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	899b      	ldrh	r3, [r3, #12]
 8006562:	fb02 f303 	mul.w	r3, r2, r3
 8006566:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006568:	e019      	b.n	800659e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6979      	ldr	r1, [r7, #20]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fc9d 	bl	8005eae <get_fat>
 8006574:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d101      	bne.n	8006582 <dir_sdi+0x90>
 800657e:	2301      	movs	r3, #1
 8006580:	e03c      	b.n	80065fc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d904      	bls.n	8006592 <dir_sdi+0xa0>
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	429a      	cmp	r2, r3
 8006590:	d301      	bcc.n	8006596 <dir_sdi+0xa4>
 8006592:	2302      	movs	r3, #2
 8006594:	e032      	b.n	80065fc <dir_sdi+0x10a>
			ofs -= csz;
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d2e1      	bcs.n	800656a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80065a6:	6979      	ldr	r1, [r7, #20]
 80065a8:	6938      	ldr	r0, [r7, #16]
 80065aa:	f7ff fc61 	bl	8005e70 <clust2sect>
 80065ae:	4602      	mov	r2, r0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <dir_sdi+0xd4>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e01a      	b.n	80065fc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69da      	ldr	r2, [r3, #28]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	899b      	ldrh	r3, [r3, #12]
 80065ce:	4619      	mov	r1, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80065d6:	441a      	add	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	899b      	ldrh	r3, [r3, #12]
 80065e6:	461a      	mov	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80065ee:	fb00 f202 	mul.w	r2, r0, r2
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	18ca      	adds	r2, r1, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	3320      	adds	r3, #32
 800661a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <dir_next+0x28>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800662a:	d301      	bcc.n	8006630 <dir_next+0x2c>
 800662c:	2304      	movs	r3, #4
 800662e:	e0bb      	b.n	80067a8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	899b      	ldrh	r3, [r3, #12]
 8006634:	461a      	mov	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	fbb3 f1f2 	udiv	r1, r3, r2
 800663c:	fb01 f202 	mul.w	r2, r1, r2
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 809d 	bne.w	8006782 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	8912      	ldrh	r2, [r2, #8]
 8006662:	4293      	cmp	r3, r2
 8006664:	f0c0 808d 	bcc.w	8006782 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	61da      	str	r2, [r3, #28]
 800666e:	2304      	movs	r3, #4
 8006670:	e09a      	b.n	80067a8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	899b      	ldrh	r3, [r3, #12]
 8006676:	461a      	mov	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	fbb3 f3f2 	udiv	r3, r3, r2
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	8952      	ldrh	r2, [r2, #10]
 8006682:	3a01      	subs	r2, #1
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d17b      	bne.n	8006782 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7ff fc0b 	bl	8005eae <get_fat>
 8006698:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d801      	bhi.n	80066a4 <dir_next+0xa0>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e081      	b.n	80067a8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d101      	bne.n	80066b0 <dir_next+0xac>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e07b      	b.n	80067a8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d359      	bcc.n	800676e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	61da      	str	r2, [r3, #28]
 80066c6:	2304      	movs	r3, #4
 80066c8:	e06e      	b.n	80067a8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f7ff fe3d 	bl	8006352 <create_chain>
 80066d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <dir_next+0xe0>
 80066e0:	2307      	movs	r3, #7
 80066e2:	e061      	b.n	80067a8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <dir_next+0xea>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e05c      	b.n	80067a8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d101      	bne.n	80066fa <dir_next+0xf6>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e056      	b.n	80067a8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff fad6 	bl	8005cac <sync_window>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <dir_next+0x106>
 8006706:	2301      	movs	r3, #1
 8006708:	e04e      	b.n	80067a8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	899b      	ldrh	r3, [r3, #12]
 8006714:	461a      	mov	r2, r3
 8006716:	2100      	movs	r1, #0
 8006718:	f7ff f8ff 	bl	800591a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800671c:	2300      	movs	r3, #0
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	6979      	ldr	r1, [r7, #20]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff fba4 	bl	8005e70 <clust2sect>
 8006728:	4602      	mov	r2, r0
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	635a      	str	r2, [r3, #52]	@ 0x34
 800672e:	e012      	b.n	8006756 <dir_next+0x152>
						fs->wflag = 1;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff fab8 	bl	8005cac <sync_window>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <dir_next+0x142>
 8006742:	2301      	movs	r3, #1
 8006744:	e030      	b.n	80067a8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	3301      	adds	r3, #1
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	895b      	ldrh	r3, [r3, #10]
 800675a:	461a      	mov	r2, r3
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4293      	cmp	r3, r2
 8006760:	d3e6      	bcc.n	8006730 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad2      	subs	r2, r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006774:	6979      	ldr	r1, [r7, #20]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fb7a 	bl	8005e70 <clust2sect>
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	899b      	ldrh	r3, [r3, #12]
 8006792:	461a      	mov	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	fbb3 f0f2 	udiv	r0, r3, r2
 800679a:	fb00 f202 	mul.w	r2, r0, r2
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	18ca      	adds	r2, r1, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fe95 	bl	80064f2 <dir_sdi>
 80067c8:	4603      	mov	r3, r0
 80067ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d12b      	bne.n	800682a <dir_alloc+0x7a>
		n = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff faa9 	bl	8005d34 <move_window>
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11d      	bne.n	8006828 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2be5      	cmp	r3, #229	@ 0xe5
 80067f4:	d004      	beq.n	8006800 <dir_alloc+0x50>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d107      	bne.n	8006810 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3301      	adds	r3, #1
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d102      	bne.n	8006814 <dir_alloc+0x64>
 800680e:	e00c      	b.n	800682a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006810:	2300      	movs	r3, #0
 8006812:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006814:	2101      	movs	r1, #1
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fef4 	bl	8006604 <dir_next>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0d7      	beq.n	80067d6 <dir_alloc+0x26>
 8006826:	e000      	b.n	800682a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006828:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d101      	bne.n	8006834 <dir_alloc+0x84>
 8006830:	2307      	movs	r3, #7
 8006832:	75fb      	strb	r3, [r7, #23]
	return res;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	331a      	adds	r3, #26
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe ffc1 	bl	80057d4 <ld_word>
 8006852:	4603      	mov	r3, r0
 8006854:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b03      	cmp	r3, #3
 800685c:	d109      	bne.n	8006872 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	3314      	adds	r3, #20
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe ffb6 	bl	80057d4 <ld_word>
 8006868:	4603      	mov	r3, r0
 800686a:	041b      	lsls	r3, r3, #16
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	331a      	adds	r3, #26
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	b292      	uxth	r2, r2
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe ffd9 	bl	800584a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b03      	cmp	r3, #3
 800689e:	d109      	bne.n	80068b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f103 0214 	add.w	r2, r3, #20
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	0c1b      	lsrs	r3, r3, #16
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fe ffcb 	bl	800584a <st_word>
	}
}
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80068bc:	b590      	push	{r4, r7, lr}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	331a      	adds	r3, #26
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe ff82 	bl	80057d4 <ld_word>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <cmp_lfn+0x1e>
 80068d6:	2300      	movs	r3, #0
 80068d8:	e059      	b.n	800698e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068e2:	1e5a      	subs	r2, r3, #1
 80068e4:	4613      	mov	r3, r2
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068f0:	2301      	movs	r3, #1
 80068f2:	81fb      	strh	r3, [r7, #14]
 80068f4:	2300      	movs	r3, #0
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	e033      	b.n	8006962 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80068fa:	4a27      	ldr	r2, [pc, #156]	@ (8006998 <cmp_lfn+0xdc>)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4413      	add	r3, r2
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	4413      	add	r3, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe ff63 	bl	80057d4 <ld_word>
 800690e:	4603      	mov	r3, r0
 8006910:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006912:	89fb      	ldrh	r3, [r7, #14]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01a      	beq.n	800694e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2bfe      	cmp	r3, #254	@ 0xfe
 800691c:	d812      	bhi.n	8006944 <cmp_lfn+0x88>
 800691e:	89bb      	ldrh	r3, [r7, #12]
 8006920:	4618      	mov	r0, r3
 8006922:	f001 fd3d 	bl	80083a0 <ff_wtoupper>
 8006926:	4603      	mov	r3, r0
 8006928:	461c      	mov	r4, r3
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	617a      	str	r2, [r7, #20]
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fd31 	bl	80083a0 <ff_wtoupper>
 800693e:	4603      	mov	r3, r0
 8006940:	429c      	cmp	r4, r3
 8006942:	d001      	beq.n	8006948 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006944:	2300      	movs	r3, #0
 8006946:	e022      	b.n	800698e <cmp_lfn+0xd2>
			}
			wc = uc;
 8006948:	89bb      	ldrh	r3, [r7, #12]
 800694a:	81fb      	strh	r3, [r7, #14]
 800694c:	e006      	b.n	800695c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800694e:	89bb      	ldrh	r3, [r7, #12]
 8006950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006954:	4293      	cmp	r3, r2
 8006956:	d001      	beq.n	800695c <cmp_lfn+0xa0>
 8006958:	2300      	movs	r3, #0
 800695a:	e018      	b.n	800698e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	3301      	adds	r3, #1
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b0c      	cmp	r3, #12
 8006966:	d9c8      	bls.n	80068fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <cmp_lfn+0xd0>
 8006974:	89fb      	ldrh	r3, [r7, #14]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <cmp_lfn+0xd0>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <cmp_lfn+0xd0>
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800698c:	2301      	movs	r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd90      	pop	{r4, r7, pc}
 8006996:	bf00      	nop
 8006998:	08008784 	.word	0x08008784

0800699c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	460b      	mov	r3, r1
 80069ac:	71fb      	strb	r3, [r7, #7]
 80069ae:	4613      	mov	r3, r2
 80069b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	330d      	adds	r3, #13
 80069b6:	79ba      	ldrb	r2, [r7, #6]
 80069b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	330b      	adds	r3, #11
 80069be:	220f      	movs	r2, #15
 80069c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	330c      	adds	r3, #12
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	331a      	adds	r3, #26
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe ff3a 	bl	800584a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	1e5a      	subs	r2, r3, #1
 80069da:	4613      	mov	r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	82fb      	strh	r3, [r7, #22]
 80069ea:	2300      	movs	r3, #0
 80069ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <put_lfn+0x6c>
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	61fa      	str	r2, [r7, #28]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a08:	4a17      	ldr	r2, [pc, #92]	@ (8006a68 <put_lfn+0xcc>)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	8afa      	ldrh	r2, [r7, #22]
 8006a18:	4611      	mov	r1, r2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe ff15 	bl	800584a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a20:	8afb      	ldrh	r3, [r7, #22]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <put_lfn+0x90>
 8006a26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a2a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b0c      	cmp	r3, #12
 8006a36:	d9da      	bls.n	80069ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006a38:	8afb      	ldrh	r3, [r7, #22]
 8006a3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d006      	beq.n	8006a50 <put_lfn+0xb4>
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d103      	bne.n	8006a58 <put_lfn+0xbc>
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a56:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	79fa      	ldrb	r2, [r7, #7]
 8006a5c:	701a      	strb	r2, [r3, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08008784 	.word	0x08008784

08006a6c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	@ 0x30
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006a7a:	220b      	movs	r2, #11
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7fe ff2a 	bl	80058d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d92b      	bls.n	8006ae2 <gen_numname+0x76>
		sr = seq;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006a8e:	e022      	b.n	8006ad6 <gen_numname+0x6a>
			wc = *lfn++;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a9e:	e017      	b.n	8006ad0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	005a      	lsls	r2, r3, #1
 8006aa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	4413      	add	r3, r2
 8006aac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006aae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <gen_numname+0x5e>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006ac4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006ac8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	3301      	adds	r3, #1
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	2b0f      	cmp	r3, #15
 8006ad4:	d9e4      	bls.n	8006aa0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1d8      	bne.n	8006a90 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006ae2:	2307      	movs	r3, #7
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	3330      	adds	r3, #48	@ 0x30
 8006af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006afa:	2b39      	cmp	r3, #57	@ 0x39
 8006afc:	d904      	bls.n	8006b08 <gen_numname+0x9c>
 8006afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b02:	3307      	adds	r3, #7
 8006b04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	1e5a      	subs	r2, r3, #1
 8006b0c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b0e:	3330      	adds	r3, #48	@ 0x30
 8006b10:	443b      	add	r3, r7
 8006b12:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006b16:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1df      	bne.n	8006ae6 <gen_numname+0x7a>
	ns[i] = '~';
 8006b26:	f107 0214 	add.w	r2, r7, #20
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	4413      	add	r3, r2
 8006b2e:	227e      	movs	r2, #126	@ 0x7e
 8006b30:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b36:	e002      	b.n	8006b3e <gen_numname+0xd2>
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d205      	bcs.n	8006b52 <gen_numname+0xe6>
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	4413      	add	r3, r2
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	d1f2      	bne.n	8006b38 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	2b07      	cmp	r3, #7
 8006b56:	d807      	bhi.n	8006b68 <gen_numname+0xfc>
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b5e:	3330      	adds	r3, #48	@ 0x30
 8006b60:	443b      	add	r3, r7
 8006b62:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006b66:	e000      	b.n	8006b6a <gen_numname+0xfe>
 8006b68:	2120      	movs	r1, #32
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	460a      	mov	r2, r1
 8006b76:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	2b07      	cmp	r3, #7
 8006b7c:	d9e9      	bls.n	8006b52 <gen_numname+0xe6>
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	3730      	adds	r7, #48	@ 0x30
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006b94:	230b      	movs	r3, #11
 8006b96:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	0852      	lsrs	r2, r2, #1
 8006b9e:	01db      	lsls	r3, r3, #7
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	6079      	str	r1, [r7, #4]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	4413      	add	r3, r2
 8006bae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ed      	bne.n	8006b98 <sum_sfn+0x10>
	return sum;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006bd8:	2100      	movs	r1, #0
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fc89 	bl	80064f2 <dir_sdi>
 8006be0:	4603      	mov	r3, r0
 8006be2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <dir_find+0x24>
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	e0a9      	b.n	8006d42 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006bee:	23ff      	movs	r3, #255	@ 0xff
 8006bf0:	753b      	strb	r3, [r7, #20]
 8006bf2:	7d3b      	ldrb	r3, [r7, #20]
 8006bf4:	757b      	strb	r3, [r7, #21]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6938      	ldr	r0, [r7, #16]
 8006c06:	f7ff f895 	bl	8005d34 <move_window>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 8090 	bne.w	8006d36 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c1e:	7dbb      	ldrb	r3, [r7, #22]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <dir_find+0x60>
 8006c24:	2304      	movs	r3, #4
 8006c26:	75fb      	strb	r3, [r7, #23]
 8006c28:	e08a      	b.n	8006d40 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	330b      	adds	r3, #11
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c36:	73fb      	strb	r3, [r7, #15]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7bfa      	ldrb	r2, [r7, #15]
 8006c3c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006c3e:	7dbb      	ldrb	r3, [r7, #22]
 8006c40:	2be5      	cmp	r3, #229	@ 0xe5
 8006c42:	d007      	beq.n	8006c54 <dir_find+0x8a>
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <dir_find+0x98>
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b0f      	cmp	r3, #15
 8006c52:	d006      	beq.n	8006c62 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c54:	23ff      	movs	r3, #255	@ 0xff
 8006c56:	757b      	strb	r3, [r7, #21]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c60:	e05e      	b.n	8006d20 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b0f      	cmp	r3, #15
 8006c66:	d136      	bne.n	8006cd6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d154      	bne.n	8006d20 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006c76:	7dbb      	ldrb	r3, [r7, #22]
 8006c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00d      	beq.n	8006c9c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	7b5b      	ldrb	r3, [r3, #13]
 8006c86:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006c88:	7dbb      	ldrb	r3, [r7, #22]
 8006c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c8e:	75bb      	strb	r3, [r7, #22]
 8006c90:	7dbb      	ldrb	r3, [r7, #22]
 8006c92:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	695a      	ldr	r2, [r3, #20]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006c9c:	7dba      	ldrb	r2, [r7, #22]
 8006c9e:	7d7b      	ldrb	r3, [r7, #21]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d115      	bne.n	8006cd0 <dir_find+0x106>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	330d      	adds	r3, #13
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	7d3a      	ldrb	r2, [r7, #20]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d10e      	bne.n	8006cd0 <dir_find+0x106>
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	f7ff fdfd 	bl	80068bc <cmp_lfn>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <dir_find+0x106>
 8006cc8:	7d7b      	ldrb	r3, [r7, #21]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	e000      	b.n	8006cd2 <dir_find+0x108>
 8006cd0:	23ff      	movs	r3, #255	@ 0xff
 8006cd2:	757b      	strb	r3, [r7, #21]
 8006cd4:	e024      	b.n	8006d20 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006cd6:	7d7b      	ldrb	r3, [r7, #21]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d109      	bne.n	8006cf0 <dir_find+0x126>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff ff51 	bl	8006b88 <sum_sfn>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	7d3b      	ldrb	r3, [r7, #20]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d024      	beq.n	8006d3a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <dir_find+0x14a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a18      	ldr	r0, [r3, #32]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3324      	adds	r3, #36	@ 0x24
 8006d06:	220b      	movs	r2, #11
 8006d08:	4619      	mov	r1, r3
 8006d0a:	f7fe fe21 	bl	8005950 <mem_cmp>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d014      	beq.n	8006d3e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d14:	23ff      	movs	r3, #255	@ 0xff
 8006d16:	757b      	strb	r3, [r7, #21]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d20:	2100      	movs	r1, #0
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fc6e 	bl	8006604 <dir_next>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f43f af65 	beq.w	8006bfe <dir_find+0x34>
 8006d34:	e004      	b.n	8006d40 <dir_find+0x176>
		if (res != FR_OK) break;
 8006d36:	bf00      	nop
 8006d38:	e002      	b.n	8006d40 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d3a:	bf00      	nop
 8006d3c:	e000      	b.n	8006d40 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d3e:	bf00      	nop

	return res;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08c      	sub	sp, #48	@ 0x30
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006d60:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <dir_register+0x20>
 8006d68:	2306      	movs	r3, #6
 8006d6a:	e0e0      	b.n	8006f2e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d70:	e002      	b.n	8006d78 <dir_register+0x2c>
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	3301      	adds	r3, #1
 8006d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f4      	bne.n	8006d72 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006d8e:	f107 030c 	add.w	r3, r7, #12
 8006d92:	220c      	movs	r2, #12
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fd9f 	bl	80058d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d032      	beq.n	8006e0a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2240      	movs	r2, #64	@ 0x40
 8006da8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006dac:	2301      	movs	r3, #1
 8006dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006db0:	e016      	b.n	8006de0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	f107 010c 	add.w	r1, r7, #12
 8006dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc2:	f7ff fe53 	bl	8006a6c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff feff 	bl	8006bca <dir_find>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ddc:	3301      	adds	r3, #1
 8006dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de2:	2b63      	cmp	r3, #99	@ 0x63
 8006de4:	d9e5      	bls.n	8006db2 <dir_register+0x66>
 8006de6:	e000      	b.n	8006dea <dir_register+0x9e>
			if (res != FR_OK) break;
 8006de8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dec:	2b64      	cmp	r3, #100	@ 0x64
 8006dee:	d101      	bne.n	8006df4 <dir_register+0xa8>
 8006df0:	2307      	movs	r3, #7
 8006df2:	e09c      	b.n	8006f2e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006df4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d002      	beq.n	8006e02 <dir_register+0xb6>
 8006dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e00:	e095      	b.n	8006f2e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006e02:	7dfa      	ldrb	r2, [r7, #23]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <dir_register+0xd8>
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	330c      	adds	r3, #12
 8006e18:	4a47      	ldr	r2, [pc, #284]	@ (8006f38 <dir_register+0x1ec>)
 8006e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	3301      	adds	r3, #1
 8006e22:	e000      	b.n	8006e26 <dir_register+0xda>
 8006e24:	2301      	movs	r3, #1
 8006e26:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006e28:	6a39      	ldr	r1, [r7, #32]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff fcc0 	bl	80067b0 <dir_alloc>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006e36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d148      	bne.n	8006ed0 <dir_register+0x184>
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	623b      	str	r3, [r7, #32]
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d042      	beq.n	8006ed0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	015b      	lsls	r3, r3, #5
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff fb4b 	bl	80064f2 <dir_sdi>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006e62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d132      	bne.n	8006ed0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3324      	adds	r3, #36	@ 0x24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fe8a 	bl	8006b88 <sum_sfn>
 8006e74:	4603      	mov	r3, r0
 8006e76:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	69f8      	ldr	r0, [r7, #28]
 8006e80:	f7fe ff58 	bl	8005d34 <move_window>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d11d      	bne.n	8006ece <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	6918      	ldr	r0, [r3, #16]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a19      	ldr	r1, [r3, #32]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	7efb      	ldrb	r3, [r7, #27]
 8006ea0:	f7ff fd7c 	bl	800699c <put_lfn>
				fs->wflag = 1;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff fba9 	bl	8006604 <dir_next>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <dir_register+0x184>
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	623b      	str	r3, [r7, #32]
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1d5      	bne.n	8006e78 <dir_register+0x12c>
 8006ecc:	e000      	b.n	8006ed0 <dir_register+0x184>
				if (res != FR_OK) break;
 8006ece:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d128      	bne.n	8006f2a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	4619      	mov	r1, r3
 8006ede:	69f8      	ldr	r0, [r7, #28]
 8006ee0:	f7fe ff28 	bl	8005d34 <move_window>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006eea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d11b      	bne.n	8006f2a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fd0d 	bl	800591a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a18      	ldr	r0, [r3, #32]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3324      	adds	r3, #36	@ 0x24
 8006f08:	220b      	movs	r2, #11
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f7fe fce4 	bl	80058d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	f002 0218 	and.w	r2, r2, #24
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	2201      	movs	r2, #1
 8006f28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3730      	adds	r7, #48	@ 0x30
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	4ec4ec4f 	.word	0x4ec4ec4f

08006f3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	@ 0x28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	61ba      	str	r2, [r7, #24]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4413      	add	r3, r2
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006f6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f6c:	2b1f      	cmp	r3, #31
 8006f6e:	d940      	bls.n	8006ff2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006f70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f72:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f74:	d006      	beq.n	8006f84 <create_name+0x48>
 8006f76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f78:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f7a:	d110      	bne.n	8006f9e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f7c:	e002      	b.n	8006f84 <create_name+0x48>
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	3301      	adds	r3, #1
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	4413      	add	r3, r2
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f8e:	d0f6      	beq.n	8006f7e <create_name+0x42>
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	4413      	add	r3, r2
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f9a:	d0f0      	beq.n	8006f7e <create_name+0x42>
			break;
 8006f9c:	e02a      	b.n	8006ff4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2bfe      	cmp	r3, #254	@ 0xfe
 8006fa2:	d901      	bls.n	8006fa8 <create_name+0x6c>
 8006fa4:	2306      	movs	r3, #6
 8006fa6:	e17d      	b.n	80072a4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006fae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 f9b8 	bl	8008328 <ff_convert>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006fbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <create_name+0x8a>
 8006fc2:	2306      	movs	r3, #6
 8006fc4:	e16e      	b.n	80072a4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006fc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fca:	d809      	bhi.n	8006fe0 <create_name+0xa4>
 8006fcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fce:	4619      	mov	r1, r3
 8006fd0:	488d      	ldr	r0, [pc, #564]	@ (8007208 <create_name+0x2cc>)
 8006fd2:	f7fe fce4 	bl	800599e <chk_chr>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <create_name+0xa4>
 8006fdc:	2306      	movs	r3, #6
 8006fde:	e161      	b.n	80072a4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	617a      	str	r2, [r7, #20]
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006fee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006ff0:	e7b4      	b.n	8006f5c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006ff2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	441a      	add	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006ffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007000:	2b1f      	cmp	r3, #31
 8007002:	d801      	bhi.n	8007008 <create_name+0xcc>
 8007004:	2304      	movs	r3, #4
 8007006:	e000      	b.n	800700a <create_name+0xce>
 8007008:	2300      	movs	r3, #0
 800700a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800700e:	e011      	b.n	8007034 <create_name+0xf8>
		w = lfn[di - 1];
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007016:	3b01      	subs	r3, #1
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007024:	2b20      	cmp	r3, #32
 8007026:	d002      	beq.n	800702e <create_name+0xf2>
 8007028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800702a:	2b2e      	cmp	r3, #46	@ 0x2e
 800702c:	d106      	bne.n	800703c <create_name+0x100>
		di--;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	3b01      	subs	r3, #1
 8007032:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1ea      	bne.n	8007010 <create_name+0xd4>
 800703a:	e000      	b.n	800703e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800703c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	2200      	movs	r2, #0
 8007048:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <create_name+0x118>
 8007050:	2306      	movs	r3, #6
 8007052:	e127      	b.n	80072a4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3324      	adds	r3, #36	@ 0x24
 8007058:	220b      	movs	r2, #11
 800705a:	2120      	movs	r1, #32
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fc5c 	bl	800591a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007062:	2300      	movs	r3, #0
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	e002      	b.n	800706e <create_name+0x132>
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	3301      	adds	r3, #1
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	2b20      	cmp	r3, #32
 800707a:	d0f5      	beq.n	8007068 <create_name+0x12c>
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	2b2e      	cmp	r3, #46	@ 0x2e
 8007088:	d0ee      	beq.n	8007068 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <create_name+0x168>
 8007090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007094:	f043 0303 	orr.w	r3, r3, #3
 8007098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800709c:	e002      	b.n	80070a4 <create_name+0x168>
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <create_name+0x182>
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80070b0:	3b01      	subs	r3, #1
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80070bc:	d1ef      	bne.n	800709e <create_name+0x162>

	i = b = 0; ni = 8;
 80070be:	2300      	movs	r3, #0
 80070c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80070c4:	2300      	movs	r3, #0
 80070c6:	623b      	str	r3, [r7, #32]
 80070c8:	2308      	movs	r3, #8
 80070ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	61ba      	str	r2, [r7, #24]
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80070dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 8090 	beq.w	8007204 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80070e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d006      	beq.n	80070f8 <create_name+0x1bc>
 80070ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80070ee:	d10a      	bne.n	8007106 <create_name+0x1ca>
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d006      	beq.n	8007106 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80070f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070fc:	f043 0303 	orr.w	r3, r3, #3
 8007100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007104:	e07d      	b.n	8007202 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	429a      	cmp	r2, r3
 800710c:	d203      	bcs.n	8007116 <create_name+0x1da>
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	429a      	cmp	r2, r3
 8007114:	d123      	bne.n	800715e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b0b      	cmp	r3, #11
 800711a:	d106      	bne.n	800712a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007120:	f043 0303 	orr.w	r3, r3, #3
 8007124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007128:	e075      	b.n	8007216 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	429a      	cmp	r2, r3
 8007130:	d005      	beq.n	800713e <create_name+0x202>
 8007132:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007136:	f043 0303 	orr.w	r3, r3, #3
 800713a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	429a      	cmp	r2, r3
 8007144:	d866      	bhi.n	8007214 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	2308      	movs	r3, #8
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	230b      	movs	r3, #11
 8007150:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007152:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800715c:	e051      	b.n	8007202 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800715e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007160:	2b7f      	cmp	r3, #127	@ 0x7f
 8007162:	d914      	bls.n	800718e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007166:	2100      	movs	r1, #0
 8007168:	4618      	mov	r0, r3
 800716a:	f001 f8dd 	bl	8008328 <ff_convert>
 800716e:	4603      	mov	r3, r0
 8007170:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <create_name+0x246>
 8007178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800717a:	3b80      	subs	r3, #128	@ 0x80
 800717c:	4a23      	ldr	r2, [pc, #140]	@ (800720c <create_name+0x2d0>)
 800717e:	5cd3      	ldrb	r3, [r2, r3]
 8007180:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007182:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007186:	f043 0302 	orr.w	r3, r3, #2
 800718a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800718e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d007      	beq.n	80071a4 <create_name+0x268>
 8007194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007196:	4619      	mov	r1, r3
 8007198:	481d      	ldr	r0, [pc, #116]	@ (8007210 <create_name+0x2d4>)
 800719a:	f7fe fc00 	bl	800599e <chk_chr>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80071a4:	235f      	movs	r3, #95	@ 0x5f
 80071a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071ac:	f043 0303 	orr.w	r3, r3, #3
 80071b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071b4:	e01b      	b.n	80071ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80071b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071b8:	2b40      	cmp	r3, #64	@ 0x40
 80071ba:	d909      	bls.n	80071d0 <create_name+0x294>
 80071bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071be:	2b5a      	cmp	r3, #90	@ 0x5a
 80071c0:	d806      	bhi.n	80071d0 <create_name+0x294>
					b |= 2;
 80071c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071c6:	f043 0302 	orr.w	r3, r3, #2
 80071ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80071ce:	e00e      	b.n	80071ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80071d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071d2:	2b60      	cmp	r3, #96	@ 0x60
 80071d4:	d90b      	bls.n	80071ee <create_name+0x2b2>
 80071d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071d8:	2b7a      	cmp	r3, #122	@ 0x7a
 80071da:	d808      	bhi.n	80071ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80071dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80071e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071ea:	3b20      	subs	r3, #32
 80071ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	623a      	str	r2, [r7, #32]
 80071f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071f6:	b2d1      	uxtb	r1, r2
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	4413      	add	r3, r2
 80071fc:	460a      	mov	r2, r1
 80071fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007202:	e763      	b.n	80070cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007204:	bf00      	nop
 8007206:	e006      	b.n	8007216 <create_name+0x2da>
 8007208:	080086a4 	.word	0x080086a4
 800720c:	08008704 	.word	0x08008704
 8007210:	080086b0 	.word	0x080086b0
			if (si > di) break;			/* No extension */
 8007214:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800721c:	2be5      	cmp	r3, #229	@ 0xe5
 800721e:	d103      	bne.n	8007228 <create_name+0x2ec>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2205      	movs	r2, #5
 8007224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	2b08      	cmp	r3, #8
 800722c:	d104      	bne.n	8007238 <create_name+0x2fc>
 800722e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007238:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800723c:	f003 030c 	and.w	r3, r3, #12
 8007240:	2b0c      	cmp	r3, #12
 8007242:	d005      	beq.n	8007250 <create_name+0x314>
 8007244:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	2b03      	cmp	r3, #3
 800724e:	d105      	bne.n	800725c <create_name+0x320>
 8007250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007254:	f043 0302 	orr.w	r3, r3, #2
 8007258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800725c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d117      	bne.n	8007298 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	2b01      	cmp	r3, #1
 8007272:	d105      	bne.n	8007280 <create_name+0x344>
 8007274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007278:	f043 0310 	orr.w	r3, r3, #16
 800727c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007280:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007284:	f003 030c 	and.w	r3, r3, #12
 8007288:	2b04      	cmp	r3, #4
 800728a:	d105      	bne.n	8007298 <create_name+0x35c>
 800728c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007290:	f043 0308 	orr.w	r3, r3, #8
 8007294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800729e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80072a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3728      	adds	r7, #40	@ 0x28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80072c0:	e002      	b.n	80072c8 <follow_path+0x1c>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	3301      	adds	r3, #1
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80072ce:	d0f8      	beq.n	80072c2 <follow_path+0x16>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80072d6:	d0f4      	beq.n	80072c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2200      	movs	r2, #0
 80072dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b1f      	cmp	r3, #31
 80072e4:	d80a      	bhi.n	80072fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2280      	movs	r2, #128	@ 0x80
 80072ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80072ee:	2100      	movs	r1, #0
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff f8fe 	bl	80064f2 <dir_sdi>
 80072f6:	4603      	mov	r3, r0
 80072f8:	75fb      	strb	r3, [r7, #23]
 80072fa:	e048      	b.n	800738e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072fc:	463b      	mov	r3, r7
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fe1b 	bl	8006f3c <create_name>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d139      	bne.n	8007384 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff fc5a 	bl	8006bca <dir_find>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007320:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b04      	cmp	r3, #4
 800732c:	d12c      	bne.n	8007388 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d127      	bne.n	8007388 <follow_path+0xdc>
 8007338:	2305      	movs	r3, #5
 800733a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800733c:	e024      	b.n	8007388 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d121      	bne.n	800738c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	799b      	ldrb	r3, [r3, #6]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007354:	2305      	movs	r3, #5
 8007356:	75fb      	strb	r3, [r7, #23]
 8007358:	e019      	b.n	800738e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	8992      	ldrh	r2, [r2, #12]
 8007368:	fbb3 f0f2 	udiv	r0, r3, r2
 800736c:	fb00 f202 	mul.w	r2, r0, r2
 8007370:	1a9b      	subs	r3, r3, r2
 8007372:	440b      	add	r3, r1
 8007374:	4619      	mov	r1, r3
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fa61 	bl	800683e <ld_clust>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007382:	e7bb      	b.n	80072fc <follow_path+0x50>
			if (res != FR_OK) break;
 8007384:	bf00      	nop
 8007386:	e002      	b.n	800738e <follow_path+0xe2>
				break;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800738c:	bf00      	nop
			}
		}
	}

	return res;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80073a0:	f04f 33ff 	mov.w	r3, #4294967295
 80073a4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d031      	beq.n	8007412 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	e002      	b.n	80073bc <get_ldnumber+0x24>
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	3301      	adds	r3, #1
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b1f      	cmp	r3, #31
 80073c2:	d903      	bls.n	80073cc <get_ldnumber+0x34>
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80073ca:	d1f4      	bne.n	80073b6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80073d2:	d11c      	bne.n	800740e <get_ldnumber+0x76>
			tp = *path;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	60fa      	str	r2, [r7, #12]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	3b30      	subs	r3, #48	@ 0x30
 80073e4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b09      	cmp	r3, #9
 80073ea:	d80e      	bhi.n	800740a <get_ldnumber+0x72>
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d10a      	bne.n	800740a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <get_ldnumber+0x72>
					vol = (int)i;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	3301      	adds	r3, #1
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	e002      	b.n	8007414 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007412:	693b      	ldr	r3, [r7, #16]
}
 8007414:	4618      	mov	r0, r3
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	70da      	strb	r2, [r3, #3]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fe fc7a 	bl	8005d34 <move_window>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <check_fs+0x2a>
 8007446:	2304      	movs	r3, #4
 8007448:	e038      	b.n	80074bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3338      	adds	r3, #56	@ 0x38
 800744e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe f9be 	bl	80057d4 <ld_word>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007460:	429a      	cmp	r2, r3
 8007462:	d001      	beq.n	8007468 <check_fs+0x48>
 8007464:	2303      	movs	r3, #3
 8007466:	e029      	b.n	80074bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800746e:	2be9      	cmp	r3, #233	@ 0xe9
 8007470:	d009      	beq.n	8007486 <check_fs+0x66>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007478:	2beb      	cmp	r3, #235	@ 0xeb
 800747a:	d11e      	bne.n	80074ba <check_fs+0x9a>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007482:	2b90      	cmp	r3, #144	@ 0x90
 8007484:	d119      	bne.n	80074ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3338      	adds	r3, #56	@ 0x38
 800748a:	3336      	adds	r3, #54	@ 0x36
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe f9b9 	bl	8005804 <ld_dword>
 8007492:	4603      	mov	r3, r0
 8007494:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007498:	4a0a      	ldr	r2, [pc, #40]	@ (80074c4 <check_fs+0xa4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d101      	bne.n	80074a2 <check_fs+0x82>
 800749e:	2300      	movs	r3, #0
 80074a0:	e00c      	b.n	80074bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3338      	adds	r3, #56	@ 0x38
 80074a6:	3352      	adds	r3, #82	@ 0x52
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe f9ab 	bl	8005804 <ld_dword>
 80074ae:	4603      	mov	r3, r0
 80074b0:	4a05      	ldr	r2, [pc, #20]	@ (80074c8 <check_fs+0xa8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d101      	bne.n	80074ba <check_fs+0x9a>
 80074b6:	2300      	movs	r3, #0
 80074b8:	e000      	b.n	80074bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80074ba:	2302      	movs	r3, #2
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	00544146 	.word	0x00544146
 80074c8:	33544146 	.word	0x33544146

080074cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b096      	sub	sp, #88	@ 0x58
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f7ff ff59 	bl	8007398 <get_ldnumber>
 80074e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80074e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da01      	bge.n	80074f2 <find_volume+0x26>
 80074ee:	230b      	movs	r3, #11
 80074f0:	e265      	b.n	80079be <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80074f2:	4a9f      	ldr	r2, [pc, #636]	@ (8007770 <find_volume+0x2a4>)
 80074f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80074fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <find_volume+0x3a>
 8007502:	230c      	movs	r3, #12
 8007504:	e25b      	b.n	80079be <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800750a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	f023 0301 	bic.w	r3, r3, #1
 8007512:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01a      	beq.n	8007552 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe f8b7 	bl	8005694 <disk_status>
 8007526:	4603      	mov	r3, r0
 8007528:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800752c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10c      	bne.n	8007552 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <find_volume+0x82>
 800753e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007542:	f003 0304 	and.w	r3, r3, #4
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800754a:	230a      	movs	r3, #10
 800754c:	e237      	b.n	80079be <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800754e:	2300      	movs	r3, #0
 8007550:	e235      	b.n	80079be <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800755a:	b2da      	uxtb	r2, r3
 800755c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	785b      	ldrb	r3, [r3, #1]
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe f8af 	bl	80056c8 <disk_initialize>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007570:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800757c:	2303      	movs	r3, #3
 800757e:	e21e      	b.n	80079be <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <find_volume+0xca>
 8007586:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007592:	230a      	movs	r3, #10
 8007594:	e213      	b.n	80079be <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007598:	7858      	ldrb	r0, [r3, #1]
 800759a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759c:	330c      	adds	r3, #12
 800759e:	461a      	mov	r2, r3
 80075a0:	2102      	movs	r1, #2
 80075a2:	f7fe f8f9 	bl	8005798 <disk_ioctl>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <find_volume+0xe4>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e206      	b.n	80079be <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80075b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b2:	899b      	ldrh	r3, [r3, #12]
 80075b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b8:	d80d      	bhi.n	80075d6 <find_volume+0x10a>
 80075ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075bc:	899b      	ldrh	r3, [r3, #12]
 80075be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c2:	d308      	bcc.n	80075d6 <find_volume+0x10a>
 80075c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c6:	899b      	ldrh	r3, [r3, #12]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075cc:	899b      	ldrh	r3, [r3, #12]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <find_volume+0x10e>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e1f1      	b.n	80079be <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80075de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075e2:	f7ff ff1d 	bl	8007420 <check_fs>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80075ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d149      	bne.n	8007688 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80075f4:	2300      	movs	r3, #0
 80075f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80075f8:	e01e      	b.n	8007638 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007608:	4413      	add	r3, r2
 800760a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800760c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760e:	3304      	adds	r3, #4
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <find_volume+0x158>
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	3308      	adds	r3, #8
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe f8f2 	bl	8005804 <ld_dword>
 8007620:	4602      	mov	r2, r0
 8007622:	e000      	b.n	8007626 <find_volume+0x15a>
 8007624:	2200      	movs	r2, #0
 8007626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	3358      	adds	r3, #88	@ 0x58
 800762c:	443b      	add	r3, r7
 800762e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007634:	3301      	adds	r3, #1
 8007636:	643b      	str	r3, [r7, #64]	@ 0x40
 8007638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800763a:	2b03      	cmp	r3, #3
 800763c:	d9dd      	bls.n	80075fa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800763e:	2300      	movs	r3, #0
 8007640:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <find_volume+0x182>
 8007648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800764a:	3b01      	subs	r3, #1
 800764c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800764e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	3358      	adds	r3, #88	@ 0x58
 8007654:	443b      	add	r3, r7
 8007656:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800765a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800765c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <find_volume+0x1a2>
 8007662:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007664:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007666:	f7ff fedb 	bl	8007420 <check_fs>
 800766a:	4603      	mov	r3, r0
 800766c:	e000      	b.n	8007670 <find_volume+0x1a4>
 800766e:	2303      	movs	r3, #3
 8007670:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007674:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007678:	2b01      	cmp	r3, #1
 800767a:	d905      	bls.n	8007688 <find_volume+0x1bc>
 800767c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800767e:	3301      	adds	r3, #1
 8007680:	643b      	str	r3, [r7, #64]	@ 0x40
 8007682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007684:	2b03      	cmp	r3, #3
 8007686:	d9e2      	bls.n	800764e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007688:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800768c:	2b04      	cmp	r3, #4
 800768e:	d101      	bne.n	8007694 <find_volume+0x1c8>
 8007690:	2301      	movs	r3, #1
 8007692:	e194      	b.n	80079be <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007694:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007698:	2b01      	cmp	r3, #1
 800769a:	d901      	bls.n	80076a0 <find_volume+0x1d4>
 800769c:	230d      	movs	r3, #13
 800769e:	e18e      	b.n	80079be <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80076a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a2:	3338      	adds	r3, #56	@ 0x38
 80076a4:	330b      	adds	r3, #11
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe f894 	bl	80057d4 <ld_word>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461a      	mov	r2, r3
 80076b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b2:	899b      	ldrh	r3, [r3, #12]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d001      	beq.n	80076bc <find_volume+0x1f0>
 80076b8:	230d      	movs	r3, #13
 80076ba:	e180      	b.n	80079be <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	3338      	adds	r3, #56	@ 0x38
 80076c0:	3316      	adds	r3, #22
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe f886 	bl	80057d4 <ld_word>
 80076c8:	4603      	mov	r3, r0
 80076ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80076cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <find_volume+0x214>
 80076d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d4:	3338      	adds	r3, #56	@ 0x38
 80076d6:	3324      	adds	r3, #36	@ 0x24
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe f893 	bl	8005804 <ld_dword>
 80076de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80076e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076e4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	789b      	ldrb	r3, [r3, #2]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d005      	beq.n	8007704 <find_volume+0x238>
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	789b      	ldrb	r3, [r3, #2]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d001      	beq.n	8007704 <find_volume+0x238>
 8007700:	230d      	movs	r3, #13
 8007702:	e15c      	b.n	80079be <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007706:	789b      	ldrb	r3, [r3, #2]
 8007708:	461a      	mov	r2, r3
 800770a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800770c:	fb02 f303 	mul.w	r3, r2, r3
 8007710:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007714:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007718:	461a      	mov	r2, r3
 800771a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800771e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007720:	895b      	ldrh	r3, [r3, #10]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <find_volume+0x26c>
 8007726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007728:	895b      	ldrh	r3, [r3, #10]
 800772a:	461a      	mov	r2, r3
 800772c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772e:	895b      	ldrh	r3, [r3, #10]
 8007730:	3b01      	subs	r3, #1
 8007732:	4013      	ands	r3, r2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <find_volume+0x270>
 8007738:	230d      	movs	r3, #13
 800773a:	e140      	b.n	80079be <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	3338      	adds	r3, #56	@ 0x38
 8007740:	3311      	adds	r3, #17
 8007742:	4618      	mov	r0, r3
 8007744:	f7fe f846 	bl	80057d4 <ld_word>
 8007748:	4603      	mov	r3, r0
 800774a:	461a      	mov	r2, r3
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	891b      	ldrh	r3, [r3, #8]
 8007754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007756:	8992      	ldrh	r2, [r2, #12]
 8007758:	0952      	lsrs	r2, r2, #5
 800775a:	b292      	uxth	r2, r2
 800775c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007760:	fb01 f202 	mul.w	r2, r1, r2
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <find_volume+0x2a8>
 800776c:	230d      	movs	r3, #13
 800776e:	e126      	b.n	80079be <find_volume+0x4f2>
 8007770:	2001e0e4 	.word	0x2001e0e4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007776:	3338      	adds	r3, #56	@ 0x38
 8007778:	3313      	adds	r3, #19
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe f82a 	bl	80057d4 <ld_word>
 8007780:	4603      	mov	r3, r0
 8007782:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <find_volume+0x2cc>
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	3338      	adds	r3, #56	@ 0x38
 800778e:	3320      	adds	r3, #32
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe f837 	bl	8005804 <ld_dword>
 8007796:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779a:	3338      	adds	r3, #56	@ 0x38
 800779c:	330e      	adds	r3, #14
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe f818 	bl	80057d4 <ld_word>
 80077a4:	4603      	mov	r3, r0
 80077a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80077a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <find_volume+0x2e6>
 80077ae:	230d      	movs	r3, #13
 80077b0:	e105      	b.n	80079be <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80077b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80077b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b6:	4413      	add	r3, r2
 80077b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077ba:	8911      	ldrh	r1, [r2, #8]
 80077bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077be:	8992      	ldrh	r2, [r2, #12]
 80077c0:	0952      	lsrs	r2, r2, #5
 80077c2:	b292      	uxth	r2, r2
 80077c4:	fbb1 f2f2 	udiv	r2, r1, r2
 80077c8:	b292      	uxth	r2, r2
 80077ca:	4413      	add	r3, r2
 80077cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80077ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d201      	bcs.n	80077da <find_volume+0x30e>
 80077d6:	230d      	movs	r3, #13
 80077d8:	e0f1      	b.n	80079be <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80077da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077e2:	8952      	ldrh	r2, [r2, #10]
 80077e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80077e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <find_volume+0x328>
 80077f0:	230d      	movs	r3, #13
 80077f2:	e0e4      	b.n	80079be <find_volume+0x4f2>
		fmt = FS_FAT32;
 80077f4:	2303      	movs	r3, #3
 80077f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007800:	4293      	cmp	r3, r2
 8007802:	d802      	bhi.n	800780a <find_volume+0x33e>
 8007804:	2302      	movs	r3, #2
 8007806:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007810:	4293      	cmp	r3, r2
 8007812:	d802      	bhi.n	800781a <find_volume+0x34e>
 8007814:	2301      	movs	r3, #1
 8007816:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	1c9a      	adds	r2, r3, #2
 800781e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007820:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007824:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007826:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007828:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800782a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800782c:	441a      	add	r2, r3
 800782e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007830:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007832:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007836:	441a      	add	r2, r3
 8007838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800783c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007840:	2b03      	cmp	r3, #3
 8007842:	d11e      	bne.n	8007882 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007846:	3338      	adds	r3, #56	@ 0x38
 8007848:	332a      	adds	r3, #42	@ 0x2a
 800784a:	4618      	mov	r0, r3
 800784c:	f7fd ffc2 	bl	80057d4 <ld_word>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <find_volume+0x38e>
 8007856:	230d      	movs	r3, #13
 8007858:	e0b1      	b.n	80079be <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	891b      	ldrh	r3, [r3, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <find_volume+0x39a>
 8007862:	230d      	movs	r3, #13
 8007864:	e0ab      	b.n	80079be <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007868:	3338      	adds	r3, #56	@ 0x38
 800786a:	332c      	adds	r3, #44	@ 0x2c
 800786c:	4618      	mov	r0, r3
 800786e:	f7fd ffc9 	bl	8005804 <ld_dword>
 8007872:	4602      	mov	r2, r0
 8007874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007876:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007880:	e01f      	b.n	80078c2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007884:	891b      	ldrh	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <find_volume+0x3c2>
 800788a:	230d      	movs	r3, #13
 800788c:	e097      	b.n	80079be <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800788e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007890:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007894:	441a      	add	r2, r3
 8007896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007898:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800789a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d103      	bne.n	80078aa <find_volume+0x3de>
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	e00a      	b.n	80078c0 <find_volume+0x3f4>
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	69da      	ldr	r2, [r3, #28]
 80078ae:	4613      	mov	r3, r2
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	4413      	add	r3, r2
 80078b4:	085a      	lsrs	r2, r3, #1
 80078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80078c0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	6a1a      	ldr	r2, [r3, #32]
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	899b      	ldrh	r3, [r3, #12]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ce:	440b      	add	r3, r1
 80078d0:	3b01      	subs	r3, #1
 80078d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80078d4:	8989      	ldrh	r1, [r1, #12]
 80078d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80078da:	429a      	cmp	r2, r3
 80078dc:	d201      	bcs.n	80078e2 <find_volume+0x416>
 80078de:	230d      	movs	r3, #13
 80078e0:	e06d      	b.n	80079be <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	f04f 32ff 	mov.w	r2, #4294967295
 80078e8:	619a      	str	r2, [r3, #24]
 80078ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80078f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f4:	2280      	movs	r2, #128	@ 0x80
 80078f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80078f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d149      	bne.n	8007994 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	3338      	adds	r3, #56	@ 0x38
 8007904:	3330      	adds	r3, #48	@ 0x30
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd ff64 	bl	80057d4 <ld_word>
 800790c:	4603      	mov	r3, r0
 800790e:	2b01      	cmp	r3, #1
 8007910:	d140      	bne.n	8007994 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007914:	3301      	adds	r3, #1
 8007916:	4619      	mov	r1, r3
 8007918:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800791a:	f7fe fa0b 	bl	8005d34 <move_window>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d137      	bne.n	8007994 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	2200      	movs	r2, #0
 8007928:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800792a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792c:	3338      	adds	r3, #56	@ 0x38
 800792e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd ff4e 	bl	80057d4 <ld_word>
 8007938:	4603      	mov	r3, r0
 800793a:	461a      	mov	r2, r3
 800793c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007940:	429a      	cmp	r2, r3
 8007942:	d127      	bne.n	8007994 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	3338      	adds	r3, #56	@ 0x38
 8007948:	4618      	mov	r0, r3
 800794a:	f7fd ff5b 	bl	8005804 <ld_dword>
 800794e:	4603      	mov	r3, r0
 8007950:	4a1d      	ldr	r2, [pc, #116]	@ (80079c8 <find_volume+0x4fc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d11e      	bne.n	8007994 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007958:	3338      	adds	r3, #56	@ 0x38
 800795a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800795e:	4618      	mov	r0, r3
 8007960:	f7fd ff50 	bl	8005804 <ld_dword>
 8007964:	4603      	mov	r3, r0
 8007966:	4a19      	ldr	r2, [pc, #100]	@ (80079cc <find_volume+0x500>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d113      	bne.n	8007994 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796e:	3338      	adds	r3, #56	@ 0x38
 8007970:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007974:	4618      	mov	r0, r3
 8007976:	f7fd ff45 	bl	8005804 <ld_dword>
 800797a:	4602      	mov	r2, r0
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	3338      	adds	r3, #56	@ 0x38
 8007984:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007988:	4618      	mov	r0, r3
 800798a:	f7fd ff3b 	bl	8005804 <ld_dword>
 800798e:	4602      	mov	r2, r0
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007996:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800799a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800799c:	4b0c      	ldr	r3, [pc, #48]	@ (80079d0 <find_volume+0x504>)
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	4b0a      	ldr	r3, [pc, #40]	@ (80079d0 <find_volume+0x504>)
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <find_volume+0x504>)
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	4a08      	ldr	r2, [pc, #32]	@ (80079d4 <find_volume+0x508>)
 80079b4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80079b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079b8:	f7fe f954 	bl	8005c64 <clear_lock>
#endif
	return FR_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3758      	adds	r7, #88	@ 0x58
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	41615252 	.word	0x41615252
 80079cc:	61417272 	.word	0x61417272
 80079d0:	2001e0e8 	.word	0x2001e0e8
 80079d4:	2001e10c 	.word	0x2001e10c

080079d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80079e2:	2309      	movs	r3, #9
 80079e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01c      	beq.n	8007a26 <validate+0x4e>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d018      	beq.n	8007a26 <validate+0x4e>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d013      	beq.n	8007a26 <validate+0x4e>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	889a      	ldrh	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	88db      	ldrh	r3, [r3, #6]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d10c      	bne.n	8007a26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fd fe3e 	bl	8005694 <disk_status>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <validate+0x4e>
			res = FR_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d102      	bne.n	8007a32 <validate+0x5a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	e000      	b.n	8007a34 <validate+0x5c>
 8007a32:	2300      	movs	r3, #0
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	6013      	str	r3, [r2, #0]
	return res;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007a56:	f107 0310 	add.w	r3, r7, #16
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff fc9c 	bl	8007398 <get_ldnumber>
 8007a60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	da01      	bge.n	8007a6c <f_mount+0x28>
 8007a68:	230b      	movs	r3, #11
 8007a6a:	e02b      	b.n	8007ac4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007a6c:	4a17      	ldr	r2, [pc, #92]	@ (8007acc <f_mount+0x88>)
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007a7c:	69b8      	ldr	r0, [r7, #24]
 8007a7e:	f7fe f8f1 	bl	8005c64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	490d      	ldr	r1, [pc, #52]	@ (8007acc <f_mount+0x88>)
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <f_mount+0x66>
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d001      	beq.n	8007aae <f_mount+0x6a>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e00a      	b.n	8007ac4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007aae:	f107 010c 	add.w	r1, r7, #12
 8007ab2:	f107 0308 	add.w	r3, r7, #8
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff fd07 	bl	80074cc <find_volume>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3720      	adds	r7, #32
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	2001e0e4 	.word	0x2001e0e4

08007ad0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b09a      	sub	sp, #104	@ 0x68
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <f_open+0x18>
 8007ae4:	2309      	movs	r3, #9
 8007ae6:	e1b7      	b.n	8007e58 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007aee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007af0:	79fa      	ldrb	r2, [r7, #7]
 8007af2:	f107 0114 	add.w	r1, r7, #20
 8007af6:	f107 0308 	add.w	r3, r7, #8
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff fce6 	bl	80074cc <find_volume>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007b06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f040 819b 	bne.w	8007e46 <f_open+0x376>
		dj.obj.fs = fs;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	f107 0318 	add.w	r3, r7, #24
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fbc5 	bl	80072ac <follow_path>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b28:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d118      	bne.n	8007b62 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b30:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007b34:	b25b      	sxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	da03      	bge.n	8007b42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007b40:	e00f      	b.n	8007b62 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	bf8c      	ite	hi
 8007b48:	2301      	movhi	r3, #1
 8007b4a:	2300      	movls	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f107 0318 	add.w	r3, r7, #24
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd ff3c 	bl	80059d4 <chk_lock>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	f003 031c 	and.w	r3, r3, #28
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d07f      	beq.n	8007c6c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007b6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d017      	beq.n	8007ba4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007b74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d10e      	bne.n	8007b9a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b7c:	f7fd ff86 	bl	8005a8c <enq_lock>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d006      	beq.n	8007b94 <f_open+0xc4>
 8007b86:	f107 0318 	add.w	r3, r7, #24
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff f8de 	bl	8006d4c <dir_register>
 8007b90:	4603      	mov	r3, r0
 8007b92:	e000      	b.n	8007b96 <f_open+0xc6>
 8007b94:	2312      	movs	r3, #18
 8007b96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	f043 0308 	orr.w	r3, r3, #8
 8007ba0:	71fb      	strb	r3, [r7, #7]
 8007ba2:	e010      	b.n	8007bc6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ba4:	7fbb      	ldrb	r3, [r7, #30]
 8007ba6:	f003 0311 	and.w	r3, r3, #17
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <f_open+0xe6>
					res = FR_DENIED;
 8007bae:	2307      	movs	r3, #7
 8007bb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007bb4:	e007      	b.n	8007bc6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <f_open+0xf6>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bc6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d168      	bne.n	8007ca0 <f_open+0x1d0>
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d063      	beq.n	8007ca0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007bd8:	f7fd fcfe 	bl	80055d8 <get_fattime>
 8007bdc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	330e      	adds	r3, #14
 8007be2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fd fe4b 	bl	8005880 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	3316      	adds	r3, #22
 8007bee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fd fe45 	bl	8005880 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	330b      	adds	r3, #11
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe fe1a 	bl	800683e <ld_clust>
 8007c0a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c10:	2200      	movs	r2, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fe32 	bl	800687c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1a:	331c      	adds	r3, #28
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd fe2e 	bl	8005880 <st_dword>
					fs->wflag = 1;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2201      	movs	r2, #1
 8007c28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d037      	beq.n	8007ca0 <f_open+0x1d0>
						dw = fs->winsect;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c34:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007c36:	f107 0318 	add.w	r3, r7, #24
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fb22 	bl	8006288 <remove_chain>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d126      	bne.n	8007ca0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe f86c 	bl	8005d34 <move_window>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c66:	3a01      	subs	r2, #1
 8007c68:	615a      	str	r2, [r3, #20]
 8007c6a:	e019      	b.n	8007ca0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007c6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d115      	bne.n	8007ca0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007c74:	7fbb      	ldrb	r3, [r7, #30]
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007c7e:	2304      	movs	r3, #4
 8007c80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007c84:	e00c      	b.n	8007ca0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <f_open+0x1d0>
 8007c90:	7fbb      	ldrb	r3, [r7, #30]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <f_open+0x1d0>
						res = FR_DENIED;
 8007c9a:	2307      	movs	r3, #7
 8007c9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007ca0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d126      	bne.n	8007cf6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007cc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	bf8c      	ite	hi
 8007cce:	2301      	movhi	r3, #1
 8007cd0:	2300      	movls	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f107 0318 	add.w	r3, r7, #24
 8007cda:	4611      	mov	r1, r2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd fef7 	bl	8005ad0 <inc_lock>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <f_open+0x226>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f040 80a3 	bne.w	8007e46 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fd99 	bl	800683e <ld_clust>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d14:	331c      	adds	r3, #28
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fd fd74 	bl	8005804 <ld_dword>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	88da      	ldrh	r2, [r3, #6]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	79fa      	ldrb	r2, [r7, #7]
 8007d3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3330      	adds	r3, #48	@ 0x30
 8007d52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007d56:	2100      	movs	r1, #0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fd fdde 	bl	800591a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d06e      	beq.n	8007e46 <f_open+0x376>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d06a      	beq.n	8007e46 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	895b      	ldrh	r3, [r3, #10]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	899b      	ldrh	r3, [r3, #12]
 8007d82:	fb02 f303 	mul.w	r3, r2, r3
 8007d86:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d94:	e016      	b.n	8007dc4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe f887 	bl	8005eae <get_fat>
 8007da0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007da2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d802      	bhi.n	8007dae <f_open+0x2de>
 8007da8:	2302      	movs	r3, #2
 8007daa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007dae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d102      	bne.n	8007dbc <f_open+0x2ec>
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <f_open+0x304>
 8007dcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d8e0      	bhi.n	8007d96 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007dd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007dda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d131      	bne.n	8007e46 <f_open+0x376>
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	899b      	ldrh	r3, [r3, #12]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dea:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dee:	fb01 f202 	mul.w	r2, r1, r2
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d026      	beq.n	8007e46 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe f837 	bl	8005e70 <clust2sect>
 8007e02:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <f_open+0x342>
						res = FR_INT_ERR;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007e10:	e019      	b.n	8007e46 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	899b      	ldrh	r3, [r3, #12]
 8007e16:	461a      	mov	r2, r3
 8007e18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e20:	441a      	add	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	7858      	ldrb	r0, [r3, #1]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a1a      	ldr	r2, [r3, #32]
 8007e34:	2301      	movs	r3, #1
 8007e36:	f7fd fc6f 	bl	8005718 <disk_read>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <f_open+0x376>
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007e46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <f_open+0x384>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3768      	adds	r7, #104	@ 0x68
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08e      	sub	sp, #56	@ 0x38
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f107 0214 	add.w	r2, r7, #20
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff fda9 	bl	80079d8 <validate>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d107      	bne.n	8007ea4 <f_read+0x44>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	7d5b      	ldrb	r3, [r3, #21]
 8007e98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <f_read+0x4a>
 8007ea4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ea8:	e135      	b.n	8008116 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	7d1b      	ldrb	r3, [r3, #20]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <f_read+0x5a>
 8007eb6:	2307      	movs	r3, #7
 8007eb8:	e12d      	b.n	8008116 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	f240 811e 	bls.w	800810c <f_read+0x2ac>
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007ed4:	e11a      	b.n	800810c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	8992      	ldrh	r2, [r2, #12]
 8007ede:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ee2:	fb01 f202 	mul.w	r2, r1, r2
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 80d5 	bne.w	8008098 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	8992      	ldrh	r2, [r2, #12]
 8007ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	8952      	ldrh	r2, [r2, #10]
 8007efe:	3a01      	subs	r2, #1
 8007f00:	4013      	ands	r3, r2
 8007f02:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d12f      	bne.n	8007f6a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f18:	e013      	b.n	8007f42 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	4619      	mov	r1, r3
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7fe faaa 	bl	8006482 <clmt_clust>
 8007f2e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007f30:	e007      	b.n	8007f42 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f7fd ffb7 	bl	8005eae <get_fat>
 8007f40:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d804      	bhi.n	8007f52 <f_read+0xf2>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	755a      	strb	r2, [r3, #21]
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e0e1      	b.n	8008116 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d104      	bne.n	8007f64 <f_read+0x104>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	755a      	strb	r2, [r3, #21]
 8007f60:	2301      	movs	r3, #1
 8007f62:	e0d8      	b.n	8008116 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f68:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f7fd ff7c 	bl	8005e70 <clust2sect>
 8007f78:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <f_read+0x12a>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2202      	movs	r2, #2
 8007f84:	755a      	strb	r2, [r3, #21]
 8007f86:	2302      	movs	r3, #2
 8007f88:	e0c5      	b.n	8008116 <f_read+0x2b6>
			sect += csect;
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4413      	add	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	899b      	ldrh	r3, [r3, #12]
 8007f96:	461a      	mov	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d041      	beq.n	800802a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007fa6:	69fa      	ldr	r2, [r7, #28]
 8007fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007faa:	4413      	add	r3, r2
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	8952      	ldrh	r2, [r2, #10]
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d905      	bls.n	8007fc0 <f_read+0x160>
					cc = fs->csize - csect;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	895b      	ldrh	r3, [r3, #10]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	7858      	ldrb	r0, [r3, #1]
 8007fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fca:	f7fd fba5 	bl	8005718 <disk_read>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d004      	beq.n	8007fde <f_read+0x17e>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	755a      	strb	r2, [r3, #21]
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e09b      	b.n	8008116 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	7d1b      	ldrb	r3, [r3, #20]
 8007fe2:	b25b      	sxtb	r3, r3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da18      	bge.n	800801a <f_read+0x1ba>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6a1a      	ldr	r2, [r3, #32]
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d911      	bls.n	800801a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a1a      	ldr	r2, [r3, #32]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	8992      	ldrh	r2, [r2, #12]
 8008002:	fb02 f303 	mul.w	r3, r2, r3
 8008006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008008:	18d0      	adds	r0, r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	899b      	ldrh	r3, [r3, #12]
 8008014:	461a      	mov	r2, r3
 8008016:	f7fd fc5f 	bl	80058d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	899b      	ldrh	r3, [r3, #12]
 800801e:	461a      	mov	r2, r3
 8008020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008022:	fb02 f303 	mul.w	r3, r2, r3
 8008026:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008028:	e05c      	b.n	80080e4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	429a      	cmp	r2, r3
 8008032:	d02e      	beq.n	8008092 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	7d1b      	ldrb	r3, [r3, #20]
 8008038:	b25b      	sxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	da18      	bge.n	8008070 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	7858      	ldrb	r0, [r3, #1]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	2301      	movs	r3, #1
 800804e:	f7fd fb83 	bl	8005758 <disk_write>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <f_read+0x202>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	755a      	strb	r2, [r3, #21]
 800805e:	2301      	movs	r3, #1
 8008060:	e059      	b.n	8008116 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	7d1b      	ldrb	r3, [r3, #20]
 8008066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800806a:	b2da      	uxtb	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	7858      	ldrb	r0, [r3, #1]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800807a:	2301      	movs	r3, #1
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	f7fd fb4b 	bl	8005718 <disk_read>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <f_read+0x232>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	755a      	strb	r2, [r3, #21]
 800808e:	2301      	movs	r3, #1
 8008090:	e041      	b.n	8008116 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	899b      	ldrh	r3, [r3, #12]
 800809c:	4618      	mov	r0, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	8992      	ldrh	r2, [r2, #12]
 80080a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80080aa:	fb01 f202 	mul.w	r2, r1, r2
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	1ac3      	subs	r3, r0, r3
 80080b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80080b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d901      	bls.n	80080c0 <f_read+0x260>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	8992      	ldrh	r2, [r2, #12]
 80080ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80080d2:	fb00 f202 	mul.w	r2, r0, r2
 80080d6:	1a9b      	subs	r3, r3, r2
 80080d8:	440b      	add	r3, r1
 80080da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080dc:	4619      	mov	r1, r3
 80080de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080e0:	f7fd fbfa 	bl	80058d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80080e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e8:	4413      	add	r3, r2
 80080ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	699a      	ldr	r2, [r3, #24]
 80080f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f2:	441a      	add	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	619a      	str	r2, [r3, #24]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fe:	441a      	add	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f47f aee1 	bne.w	8007ed6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3738      	adds	r7, #56	@ 0x38
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b086      	sub	sp, #24
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f107 0208 	add.w	r2, r7, #8
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fc52 	bl	80079d8 <validate>
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d168      	bne.n	8008210 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7d1b      	ldrb	r3, [r3, #20]
 8008142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	d062      	beq.n	8008210 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7d1b      	ldrb	r3, [r3, #20]
 800814e:	b25b      	sxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	da15      	bge.n	8008180 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	7858      	ldrb	r0, [r3, #1]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1a      	ldr	r2, [r3, #32]
 8008162:	2301      	movs	r3, #1
 8008164:	f7fd faf8 	bl	8005758 <disk_write>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <f_sync+0x54>
 800816e:	2301      	movs	r3, #1
 8008170:	e04f      	b.n	8008212 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7d1b      	ldrb	r3, [r3, #20]
 8008176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800817a:	b2da      	uxtb	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008180:	f7fd fa2a 	bl	80055d8 <get_fattime>
 8008184:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f7fd fdd0 	bl	8005d34 <move_window>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d138      	bne.n	8008210 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	330b      	adds	r3, #11
 80081a8:	781a      	ldrb	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	330b      	adds	r3, #11
 80081ae:	f042 0220 	orr.w	r2, r2, #32
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	461a      	mov	r2, r3
 80081c0:	68f9      	ldr	r1, [r7, #12]
 80081c2:	f7fe fb5b 	bl	800687c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f103 021c 	add.w	r2, r3, #28
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f7fd fb54 	bl	8005880 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3316      	adds	r3, #22
 80081dc:	6939      	ldr	r1, [r7, #16]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fd fb4e 	bl	8005880 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3312      	adds	r3, #18
 80081e8:	2100      	movs	r1, #0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fd fb2d 	bl	800584a <st_word>
					fs->wflag = 1;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2201      	movs	r2, #1
 80081f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fd fdc9 	bl	8005d90 <sync_fs>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	7d1b      	ldrb	r3, [r3, #20]
 8008206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800820a:	b2da      	uxtb	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008210:	7dfb      	ldrb	r3, [r7, #23]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff ff7b 	bl	800811e <f_sync>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d118      	bne.n	8008264 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f107 0208 	add.w	r2, r7, #8
 8008238:	4611      	mov	r1, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fbcc 	bl	80079d8 <validate>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10c      	bne.n	8008264 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	4618      	mov	r0, r3
 8008250:	f7fd fccc 	bl	8005bec <dec_lock>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800827e:	2301      	movs	r3, #1
 8008280:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008286:	4b1f      	ldr	r3, [pc, #124]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 8008288:	7a5b      	ldrb	r3, [r3, #9]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d131      	bne.n	80082f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008290:	4b1c      	ldr	r3, [pc, #112]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 8008292:	7a5b      	ldrb	r3, [r3, #9]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	4b1a      	ldr	r3, [pc, #104]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 800829a:	2100      	movs	r1, #0
 800829c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800829e:	4b19      	ldr	r3, [pc, #100]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 80082a0:	7a5b      	ldrb	r3, [r3, #9]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	4a17      	ldr	r2, [pc, #92]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082ae:	4b15      	ldr	r3, [pc, #84]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 80082b0:	7a5b      	ldrb	r3, [r3, #9]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	4b13      	ldr	r3, [pc, #76]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 80082b8:	4413      	add	r3, r2
 80082ba:	79fa      	ldrb	r2, [r7, #7]
 80082bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80082be:	4b11      	ldr	r3, [pc, #68]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 80082c0:	7a5b      	ldrb	r3, [r3, #9]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	b2d1      	uxtb	r1, r2
 80082c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008304 <FATFS_LinkDriverEx+0x94>)
 80082ca:	7251      	strb	r1, [r2, #9]
 80082cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082ce:	7dbb      	ldrb	r3, [r7, #22]
 80082d0:	3330      	adds	r3, #48	@ 0x30
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3301      	adds	r3, #1
 80082dc:	223a      	movs	r2, #58	@ 0x3a
 80082de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	3302      	adds	r3, #2
 80082e4:	222f      	movs	r2, #47	@ 0x2f
 80082e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	3303      	adds	r3, #3
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	2001e30c 	.word	0x2001e30c

08008308 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008312:	2200      	movs	r2, #0
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7ff ffaa 	bl	8008270 <FATFS_LinkDriverEx>
 800831c:	4603      	mov	r3, r0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	2b7f      	cmp	r3, #127	@ 0x7f
 8008338:	d802      	bhi.n	8008340 <ff_convert+0x18>
		c = chr;
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	81fb      	strh	r3, [r7, #14]
 800833e:	e025      	b.n	800838c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	2bff      	cmp	r3, #255	@ 0xff
 800834a:	d805      	bhi.n	8008358 <ff_convert+0x30>
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	3b80      	subs	r3, #128	@ 0x80
 8008350:	4a12      	ldr	r2, [pc, #72]	@ (800839c <ff_convert+0x74>)
 8008352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008356:	e000      	b.n	800835a <ff_convert+0x32>
 8008358:	2300      	movs	r3, #0
 800835a:	81fb      	strh	r3, [r7, #14]
 800835c:	e016      	b.n	800838c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800835e:	2300      	movs	r3, #0
 8008360:	81fb      	strh	r3, [r7, #14]
 8008362:	e009      	b.n	8008378 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008364:	89fb      	ldrh	r3, [r7, #14]
 8008366:	4a0d      	ldr	r2, [pc, #52]	@ (800839c <ff_convert+0x74>)
 8008368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800836c:	88fa      	ldrh	r2, [r7, #6]
 800836e:	429a      	cmp	r2, r3
 8008370:	d006      	beq.n	8008380 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008372:	89fb      	ldrh	r3, [r7, #14]
 8008374:	3301      	adds	r3, #1
 8008376:	81fb      	strh	r3, [r7, #14]
 8008378:	89fb      	ldrh	r3, [r7, #14]
 800837a:	2b7f      	cmp	r3, #127	@ 0x7f
 800837c:	d9f2      	bls.n	8008364 <ff_convert+0x3c>
 800837e:	e000      	b.n	8008382 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008380:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008382:	89fb      	ldrh	r3, [r7, #14]
 8008384:	3380      	adds	r3, #128	@ 0x80
 8008386:	b29b      	uxth	r3, r3
 8008388:	b2db      	uxtb	r3, r3
 800838a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800838c:	89fb      	ldrh	r3, [r7, #14]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	08008794 	.word	0x08008794

080083a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b0:	d201      	bcs.n	80083b6 <ff_wtoupper+0x16>
 80083b2:	4b3e      	ldr	r3, [pc, #248]	@ (80084ac <ff_wtoupper+0x10c>)
 80083b4:	e000      	b.n	80083b8 <ff_wtoupper+0x18>
 80083b6:	4b3e      	ldr	r3, [pc, #248]	@ (80084b0 <ff_wtoupper+0x110>)
 80083b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	1c9a      	adds	r2, r3, #2
 80083be:	617a      	str	r2, [r7, #20]
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80083c4:	8a7b      	ldrh	r3, [r7, #18]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d068      	beq.n	800849c <ff_wtoupper+0xfc>
 80083ca:	88fa      	ldrh	r2, [r7, #6]
 80083cc:	8a7b      	ldrh	r3, [r7, #18]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d364      	bcc.n	800849c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	1c9a      	adds	r2, r3, #2
 80083d6:	617a      	str	r2, [r7, #20]
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	823b      	strh	r3, [r7, #16]
 80083dc:	8a3b      	ldrh	r3, [r7, #16]
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	81fb      	strh	r3, [r7, #14]
 80083e2:	8a3b      	ldrh	r3, [r7, #16]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80083e8:	88fa      	ldrh	r2, [r7, #6]
 80083ea:	8a79      	ldrh	r1, [r7, #18]
 80083ec:	8a3b      	ldrh	r3, [r7, #16]
 80083ee:	440b      	add	r3, r1
 80083f0:	429a      	cmp	r2, r3
 80083f2:	da49      	bge.n	8008488 <ff_wtoupper+0xe8>
			switch (cmd) {
 80083f4:	89fb      	ldrh	r3, [r7, #14]
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d84f      	bhi.n	800849a <ff_wtoupper+0xfa>
 80083fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008400 <ff_wtoupper+0x60>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008425 	.word	0x08008425
 8008404:	08008437 	.word	0x08008437
 8008408:	0800844d 	.word	0x0800844d
 800840c:	08008455 	.word	0x08008455
 8008410:	0800845d 	.word	0x0800845d
 8008414:	08008465 	.word	0x08008465
 8008418:	0800846d 	.word	0x0800846d
 800841c:	08008475 	.word	0x08008475
 8008420:	0800847d 	.word	0x0800847d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	8a7b      	ldrh	r3, [r7, #18]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	4413      	add	r3, r2
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	80fb      	strh	r3, [r7, #6]
 8008434:	e027      	b.n	8008486 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	8a7b      	ldrh	r3, [r7, #18]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	b29b      	uxth	r3, r3
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	b29b      	uxth	r3, r3
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	80fb      	strh	r3, [r7, #6]
 800844a:	e01c      	b.n	8008486 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	3b10      	subs	r3, #16
 8008450:	80fb      	strh	r3, [r7, #6]
 8008452:	e018      	b.n	8008486 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	3b20      	subs	r3, #32
 8008458:	80fb      	strh	r3, [r7, #6]
 800845a:	e014      	b.n	8008486 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800845c:	88fb      	ldrh	r3, [r7, #6]
 800845e:	3b30      	subs	r3, #48	@ 0x30
 8008460:	80fb      	strh	r3, [r7, #6]
 8008462:	e010      	b.n	8008486 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	3b1a      	subs	r3, #26
 8008468:	80fb      	strh	r3, [r7, #6]
 800846a:	e00c      	b.n	8008486 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	3308      	adds	r3, #8
 8008470:	80fb      	strh	r3, [r7, #6]
 8008472:	e008      	b.n	8008486 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008474:	88fb      	ldrh	r3, [r7, #6]
 8008476:	3b50      	subs	r3, #80	@ 0x50
 8008478:	80fb      	strh	r3, [r7, #6]
 800847a:	e004      	b.n	8008486 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008482:	80fb      	strh	r3, [r7, #6]
 8008484:	bf00      	nop
			}
			break;
 8008486:	e008      	b.n	800849a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008488:	89fb      	ldrh	r3, [r7, #14]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d195      	bne.n	80083ba <ff_wtoupper+0x1a>
 800848e:	8a3b      	ldrh	r3, [r7, #16]
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4413      	add	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008498:	e78f      	b.n	80083ba <ff_wtoupper+0x1a>
			break;
 800849a:	bf00      	nop
	}

	return chr;
 800849c:	88fb      	ldrh	r3, [r7, #6]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	08008894 	.word	0x08008894
 80084b0:	08008a88 	.word	0x08008a88

080084b4 <memset>:
 80084b4:	4402      	add	r2, r0
 80084b6:	4603      	mov	r3, r0
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d100      	bne.n	80084be <memset+0xa>
 80084bc:	4770      	bx	lr
 80084be:	f803 1b01 	strb.w	r1, [r3], #1
 80084c2:	e7f9      	b.n	80084b8 <memset+0x4>

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	@ (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008508 <__libc_init_array+0x44>)
 80084d8:	f000 f818 	bl	800850c <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	08008b4c 	.word	0x08008b4c
 8008500:	08008b4c 	.word	0x08008b4c
 8008504:	08008b4c 	.word	0x08008b4c
 8008508:	08008b50 	.word	0x08008b50

0800850c <_init>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	bf00      	nop
 8008510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008512:	bc08      	pop	{r3}
 8008514:	469e      	mov	lr, r3
 8008516:	4770      	bx	lr

08008518 <_fini>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr
